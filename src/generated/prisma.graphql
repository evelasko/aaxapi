# source: http://localhost:4466/aaxapi/dex
# timestamp: Sun Sep 15 2019 21:17:48 GMT+0200 (Central European Summer Time)

type Address implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  owner: User
  address1: String!
  address2: String
  city: String
  region: String!
  country: String!
  code: String!
  primary: Boolean!
}

"""A connection to a list of items."""
type AddressConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AddressEdge]!
  aggregate: AggregateAddress!
}

input AddressCreateInput {
  id: ID
  address1: String!
  address2: String
  city: String
  region: String!
  country: String!
  code: String!
  primary: Boolean
  owner: UserCreateOneWithoutAddressesInput
}

input AddressCreateManyWithoutOwnerInput {
  create: [AddressCreateWithoutOwnerInput!]
  connect: [AddressWhereUniqueInput!]
}

input AddressCreateWithoutOwnerInput {
  id: ID
  address1: String!
  address2: String
  city: String
  region: String!
  country: String!
  code: String!
  primary: Boolean
}

"""An edge in a connection."""
type AddressEdge {
  """The item at the end of the edge."""
  node: Address!

  """A cursor for use in pagination."""
  cursor: String!
}

enum AddressOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  address1_ASC
  address1_DESC
  address2_ASC
  address2_DESC
  city_ASC
  city_DESC
  region_ASC
  region_DESC
  country_ASC
  country_DESC
  code_ASC
  code_DESC
  primary_ASC
  primary_DESC
}

type AddressPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  address1: String!
  address2: String
  city: String
  region: String!
  country: String!
  code: String!
  primary: Boolean!
}

input AddressScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [AddressScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [AddressScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AddressScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  address1: String

  """All values that are not equal to given value."""
  address1_not: String

  """All values that are contained in given list."""
  address1_in: [String!]

  """All values that are not contained in given list."""
  address1_not_in: [String!]

  """All values less than the given value."""
  address1_lt: String

  """All values less than or equal the given value."""
  address1_lte: String

  """All values greater than the given value."""
  address1_gt: String

  """All values greater than or equal the given value."""
  address1_gte: String

  """All values containing the given string."""
  address1_contains: String

  """All values not containing the given string."""
  address1_not_contains: String

  """All values starting with the given string."""
  address1_starts_with: String

  """All values not starting with the given string."""
  address1_not_starts_with: String

  """All values ending with the given string."""
  address1_ends_with: String

  """All values not ending with the given string."""
  address1_not_ends_with: String
  address2: String

  """All values that are not equal to given value."""
  address2_not: String

  """All values that are contained in given list."""
  address2_in: [String!]

  """All values that are not contained in given list."""
  address2_not_in: [String!]

  """All values less than the given value."""
  address2_lt: String

  """All values less than or equal the given value."""
  address2_lte: String

  """All values greater than the given value."""
  address2_gt: String

  """All values greater than or equal the given value."""
  address2_gte: String

  """All values containing the given string."""
  address2_contains: String

  """All values not containing the given string."""
  address2_not_contains: String

  """All values starting with the given string."""
  address2_starts_with: String

  """All values not starting with the given string."""
  address2_not_starts_with: String

  """All values ending with the given string."""
  address2_ends_with: String

  """All values not ending with the given string."""
  address2_not_ends_with: String
  city: String

  """All values that are not equal to given value."""
  city_not: String

  """All values that are contained in given list."""
  city_in: [String!]

  """All values that are not contained in given list."""
  city_not_in: [String!]

  """All values less than the given value."""
  city_lt: String

  """All values less than or equal the given value."""
  city_lte: String

  """All values greater than the given value."""
  city_gt: String

  """All values greater than or equal the given value."""
  city_gte: String

  """All values containing the given string."""
  city_contains: String

  """All values not containing the given string."""
  city_not_contains: String

  """All values starting with the given string."""
  city_starts_with: String

  """All values not starting with the given string."""
  city_not_starts_with: String

  """All values ending with the given string."""
  city_ends_with: String

  """All values not ending with the given string."""
  city_not_ends_with: String
  region: String

  """All values that are not equal to given value."""
  region_not: String

  """All values that are contained in given list."""
  region_in: [String!]

  """All values that are not contained in given list."""
  region_not_in: [String!]

  """All values less than the given value."""
  region_lt: String

  """All values less than or equal the given value."""
  region_lte: String

  """All values greater than the given value."""
  region_gt: String

  """All values greater than or equal the given value."""
  region_gte: String

  """All values containing the given string."""
  region_contains: String

  """All values not containing the given string."""
  region_not_contains: String

  """All values starting with the given string."""
  region_starts_with: String

  """All values not starting with the given string."""
  region_not_starts_with: String

  """All values ending with the given string."""
  region_ends_with: String

  """All values not ending with the given string."""
  region_not_ends_with: String
  country: String

  """All values that are not equal to given value."""
  country_not: String

  """All values that are contained in given list."""
  country_in: [String!]

  """All values that are not contained in given list."""
  country_not_in: [String!]

  """All values less than the given value."""
  country_lt: String

  """All values less than or equal the given value."""
  country_lte: String

  """All values greater than the given value."""
  country_gt: String

  """All values greater than or equal the given value."""
  country_gte: String

  """All values containing the given string."""
  country_contains: String

  """All values not containing the given string."""
  country_not_contains: String

  """All values starting with the given string."""
  country_starts_with: String

  """All values not starting with the given string."""
  country_not_starts_with: String

  """All values ending with the given string."""
  country_ends_with: String

  """All values not ending with the given string."""
  country_not_ends_with: String
  code: String

  """All values that are not equal to given value."""
  code_not: String

  """All values that are contained in given list."""
  code_in: [String!]

  """All values that are not contained in given list."""
  code_not_in: [String!]

  """All values less than the given value."""
  code_lt: String

  """All values less than or equal the given value."""
  code_lte: String

  """All values greater than the given value."""
  code_gt: String

  """All values greater than or equal the given value."""
  code_gte: String

  """All values containing the given string."""
  code_contains: String

  """All values not containing the given string."""
  code_not_contains: String

  """All values starting with the given string."""
  code_starts_with: String

  """All values not starting with the given string."""
  code_not_starts_with: String

  """All values ending with the given string."""
  code_ends_with: String

  """All values not ending with the given string."""
  code_not_ends_with: String
  primary: Boolean

  """All values that are not equal to given value."""
  primary_not: Boolean
}

type AddressSubscriptionPayload {
  mutation: MutationType!
  node: Address
  updatedFields: [String!]
  previousValues: AddressPreviousValues
}

input AddressSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [AddressSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [AddressSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AddressSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: AddressWhereInput
}

input AddressUpdateInput {
  address1: String
  address2: String
  city: String
  region: String
  country: String
  code: String
  primary: Boolean
  owner: UserUpdateOneWithoutAddressesInput
}

input AddressUpdateManyDataInput {
  address1: String
  address2: String
  city: String
  region: String
  country: String
  code: String
  primary: Boolean
}

input AddressUpdateManyMutationInput {
  address1: String
  address2: String
  city: String
  region: String
  country: String
  code: String
  primary: Boolean
}

input AddressUpdateManyWithoutOwnerInput {
  create: [AddressCreateWithoutOwnerInput!]
  connect: [AddressWhereUniqueInput!]
  set: [AddressWhereUniqueInput!]
  disconnect: [AddressWhereUniqueInput!]
  delete: [AddressWhereUniqueInput!]
  update: [AddressUpdateWithWhereUniqueWithoutOwnerInput!]
  updateMany: [AddressUpdateManyWithWhereNestedInput!]
  deleteMany: [AddressScalarWhereInput!]
  upsert: [AddressUpsertWithWhereUniqueWithoutOwnerInput!]
}

input AddressUpdateManyWithWhereNestedInput {
  where: AddressScalarWhereInput!
  data: AddressUpdateManyDataInput!
}

input AddressUpdateWithoutOwnerDataInput {
  address1: String
  address2: String
  city: String
  region: String
  country: String
  code: String
  primary: Boolean
}

input AddressUpdateWithWhereUniqueWithoutOwnerInput {
  where: AddressWhereUniqueInput!
  data: AddressUpdateWithoutOwnerDataInput!
}

input AddressUpsertWithWhereUniqueWithoutOwnerInput {
  where: AddressWhereUniqueInput!
  update: AddressUpdateWithoutOwnerDataInput!
  create: AddressCreateWithoutOwnerInput!
}

input AddressWhereInput {
  """Logical AND on all given filters."""
  AND: [AddressWhereInput!]

  """Logical OR on all given filters."""
  OR: [AddressWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AddressWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  address1: String

  """All values that are not equal to given value."""
  address1_not: String

  """All values that are contained in given list."""
  address1_in: [String!]

  """All values that are not contained in given list."""
  address1_not_in: [String!]

  """All values less than the given value."""
  address1_lt: String

  """All values less than or equal the given value."""
  address1_lte: String

  """All values greater than the given value."""
  address1_gt: String

  """All values greater than or equal the given value."""
  address1_gte: String

  """All values containing the given string."""
  address1_contains: String

  """All values not containing the given string."""
  address1_not_contains: String

  """All values starting with the given string."""
  address1_starts_with: String

  """All values not starting with the given string."""
  address1_not_starts_with: String

  """All values ending with the given string."""
  address1_ends_with: String

  """All values not ending with the given string."""
  address1_not_ends_with: String
  address2: String

  """All values that are not equal to given value."""
  address2_not: String

  """All values that are contained in given list."""
  address2_in: [String!]

  """All values that are not contained in given list."""
  address2_not_in: [String!]

  """All values less than the given value."""
  address2_lt: String

  """All values less than or equal the given value."""
  address2_lte: String

  """All values greater than the given value."""
  address2_gt: String

  """All values greater than or equal the given value."""
  address2_gte: String

  """All values containing the given string."""
  address2_contains: String

  """All values not containing the given string."""
  address2_not_contains: String

  """All values starting with the given string."""
  address2_starts_with: String

  """All values not starting with the given string."""
  address2_not_starts_with: String

  """All values ending with the given string."""
  address2_ends_with: String

  """All values not ending with the given string."""
  address2_not_ends_with: String
  city: String

  """All values that are not equal to given value."""
  city_not: String

  """All values that are contained in given list."""
  city_in: [String!]

  """All values that are not contained in given list."""
  city_not_in: [String!]

  """All values less than the given value."""
  city_lt: String

  """All values less than or equal the given value."""
  city_lte: String

  """All values greater than the given value."""
  city_gt: String

  """All values greater than or equal the given value."""
  city_gte: String

  """All values containing the given string."""
  city_contains: String

  """All values not containing the given string."""
  city_not_contains: String

  """All values starting with the given string."""
  city_starts_with: String

  """All values not starting with the given string."""
  city_not_starts_with: String

  """All values ending with the given string."""
  city_ends_with: String

  """All values not ending with the given string."""
  city_not_ends_with: String
  region: String

  """All values that are not equal to given value."""
  region_not: String

  """All values that are contained in given list."""
  region_in: [String!]

  """All values that are not contained in given list."""
  region_not_in: [String!]

  """All values less than the given value."""
  region_lt: String

  """All values less than or equal the given value."""
  region_lte: String

  """All values greater than the given value."""
  region_gt: String

  """All values greater than or equal the given value."""
  region_gte: String

  """All values containing the given string."""
  region_contains: String

  """All values not containing the given string."""
  region_not_contains: String

  """All values starting with the given string."""
  region_starts_with: String

  """All values not starting with the given string."""
  region_not_starts_with: String

  """All values ending with the given string."""
  region_ends_with: String

  """All values not ending with the given string."""
  region_not_ends_with: String
  country: String

  """All values that are not equal to given value."""
  country_not: String

  """All values that are contained in given list."""
  country_in: [String!]

  """All values that are not contained in given list."""
  country_not_in: [String!]

  """All values less than the given value."""
  country_lt: String

  """All values less than or equal the given value."""
  country_lte: String

  """All values greater than the given value."""
  country_gt: String

  """All values greater than or equal the given value."""
  country_gte: String

  """All values containing the given string."""
  country_contains: String

  """All values not containing the given string."""
  country_not_contains: String

  """All values starting with the given string."""
  country_starts_with: String

  """All values not starting with the given string."""
  country_not_starts_with: String

  """All values ending with the given string."""
  country_ends_with: String

  """All values not ending with the given string."""
  country_not_ends_with: String
  code: String

  """All values that are not equal to given value."""
  code_not: String

  """All values that are contained in given list."""
  code_in: [String!]

  """All values that are not contained in given list."""
  code_not_in: [String!]

  """All values less than the given value."""
  code_lt: String

  """All values less than or equal the given value."""
  code_lte: String

  """All values greater than the given value."""
  code_gt: String

  """All values greater than or equal the given value."""
  code_gte: String

  """All values containing the given string."""
  code_contains: String

  """All values not containing the given string."""
  code_not_contains: String

  """All values starting with the given string."""
  code_starts_with: String

  """All values not starting with the given string."""
  code_not_starts_with: String

  """All values ending with the given string."""
  code_ends_with: String

  """All values not ending with the given string."""
  code_not_ends_with: String
  primary: Boolean

  """All values that are not equal to given value."""
  primary_not: Boolean
  owner: UserWhereInput
}

input AddressWhereUniqueInput {
  id: ID
}

type AdminRole implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  admins(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
}

"""A connection to a list of items."""
type AdminRoleConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AdminRoleEdge]!
  aggregate: AggregateAdminRole!
}

input AdminRoleCreateInput {
  id: ID
  name: String!
  admins: UserCreateManyWithoutAdminRoleInput
}

input AdminRoleCreateOneWithoutAdminsInput {
  create: AdminRoleCreateWithoutAdminsInput
  connect: AdminRoleWhereUniqueInput
}

input AdminRoleCreateWithoutAdminsInput {
  id: ID
  name: String!
}

"""An edge in a connection."""
type AdminRoleEdge {
  """The item at the end of the edge."""
  node: AdminRole!

  """A cursor for use in pagination."""
  cursor: String!
}

enum AdminRoleOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
}

type AdminRolePreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
}

type AdminRoleSubscriptionPayload {
  mutation: MutationType!
  node: AdminRole
  updatedFields: [String!]
  previousValues: AdminRolePreviousValues
}

input AdminRoleSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [AdminRoleSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [AdminRoleSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AdminRoleSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: AdminRoleWhereInput
}

input AdminRoleUpdateInput {
  name: String
  admins: UserUpdateManyWithoutAdminRoleInput
}

input AdminRoleUpdateManyMutationInput {
  name: String
}

input AdminRoleUpdateOneWithoutAdminsInput {
  create: AdminRoleCreateWithoutAdminsInput
  connect: AdminRoleWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: AdminRoleUpdateWithoutAdminsDataInput
  upsert: AdminRoleUpsertWithoutAdminsInput
}

input AdminRoleUpdateWithoutAdminsDataInput {
  name: String
}

input AdminRoleUpsertWithoutAdminsInput {
  update: AdminRoleUpdateWithoutAdminsDataInput!
  create: AdminRoleCreateWithoutAdminsInput!
}

input AdminRoleWhereInput {
  """Logical AND on all given filters."""
  AND: [AdminRoleWhereInput!]

  """Logical OR on all given filters."""
  OR: [AdminRoleWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AdminRoleWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  admins_every: UserWhereInput
  admins_some: UserWhereInput
  admins_none: UserWhereInput
}

input AdminRoleWhereUniqueInput {
  id: ID
}

type AggregateAddress {
  count: Int!
}

type AggregateAdminRole {
  count: Int!
}

type AggregateBranch {
  count: Int!
}

type AggregateDepartment {
  count: Int!
}

type AggregateDevice {
  count: Int!
}

type AggregateDiscount {
  count: Int!
}

type AggregateDiscountRequest {
  count: Int!
}

type AggregateEvent {
  count: Int!
}

type AggregateItem {
  count: Int!
}

type AggregateLesson {
  count: Int!
}

type AggregateNews {
  count: Int!
}

type AggregateOfficialDocument {
  count: Int!
}

type AggregateOperatingPeriod {
  count: Int!
}

type AggregateOrder {
  count: Int!
}

type AggregateProduct {
  count: Int!
}

type AggregateProductCategory {
  count: Int!
}

type AggregateProgram {
  count: Int!
}

type AggregateSession {
  count: Int!
}

type AggregateSocialLink {
  count: Int!
}

type AggregateSocialNetwork {
  count: Int!
}

type AggregateSpace {
  count: Int!
}

type AggregateSubject {
  count: Int!
}

type AggregateTransaction {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateVenue {
  count: Int!
}

enum AppNodeStatus {
  DRAFT
  PUBLISHED
  DEFERED
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Branch implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  shortName: String!
  description: String
  program: Program!
  subjects(where: SubjectWhereInput, orderBy: SubjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Subject!]
}

"""A connection to a list of items."""
type BranchConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [BranchEdge]!
  aggregate: AggregateBranch!
}

input BranchCreateInput {
  id: ID
  name: String!
  shortName: String!
  description: String
  program: ProgramCreateOneWithoutBranchesInput!
  subjects: SubjectCreateManyWithoutBranchInput
}

input BranchCreateManyWithoutProgramInput {
  create: [BranchCreateWithoutProgramInput!]
  connect: [BranchWhereUniqueInput!]
}

input BranchCreateOneWithoutSubjectsInput {
  create: BranchCreateWithoutSubjectsInput
  connect: BranchWhereUniqueInput
}

input BranchCreateWithoutProgramInput {
  id: ID
  name: String!
  shortName: String!
  description: String
  subjects: SubjectCreateManyWithoutBranchInput
}

input BranchCreateWithoutSubjectsInput {
  id: ID
  name: String!
  shortName: String!
  description: String
  program: ProgramCreateOneWithoutBranchesInput!
}

"""An edge in a connection."""
type BranchEdge {
  """The item at the end of the edge."""
  node: Branch!

  """A cursor for use in pagination."""
  cursor: String!
}

enum BranchOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
  shortName_ASC
  shortName_DESC
  description_ASC
  description_DESC
}

type BranchPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  shortName: String!
  description: String
}

input BranchScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [BranchScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [BranchScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BranchScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  shortName: String

  """All values that are not equal to given value."""
  shortName_not: String

  """All values that are contained in given list."""
  shortName_in: [String!]

  """All values that are not contained in given list."""
  shortName_not_in: [String!]

  """All values less than the given value."""
  shortName_lt: String

  """All values less than or equal the given value."""
  shortName_lte: String

  """All values greater than the given value."""
  shortName_gt: String

  """All values greater than or equal the given value."""
  shortName_gte: String

  """All values containing the given string."""
  shortName_contains: String

  """All values not containing the given string."""
  shortName_not_contains: String

  """All values starting with the given string."""
  shortName_starts_with: String

  """All values not starting with the given string."""
  shortName_not_starts_with: String

  """All values ending with the given string."""
  shortName_ends_with: String

  """All values not ending with the given string."""
  shortName_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
}

type BranchSubscriptionPayload {
  mutation: MutationType!
  node: Branch
  updatedFields: [String!]
  previousValues: BranchPreviousValues
}

input BranchSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [BranchSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [BranchSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BranchSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: BranchWhereInput
}

input BranchUpdateInput {
  name: String
  shortName: String
  description: String
  program: ProgramUpdateOneRequiredWithoutBranchesInput
  subjects: SubjectUpdateManyWithoutBranchInput
}

input BranchUpdateManyDataInput {
  name: String
  shortName: String
  description: String
}

input BranchUpdateManyMutationInput {
  name: String
  shortName: String
  description: String
}

input BranchUpdateManyWithoutProgramInput {
  create: [BranchCreateWithoutProgramInput!]
  connect: [BranchWhereUniqueInput!]
  set: [BranchWhereUniqueInput!]
  disconnect: [BranchWhereUniqueInput!]
  delete: [BranchWhereUniqueInput!]
  update: [BranchUpdateWithWhereUniqueWithoutProgramInput!]
  updateMany: [BranchUpdateManyWithWhereNestedInput!]
  deleteMany: [BranchScalarWhereInput!]
  upsert: [BranchUpsertWithWhereUniqueWithoutProgramInput!]
}

input BranchUpdateManyWithWhereNestedInput {
  where: BranchScalarWhereInput!
  data: BranchUpdateManyDataInput!
}

input BranchUpdateOneRequiredWithoutSubjectsInput {
  create: BranchCreateWithoutSubjectsInput
  connect: BranchWhereUniqueInput
  update: BranchUpdateWithoutSubjectsDataInput
  upsert: BranchUpsertWithoutSubjectsInput
}

input BranchUpdateWithoutProgramDataInput {
  name: String
  shortName: String
  description: String
  subjects: SubjectUpdateManyWithoutBranchInput
}

input BranchUpdateWithoutSubjectsDataInput {
  name: String
  shortName: String
  description: String
  program: ProgramUpdateOneRequiredWithoutBranchesInput
}

input BranchUpdateWithWhereUniqueWithoutProgramInput {
  where: BranchWhereUniqueInput!
  data: BranchUpdateWithoutProgramDataInput!
}

input BranchUpsertWithoutSubjectsInput {
  update: BranchUpdateWithoutSubjectsDataInput!
  create: BranchCreateWithoutSubjectsInput!
}

input BranchUpsertWithWhereUniqueWithoutProgramInput {
  where: BranchWhereUniqueInput!
  update: BranchUpdateWithoutProgramDataInput!
  create: BranchCreateWithoutProgramInput!
}

input BranchWhereInput {
  """Logical AND on all given filters."""
  AND: [BranchWhereInput!]

  """Logical OR on all given filters."""
  OR: [BranchWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BranchWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  shortName: String

  """All values that are not equal to given value."""
  shortName_not: String

  """All values that are contained in given list."""
  shortName_in: [String!]

  """All values that are not contained in given list."""
  shortName_not_in: [String!]

  """All values less than the given value."""
  shortName_lt: String

  """All values less than or equal the given value."""
  shortName_lte: String

  """All values greater than the given value."""
  shortName_gt: String

  """All values greater than or equal the given value."""
  shortName_gte: String

  """All values containing the given string."""
  shortName_contains: String

  """All values not containing the given string."""
  shortName_not_contains: String

  """All values starting with the given string."""
  shortName_starts_with: String

  """All values not starting with the given string."""
  shortName_not_starts_with: String

  """All values ending with the given string."""
  shortName_ends_with: String

  """All values not ending with the given string."""
  shortName_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  program: ProgramWhereInput
  subjects_every: SubjectWhereInput
  subjects_some: SubjectWhereInput
  subjects_none: SubjectWhereInput
}

input BranchWhereUniqueInput {
  id: ID
  name: String
  shortName: String
}

scalar DateTime

type Department implements Node {
  id: ID!
  name: String!
  members(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
}

"""A connection to a list of items."""
type DepartmentConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [DepartmentEdge]!
  aggregate: AggregateDepartment!
}

input DepartmentCreateInput {
  id: ID
  name: String!
  members: UserCreateManyWithoutDepartmentInput
}

input DepartmentCreateOneWithoutMembersInput {
  create: DepartmentCreateWithoutMembersInput
  connect: DepartmentWhereUniqueInput
}

input DepartmentCreateWithoutMembersInput {
  id: ID
  name: String!
}

"""An edge in a connection."""
type DepartmentEdge {
  """The item at the end of the edge."""
  node: Department!

  """A cursor for use in pagination."""
  cursor: String!
}

enum DepartmentOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type DepartmentPreviousValues {
  id: ID!
  name: String!
}

type DepartmentSubscriptionPayload {
  mutation: MutationType!
  node: Department
  updatedFields: [String!]
  previousValues: DepartmentPreviousValues
}

input DepartmentSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [DepartmentSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [DepartmentSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DepartmentSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: DepartmentWhereInput
}

input DepartmentUpdateInput {
  name: String
  members: UserUpdateManyWithoutDepartmentInput
}

input DepartmentUpdateManyMutationInput {
  name: String
}

input DepartmentUpdateOneWithoutMembersInput {
  create: DepartmentCreateWithoutMembersInput
  connect: DepartmentWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: DepartmentUpdateWithoutMembersDataInput
  upsert: DepartmentUpsertWithoutMembersInput
}

input DepartmentUpdateWithoutMembersDataInput {
  name: String
}

input DepartmentUpsertWithoutMembersInput {
  update: DepartmentUpdateWithoutMembersDataInput!
  create: DepartmentCreateWithoutMembersInput!
}

input DepartmentWhereInput {
  """Logical AND on all given filters."""
  AND: [DepartmentWhereInput!]

  """Logical OR on all given filters."""
  OR: [DepartmentWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DepartmentWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  members_every: UserWhereInput
  members_some: UserWhereInput
  members_none: UserWhereInput
}

input DepartmentWhereUniqueInput {
  id: ID
}

type Device implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  owner: User
  countryCode: String
  number: String
  type: DeviceType!
  notificationsId: String
  notificationsPermission: Boolean
  verified: Boolean!
}

"""A connection to a list of items."""
type DeviceConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [DeviceEdge]!
  aggregate: AggregateDevice!
}

input DeviceCreateInput {
  id: ID
  countryCode: String
  number: String
  type: DeviceType
  notificationsId: String
  notificationsPermission: Boolean
  verified: Boolean
  owner: UserCreateOneWithoutDevicesInput
}

input DeviceCreateManyWithoutOwnerInput {
  create: [DeviceCreateWithoutOwnerInput!]
  connect: [DeviceWhereUniqueInput!]
}

input DeviceCreateWithoutOwnerInput {
  id: ID
  countryCode: String
  number: String
  type: DeviceType
  notificationsId: String
  notificationsPermission: Boolean
  verified: Boolean
}

"""An edge in a connection."""
type DeviceEdge {
  """The item at the end of the edge."""
  node: Device!

  """A cursor for use in pagination."""
  cursor: String!
}

enum DeviceOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  countryCode_ASC
  countryCode_DESC
  number_ASC
  number_DESC
  type_ASC
  type_DESC
  notificationsId_ASC
  notificationsId_DESC
  notificationsPermission_ASC
  notificationsPermission_DESC
  verified_ASC
  verified_DESC
}

type DevicePreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  countryCode: String
  number: String
  type: DeviceType!
  notificationsId: String
  notificationsPermission: Boolean
  verified: Boolean!
}

input DeviceScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [DeviceScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [DeviceScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DeviceScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  countryCode: String

  """All values that are not equal to given value."""
  countryCode_not: String

  """All values that are contained in given list."""
  countryCode_in: [String!]

  """All values that are not contained in given list."""
  countryCode_not_in: [String!]

  """All values less than the given value."""
  countryCode_lt: String

  """All values less than or equal the given value."""
  countryCode_lte: String

  """All values greater than the given value."""
  countryCode_gt: String

  """All values greater than or equal the given value."""
  countryCode_gte: String

  """All values containing the given string."""
  countryCode_contains: String

  """All values not containing the given string."""
  countryCode_not_contains: String

  """All values starting with the given string."""
  countryCode_starts_with: String

  """All values not starting with the given string."""
  countryCode_not_starts_with: String

  """All values ending with the given string."""
  countryCode_ends_with: String

  """All values not ending with the given string."""
  countryCode_not_ends_with: String
  number: String

  """All values that are not equal to given value."""
  number_not: String

  """All values that are contained in given list."""
  number_in: [String!]

  """All values that are not contained in given list."""
  number_not_in: [String!]

  """All values less than the given value."""
  number_lt: String

  """All values less than or equal the given value."""
  number_lte: String

  """All values greater than the given value."""
  number_gt: String

  """All values greater than or equal the given value."""
  number_gte: String

  """All values containing the given string."""
  number_contains: String

  """All values not containing the given string."""
  number_not_contains: String

  """All values starting with the given string."""
  number_starts_with: String

  """All values not starting with the given string."""
  number_not_starts_with: String

  """All values ending with the given string."""
  number_ends_with: String

  """All values not ending with the given string."""
  number_not_ends_with: String
  type: DeviceType

  """All values that are not equal to given value."""
  type_not: DeviceType

  """All values that are contained in given list."""
  type_in: [DeviceType!]

  """All values that are not contained in given list."""
  type_not_in: [DeviceType!]
  notificationsId: String

  """All values that are not equal to given value."""
  notificationsId_not: String

  """All values that are contained in given list."""
  notificationsId_in: [String!]

  """All values that are not contained in given list."""
  notificationsId_not_in: [String!]

  """All values less than the given value."""
  notificationsId_lt: String

  """All values less than or equal the given value."""
  notificationsId_lte: String

  """All values greater than the given value."""
  notificationsId_gt: String

  """All values greater than or equal the given value."""
  notificationsId_gte: String

  """All values containing the given string."""
  notificationsId_contains: String

  """All values not containing the given string."""
  notificationsId_not_contains: String

  """All values starting with the given string."""
  notificationsId_starts_with: String

  """All values not starting with the given string."""
  notificationsId_not_starts_with: String

  """All values ending with the given string."""
  notificationsId_ends_with: String

  """All values not ending with the given string."""
  notificationsId_not_ends_with: String
  notificationsPermission: Boolean

  """All values that are not equal to given value."""
  notificationsPermission_not: Boolean
  verified: Boolean

  """All values that are not equal to given value."""
  verified_not: Boolean
}

type DeviceSubscriptionPayload {
  mutation: MutationType!
  node: Device
  updatedFields: [String!]
  previousValues: DevicePreviousValues
}

input DeviceSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [DeviceSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [DeviceSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DeviceSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: DeviceWhereInput
}

enum DeviceType {
  PHONE
  TABLET
  OTHER
}

input DeviceUpdateInput {
  countryCode: String
  number: String
  type: DeviceType
  notificationsId: String
  notificationsPermission: Boolean
  verified: Boolean
  owner: UserUpdateOneWithoutDevicesInput
}

input DeviceUpdateManyDataInput {
  countryCode: String
  number: String
  type: DeviceType
  notificationsId: String
  notificationsPermission: Boolean
  verified: Boolean
}

input DeviceUpdateManyMutationInput {
  countryCode: String
  number: String
  type: DeviceType
  notificationsId: String
  notificationsPermission: Boolean
  verified: Boolean
}

input DeviceUpdateManyWithoutOwnerInput {
  create: [DeviceCreateWithoutOwnerInput!]
  connect: [DeviceWhereUniqueInput!]
  set: [DeviceWhereUniqueInput!]
  disconnect: [DeviceWhereUniqueInput!]
  delete: [DeviceWhereUniqueInput!]
  update: [DeviceUpdateWithWhereUniqueWithoutOwnerInput!]
  updateMany: [DeviceUpdateManyWithWhereNestedInput!]
  deleteMany: [DeviceScalarWhereInput!]
  upsert: [DeviceUpsertWithWhereUniqueWithoutOwnerInput!]
}

input DeviceUpdateManyWithWhereNestedInput {
  where: DeviceScalarWhereInput!
  data: DeviceUpdateManyDataInput!
}

input DeviceUpdateWithoutOwnerDataInput {
  countryCode: String
  number: String
  type: DeviceType
  notificationsId: String
  notificationsPermission: Boolean
  verified: Boolean
}

input DeviceUpdateWithWhereUniqueWithoutOwnerInput {
  where: DeviceWhereUniqueInput!
  data: DeviceUpdateWithoutOwnerDataInput!
}

input DeviceUpsertWithWhereUniqueWithoutOwnerInput {
  where: DeviceWhereUniqueInput!
  update: DeviceUpdateWithoutOwnerDataInput!
  create: DeviceCreateWithoutOwnerInput!
}

input DeviceWhereInput {
  """Logical AND on all given filters."""
  AND: [DeviceWhereInput!]

  """Logical OR on all given filters."""
  OR: [DeviceWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DeviceWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  countryCode: String

  """All values that are not equal to given value."""
  countryCode_not: String

  """All values that are contained in given list."""
  countryCode_in: [String!]

  """All values that are not contained in given list."""
  countryCode_not_in: [String!]

  """All values less than the given value."""
  countryCode_lt: String

  """All values less than or equal the given value."""
  countryCode_lte: String

  """All values greater than the given value."""
  countryCode_gt: String

  """All values greater than or equal the given value."""
  countryCode_gte: String

  """All values containing the given string."""
  countryCode_contains: String

  """All values not containing the given string."""
  countryCode_not_contains: String

  """All values starting with the given string."""
  countryCode_starts_with: String

  """All values not starting with the given string."""
  countryCode_not_starts_with: String

  """All values ending with the given string."""
  countryCode_ends_with: String

  """All values not ending with the given string."""
  countryCode_not_ends_with: String
  number: String

  """All values that are not equal to given value."""
  number_not: String

  """All values that are contained in given list."""
  number_in: [String!]

  """All values that are not contained in given list."""
  number_not_in: [String!]

  """All values less than the given value."""
  number_lt: String

  """All values less than or equal the given value."""
  number_lte: String

  """All values greater than the given value."""
  number_gt: String

  """All values greater than or equal the given value."""
  number_gte: String

  """All values containing the given string."""
  number_contains: String

  """All values not containing the given string."""
  number_not_contains: String

  """All values starting with the given string."""
  number_starts_with: String

  """All values not starting with the given string."""
  number_not_starts_with: String

  """All values ending with the given string."""
  number_ends_with: String

  """All values not ending with the given string."""
  number_not_ends_with: String
  type: DeviceType

  """All values that are not equal to given value."""
  type_not: DeviceType

  """All values that are contained in given list."""
  type_in: [DeviceType!]

  """All values that are not contained in given list."""
  type_not_in: [DeviceType!]
  notificationsId: String

  """All values that are not equal to given value."""
  notificationsId_not: String

  """All values that are contained in given list."""
  notificationsId_in: [String!]

  """All values that are not contained in given list."""
  notificationsId_not_in: [String!]

  """All values less than the given value."""
  notificationsId_lt: String

  """All values less than or equal the given value."""
  notificationsId_lte: String

  """All values greater than the given value."""
  notificationsId_gt: String

  """All values greater than or equal the given value."""
  notificationsId_gte: String

  """All values containing the given string."""
  notificationsId_contains: String

  """All values not containing the given string."""
  notificationsId_not_contains: String

  """All values starting with the given string."""
  notificationsId_starts_with: String

  """All values not starting with the given string."""
  notificationsId_not_starts_with: String

  """All values ending with the given string."""
  notificationsId_ends_with: String

  """All values not ending with the given string."""
  notificationsId_not_ends_with: String
  notificationsPermission: Boolean

  """All values that are not equal to given value."""
  notificationsPermission_not: Boolean
  verified: Boolean

  """All values that are not equal to given value."""
  verified_not: Boolean
  owner: UserWhereInput
}

input DeviceWhereUniqueInput {
  id: ID
}

type Discount implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  product: Product!
  name: String!
  description: String!
  code: String
  unitPrice: Float!
  discountRequests(where: DiscountRequestWhereInput, orderBy: DiscountRequestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [DiscountRequest!]
  requirements: String!
}

"""A connection to a list of items."""
type DiscountConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [DiscountEdge]!
  aggregate: AggregateDiscount!
}

input DiscountCreateInput {
  id: ID
  name: String!
  description: String!
  code: String
  unitPrice: Float!
  requirements: String!
  product: ProductCreateOneWithoutDiscountsInput!
  discountRequests: DiscountRequestCreateManyWithoutDiscountInput
}

input DiscountCreateManyWithoutProductInput {
  create: [DiscountCreateWithoutProductInput!]
  connect: [DiscountWhereUniqueInput!]
}

input DiscountCreateOneInput {
  create: DiscountCreateInput
  connect: DiscountWhereUniqueInput
}

input DiscountCreateOneWithoutDiscountRequestsInput {
  create: DiscountCreateWithoutDiscountRequestsInput
  connect: DiscountWhereUniqueInput
}

input DiscountCreateWithoutDiscountRequestsInput {
  id: ID
  name: String!
  description: String!
  code: String
  unitPrice: Float!
  requirements: String!
  product: ProductCreateOneWithoutDiscountsInput!
}

input DiscountCreateWithoutProductInput {
  id: ID
  name: String!
  description: String!
  code: String
  unitPrice: Float!
  requirements: String!
  discountRequests: DiscountRequestCreateManyWithoutDiscountInput
}

"""An edge in a connection."""
type DiscountEdge {
  """The item at the end of the edge."""
  node: Discount!

  """A cursor for use in pagination."""
  cursor: String!
}

enum DiscountOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  code_ASC
  code_DESC
  unitPrice_ASC
  unitPrice_DESC
  requirements_ASC
  requirements_DESC
}

type DiscountPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  description: String!
  code: String
  unitPrice: Float!
  requirements: String!
}

type DiscountRequest implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  discount: Discount!
  user: User!
  applied: Boolean!
  approved: Boolean!
  documentation: [String!]!
}

"""A connection to a list of items."""
type DiscountRequestConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [DiscountRequestEdge]!
  aggregate: AggregateDiscountRequest!
}

input DiscountRequestCreatedocumentationInput {
  set: [String!]
}

input DiscountRequestCreateInput {
  id: ID
  applied: Boolean
  approved: Boolean
  documentation: DiscountRequestCreatedocumentationInput
  discount: DiscountCreateOneWithoutDiscountRequestsInput!
  user: UserCreateOneWithoutDiscountRequestsInput!
}

input DiscountRequestCreateManyWithoutDiscountInput {
  create: [DiscountRequestCreateWithoutDiscountInput!]
  connect: [DiscountRequestWhereUniqueInput!]
}

input DiscountRequestCreateManyWithoutUserInput {
  create: [DiscountRequestCreateWithoutUserInput!]
  connect: [DiscountRequestWhereUniqueInput!]
}

input DiscountRequestCreateWithoutDiscountInput {
  id: ID
  applied: Boolean
  approved: Boolean
  documentation: DiscountRequestCreatedocumentationInput
  user: UserCreateOneWithoutDiscountRequestsInput!
}

input DiscountRequestCreateWithoutUserInput {
  id: ID
  applied: Boolean
  approved: Boolean
  documentation: DiscountRequestCreatedocumentationInput
  discount: DiscountCreateOneWithoutDiscountRequestsInput!
}

"""An edge in a connection."""
type DiscountRequestEdge {
  """The item at the end of the edge."""
  node: DiscountRequest!

  """A cursor for use in pagination."""
  cursor: String!
}

enum DiscountRequestOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  applied_ASC
  applied_DESC
  approved_ASC
  approved_DESC
}

type DiscountRequestPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  applied: Boolean!
  approved: Boolean!
  documentation: [String!]!
}

input DiscountRequestScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [DiscountRequestScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [DiscountRequestScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DiscountRequestScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  applied: Boolean

  """All values that are not equal to given value."""
  applied_not: Boolean
  approved: Boolean

  """All values that are not equal to given value."""
  approved_not: Boolean
}

type DiscountRequestSubscriptionPayload {
  mutation: MutationType!
  node: DiscountRequest
  updatedFields: [String!]
  previousValues: DiscountRequestPreviousValues
}

input DiscountRequestSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [DiscountRequestSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [DiscountRequestSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DiscountRequestSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: DiscountRequestWhereInput
}

input DiscountRequestUpdatedocumentationInput {
  set: [String!]
}

input DiscountRequestUpdateInput {
  applied: Boolean
  approved: Boolean
  documentation: DiscountRequestUpdatedocumentationInput
  discount: DiscountUpdateOneRequiredWithoutDiscountRequestsInput
  user: UserUpdateOneRequiredWithoutDiscountRequestsInput
}

input DiscountRequestUpdateManyDataInput {
  applied: Boolean
  approved: Boolean
  documentation: DiscountRequestUpdatedocumentationInput
}

input DiscountRequestUpdateManyMutationInput {
  applied: Boolean
  approved: Boolean
  documentation: DiscountRequestUpdatedocumentationInput
}

input DiscountRequestUpdateManyWithoutDiscountInput {
  create: [DiscountRequestCreateWithoutDiscountInput!]
  connect: [DiscountRequestWhereUniqueInput!]
  set: [DiscountRequestWhereUniqueInput!]
  disconnect: [DiscountRequestWhereUniqueInput!]
  delete: [DiscountRequestWhereUniqueInput!]
  update: [DiscountRequestUpdateWithWhereUniqueWithoutDiscountInput!]
  updateMany: [DiscountRequestUpdateManyWithWhereNestedInput!]
  deleteMany: [DiscountRequestScalarWhereInput!]
  upsert: [DiscountRequestUpsertWithWhereUniqueWithoutDiscountInput!]
}

input DiscountRequestUpdateManyWithoutUserInput {
  create: [DiscountRequestCreateWithoutUserInput!]
  connect: [DiscountRequestWhereUniqueInput!]
  set: [DiscountRequestWhereUniqueInput!]
  disconnect: [DiscountRequestWhereUniqueInput!]
  delete: [DiscountRequestWhereUniqueInput!]
  update: [DiscountRequestUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [DiscountRequestUpdateManyWithWhereNestedInput!]
  deleteMany: [DiscountRequestScalarWhereInput!]
  upsert: [DiscountRequestUpsertWithWhereUniqueWithoutUserInput!]
}

input DiscountRequestUpdateManyWithWhereNestedInput {
  where: DiscountRequestScalarWhereInput!
  data: DiscountRequestUpdateManyDataInput!
}

input DiscountRequestUpdateWithoutDiscountDataInput {
  applied: Boolean
  approved: Boolean
  documentation: DiscountRequestUpdatedocumentationInput
  user: UserUpdateOneRequiredWithoutDiscountRequestsInput
}

input DiscountRequestUpdateWithoutUserDataInput {
  applied: Boolean
  approved: Boolean
  documentation: DiscountRequestUpdatedocumentationInput
  discount: DiscountUpdateOneRequiredWithoutDiscountRequestsInput
}

input DiscountRequestUpdateWithWhereUniqueWithoutDiscountInput {
  where: DiscountRequestWhereUniqueInput!
  data: DiscountRequestUpdateWithoutDiscountDataInput!
}

input DiscountRequestUpdateWithWhereUniqueWithoutUserInput {
  where: DiscountRequestWhereUniqueInput!
  data: DiscountRequestUpdateWithoutUserDataInput!
}

input DiscountRequestUpsertWithWhereUniqueWithoutDiscountInput {
  where: DiscountRequestWhereUniqueInput!
  update: DiscountRequestUpdateWithoutDiscountDataInput!
  create: DiscountRequestCreateWithoutDiscountInput!
}

input DiscountRequestUpsertWithWhereUniqueWithoutUserInput {
  where: DiscountRequestWhereUniqueInput!
  update: DiscountRequestUpdateWithoutUserDataInput!
  create: DiscountRequestCreateWithoutUserInput!
}

input DiscountRequestWhereInput {
  """Logical AND on all given filters."""
  AND: [DiscountRequestWhereInput!]

  """Logical OR on all given filters."""
  OR: [DiscountRequestWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DiscountRequestWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  applied: Boolean

  """All values that are not equal to given value."""
  applied_not: Boolean
  approved: Boolean

  """All values that are not equal to given value."""
  approved_not: Boolean
  discount: DiscountWhereInput
  user: UserWhereInput
}

input DiscountRequestWhereUniqueInput {
  id: ID
}

input DiscountScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [DiscountScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [DiscountScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DiscountScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  code: String

  """All values that are not equal to given value."""
  code_not: String

  """All values that are contained in given list."""
  code_in: [String!]

  """All values that are not contained in given list."""
  code_not_in: [String!]

  """All values less than the given value."""
  code_lt: String

  """All values less than or equal the given value."""
  code_lte: String

  """All values greater than the given value."""
  code_gt: String

  """All values greater than or equal the given value."""
  code_gte: String

  """All values containing the given string."""
  code_contains: String

  """All values not containing the given string."""
  code_not_contains: String

  """All values starting with the given string."""
  code_starts_with: String

  """All values not starting with the given string."""
  code_not_starts_with: String

  """All values ending with the given string."""
  code_ends_with: String

  """All values not ending with the given string."""
  code_not_ends_with: String
  unitPrice: Float

  """All values that are not equal to given value."""
  unitPrice_not: Float

  """All values that are contained in given list."""
  unitPrice_in: [Float!]

  """All values that are not contained in given list."""
  unitPrice_not_in: [Float!]

  """All values less than the given value."""
  unitPrice_lt: Float

  """All values less than or equal the given value."""
  unitPrice_lte: Float

  """All values greater than the given value."""
  unitPrice_gt: Float

  """All values greater than or equal the given value."""
  unitPrice_gte: Float
  requirements: String

  """All values that are not equal to given value."""
  requirements_not: String

  """All values that are contained in given list."""
  requirements_in: [String!]

  """All values that are not contained in given list."""
  requirements_not_in: [String!]

  """All values less than the given value."""
  requirements_lt: String

  """All values less than or equal the given value."""
  requirements_lte: String

  """All values greater than the given value."""
  requirements_gt: String

  """All values greater than or equal the given value."""
  requirements_gte: String

  """All values containing the given string."""
  requirements_contains: String

  """All values not containing the given string."""
  requirements_not_contains: String

  """All values starting with the given string."""
  requirements_starts_with: String

  """All values not starting with the given string."""
  requirements_not_starts_with: String

  """All values ending with the given string."""
  requirements_ends_with: String

  """All values not ending with the given string."""
  requirements_not_ends_with: String
}

type DiscountSubscriptionPayload {
  mutation: MutationType!
  node: Discount
  updatedFields: [String!]
  previousValues: DiscountPreviousValues
}

input DiscountSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [DiscountSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [DiscountSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DiscountSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: DiscountWhereInput
}

input DiscountUpdateDataInput {
  name: String
  description: String
  code: String
  unitPrice: Float
  requirements: String
  product: ProductUpdateOneRequiredWithoutDiscountsInput
  discountRequests: DiscountRequestUpdateManyWithoutDiscountInput
}

input DiscountUpdateInput {
  name: String
  description: String
  code: String
  unitPrice: Float
  requirements: String
  product: ProductUpdateOneRequiredWithoutDiscountsInput
  discountRequests: DiscountRequestUpdateManyWithoutDiscountInput
}

input DiscountUpdateManyDataInput {
  name: String
  description: String
  code: String
  unitPrice: Float
  requirements: String
}

input DiscountUpdateManyMutationInput {
  name: String
  description: String
  code: String
  unitPrice: Float
  requirements: String
}

input DiscountUpdateManyWithoutProductInput {
  create: [DiscountCreateWithoutProductInput!]
  connect: [DiscountWhereUniqueInput!]
  set: [DiscountWhereUniqueInput!]
  disconnect: [DiscountWhereUniqueInput!]
  delete: [DiscountWhereUniqueInput!]
  update: [DiscountUpdateWithWhereUniqueWithoutProductInput!]
  updateMany: [DiscountUpdateManyWithWhereNestedInput!]
  deleteMany: [DiscountScalarWhereInput!]
  upsert: [DiscountUpsertWithWhereUniqueWithoutProductInput!]
}

input DiscountUpdateManyWithWhereNestedInput {
  where: DiscountScalarWhereInput!
  data: DiscountUpdateManyDataInput!
}

input DiscountUpdateOneInput {
  create: DiscountCreateInput
  connect: DiscountWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: DiscountUpdateDataInput
  upsert: DiscountUpsertNestedInput
}

input DiscountUpdateOneRequiredWithoutDiscountRequestsInput {
  create: DiscountCreateWithoutDiscountRequestsInput
  connect: DiscountWhereUniqueInput
  update: DiscountUpdateWithoutDiscountRequestsDataInput
  upsert: DiscountUpsertWithoutDiscountRequestsInput
}

input DiscountUpdateWithoutDiscountRequestsDataInput {
  name: String
  description: String
  code: String
  unitPrice: Float
  requirements: String
  product: ProductUpdateOneRequiredWithoutDiscountsInput
}

input DiscountUpdateWithoutProductDataInput {
  name: String
  description: String
  code: String
  unitPrice: Float
  requirements: String
  discountRequests: DiscountRequestUpdateManyWithoutDiscountInput
}

input DiscountUpdateWithWhereUniqueWithoutProductInput {
  where: DiscountWhereUniqueInput!
  data: DiscountUpdateWithoutProductDataInput!
}

input DiscountUpsertNestedInput {
  update: DiscountUpdateDataInput!
  create: DiscountCreateInput!
}

input DiscountUpsertWithoutDiscountRequestsInput {
  update: DiscountUpdateWithoutDiscountRequestsDataInput!
  create: DiscountCreateWithoutDiscountRequestsInput!
}

input DiscountUpsertWithWhereUniqueWithoutProductInput {
  where: DiscountWhereUniqueInput!
  update: DiscountUpdateWithoutProductDataInput!
  create: DiscountCreateWithoutProductInput!
}

input DiscountWhereInput {
  """Logical AND on all given filters."""
  AND: [DiscountWhereInput!]

  """Logical OR on all given filters."""
  OR: [DiscountWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DiscountWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  code: String

  """All values that are not equal to given value."""
  code_not: String

  """All values that are contained in given list."""
  code_in: [String!]

  """All values that are not contained in given list."""
  code_not_in: [String!]

  """All values less than the given value."""
  code_lt: String

  """All values less than or equal the given value."""
  code_lte: String

  """All values greater than the given value."""
  code_gt: String

  """All values greater than or equal the given value."""
  code_gte: String

  """All values containing the given string."""
  code_contains: String

  """All values not containing the given string."""
  code_not_contains: String

  """All values starting with the given string."""
  code_starts_with: String

  """All values not starting with the given string."""
  code_not_starts_with: String

  """All values ending with the given string."""
  code_ends_with: String

  """All values not ending with the given string."""
  code_not_ends_with: String
  unitPrice: Float

  """All values that are not equal to given value."""
  unitPrice_not: Float

  """All values that are contained in given list."""
  unitPrice_in: [Float!]

  """All values that are not contained in given list."""
  unitPrice_not_in: [Float!]

  """All values less than the given value."""
  unitPrice_lt: Float

  """All values less than or equal the given value."""
  unitPrice_lte: Float

  """All values greater than the given value."""
  unitPrice_gt: Float

  """All values greater than or equal the given value."""
  unitPrice_gte: Float
  requirements: String

  """All values that are not equal to given value."""
  requirements_not: String

  """All values that are contained in given list."""
  requirements_in: [String!]

  """All values that are not contained in given list."""
  requirements_not_in: [String!]

  """All values less than the given value."""
  requirements_lt: String

  """All values less than or equal the given value."""
  requirements_lte: String

  """All values greater than the given value."""
  requirements_gt: String

  """All values greater than or equal the given value."""
  requirements_gte: String

  """All values containing the given string."""
  requirements_contains: String

  """All values not containing the given string."""
  requirements_not_contains: String

  """All values starting with the given string."""
  requirements_starts_with: String

  """All values not starting with the given string."""
  requirements_not_starts_with: String

  """All values ending with the given string."""
  requirements_ends_with: String

  """All values not ending with the given string."""
  requirements_not_ends_with: String
  product: ProductWhereInput
  discountRequests_every: DiscountRequestWhereInput
  discountRequests_some: DiscountRequestWhereInput
  discountRequests_none: DiscountRequestWhereInput
}

input DiscountWhereUniqueInput {
  id: ID
}

type Event implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  author: User!
  title: String!
  subtitle: String
  organizer: String
  body: String!
  imageURL: String
  date: DateTime!
  access: String
  accessPoint: String
  target: UserGroup!
  status: AppNodeStatus!
  place: Space!
}

"""A connection to a list of items."""
type EventConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [EventEdge]!
  aggregate: AggregateEvent!
}

input EventCreateInput {
  id: ID
  title: String!
  subtitle: String
  organizer: String
  body: String!
  imageURL: String
  date: DateTime!
  access: String
  accessPoint: String
  target: UserGroup!
  status: AppNodeStatus
  author: UserCreateOneWithoutEventsInput!
  place: SpaceCreateOneWithoutEventsInput!
}

input EventCreateManyWithoutAuthorInput {
  create: [EventCreateWithoutAuthorInput!]
  connect: [EventWhereUniqueInput!]
}

input EventCreateManyWithoutPlaceInput {
  create: [EventCreateWithoutPlaceInput!]
  connect: [EventWhereUniqueInput!]
}

input EventCreateWithoutAuthorInput {
  id: ID
  title: String!
  subtitle: String
  organizer: String
  body: String!
  imageURL: String
  date: DateTime!
  access: String
  accessPoint: String
  target: UserGroup!
  status: AppNodeStatus
  place: SpaceCreateOneWithoutEventsInput!
}

input EventCreateWithoutPlaceInput {
  id: ID
  title: String!
  subtitle: String
  organizer: String
  body: String!
  imageURL: String
  date: DateTime!
  access: String
  accessPoint: String
  target: UserGroup!
  status: AppNodeStatus
  author: UserCreateOneWithoutEventsInput!
}

"""An edge in a connection."""
type EventEdge {
  """The item at the end of the edge."""
  node: Event!

  """A cursor for use in pagination."""
  cursor: String!
}

enum EventOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  title_ASC
  title_DESC
  subtitle_ASC
  subtitle_DESC
  organizer_ASC
  organizer_DESC
  body_ASC
  body_DESC
  imageURL_ASC
  imageURL_DESC
  date_ASC
  date_DESC
  access_ASC
  access_DESC
  accessPoint_ASC
  accessPoint_DESC
  target_ASC
  target_DESC
  status_ASC
  status_DESC
}

type EventPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  subtitle: String
  organizer: String
  body: String!
  imageURL: String
  date: DateTime!
  access: String
  accessPoint: String
  target: UserGroup!
  status: AppNodeStatus!
}

input EventScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [EventScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [EventScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EventScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  subtitle: String

  """All values that are not equal to given value."""
  subtitle_not: String

  """All values that are contained in given list."""
  subtitle_in: [String!]

  """All values that are not contained in given list."""
  subtitle_not_in: [String!]

  """All values less than the given value."""
  subtitle_lt: String

  """All values less than or equal the given value."""
  subtitle_lte: String

  """All values greater than the given value."""
  subtitle_gt: String

  """All values greater than or equal the given value."""
  subtitle_gte: String

  """All values containing the given string."""
  subtitle_contains: String

  """All values not containing the given string."""
  subtitle_not_contains: String

  """All values starting with the given string."""
  subtitle_starts_with: String

  """All values not starting with the given string."""
  subtitle_not_starts_with: String

  """All values ending with the given string."""
  subtitle_ends_with: String

  """All values not ending with the given string."""
  subtitle_not_ends_with: String
  organizer: String

  """All values that are not equal to given value."""
  organizer_not: String

  """All values that are contained in given list."""
  organizer_in: [String!]

  """All values that are not contained in given list."""
  organizer_not_in: [String!]

  """All values less than the given value."""
  organizer_lt: String

  """All values less than or equal the given value."""
  organizer_lte: String

  """All values greater than the given value."""
  organizer_gt: String

  """All values greater than or equal the given value."""
  organizer_gte: String

  """All values containing the given string."""
  organizer_contains: String

  """All values not containing the given string."""
  organizer_not_contains: String

  """All values starting with the given string."""
  organizer_starts_with: String

  """All values not starting with the given string."""
  organizer_not_starts_with: String

  """All values ending with the given string."""
  organizer_ends_with: String

  """All values not ending with the given string."""
  organizer_not_ends_with: String
  body: String

  """All values that are not equal to given value."""
  body_not: String

  """All values that are contained in given list."""
  body_in: [String!]

  """All values that are not contained in given list."""
  body_not_in: [String!]

  """All values less than the given value."""
  body_lt: String

  """All values less than or equal the given value."""
  body_lte: String

  """All values greater than the given value."""
  body_gt: String

  """All values greater than or equal the given value."""
  body_gte: String

  """All values containing the given string."""
  body_contains: String

  """All values not containing the given string."""
  body_not_contains: String

  """All values starting with the given string."""
  body_starts_with: String

  """All values not starting with the given string."""
  body_not_starts_with: String

  """All values ending with the given string."""
  body_ends_with: String

  """All values not ending with the given string."""
  body_not_ends_with: String
  imageURL: String

  """All values that are not equal to given value."""
  imageURL_not: String

  """All values that are contained in given list."""
  imageURL_in: [String!]

  """All values that are not contained in given list."""
  imageURL_not_in: [String!]

  """All values less than the given value."""
  imageURL_lt: String

  """All values less than or equal the given value."""
  imageURL_lte: String

  """All values greater than the given value."""
  imageURL_gt: String

  """All values greater than or equal the given value."""
  imageURL_gte: String

  """All values containing the given string."""
  imageURL_contains: String

  """All values not containing the given string."""
  imageURL_not_contains: String

  """All values starting with the given string."""
  imageURL_starts_with: String

  """All values not starting with the given string."""
  imageURL_not_starts_with: String

  """All values ending with the given string."""
  imageURL_ends_with: String

  """All values not ending with the given string."""
  imageURL_not_ends_with: String
  date: DateTime

  """All values that are not equal to given value."""
  date_not: DateTime

  """All values that are contained in given list."""
  date_in: [DateTime!]

  """All values that are not contained in given list."""
  date_not_in: [DateTime!]

  """All values less than the given value."""
  date_lt: DateTime

  """All values less than or equal the given value."""
  date_lte: DateTime

  """All values greater than the given value."""
  date_gt: DateTime

  """All values greater than or equal the given value."""
  date_gte: DateTime
  access: String

  """All values that are not equal to given value."""
  access_not: String

  """All values that are contained in given list."""
  access_in: [String!]

  """All values that are not contained in given list."""
  access_not_in: [String!]

  """All values less than the given value."""
  access_lt: String

  """All values less than or equal the given value."""
  access_lte: String

  """All values greater than the given value."""
  access_gt: String

  """All values greater than or equal the given value."""
  access_gte: String

  """All values containing the given string."""
  access_contains: String

  """All values not containing the given string."""
  access_not_contains: String

  """All values starting with the given string."""
  access_starts_with: String

  """All values not starting with the given string."""
  access_not_starts_with: String

  """All values ending with the given string."""
  access_ends_with: String

  """All values not ending with the given string."""
  access_not_ends_with: String
  accessPoint: String

  """All values that are not equal to given value."""
  accessPoint_not: String

  """All values that are contained in given list."""
  accessPoint_in: [String!]

  """All values that are not contained in given list."""
  accessPoint_not_in: [String!]

  """All values less than the given value."""
  accessPoint_lt: String

  """All values less than or equal the given value."""
  accessPoint_lte: String

  """All values greater than the given value."""
  accessPoint_gt: String

  """All values greater than or equal the given value."""
  accessPoint_gte: String

  """All values containing the given string."""
  accessPoint_contains: String

  """All values not containing the given string."""
  accessPoint_not_contains: String

  """All values starting with the given string."""
  accessPoint_starts_with: String

  """All values not starting with the given string."""
  accessPoint_not_starts_with: String

  """All values ending with the given string."""
  accessPoint_ends_with: String

  """All values not ending with the given string."""
  accessPoint_not_ends_with: String
  target: UserGroup

  """All values that are not equal to given value."""
  target_not: UserGroup

  """All values that are contained in given list."""
  target_in: [UserGroup!]

  """All values that are not contained in given list."""
  target_not_in: [UserGroup!]
  status: AppNodeStatus

  """All values that are not equal to given value."""
  status_not: AppNodeStatus

  """All values that are contained in given list."""
  status_in: [AppNodeStatus!]

  """All values that are not contained in given list."""
  status_not_in: [AppNodeStatus!]
}

type EventSubscriptionPayload {
  mutation: MutationType!
  node: Event
  updatedFields: [String!]
  previousValues: EventPreviousValues
}

input EventSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [EventSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [EventSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EventSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: EventWhereInput
}

input EventUpdateInput {
  title: String
  subtitle: String
  organizer: String
  body: String
  imageURL: String
  date: DateTime
  access: String
  accessPoint: String
  target: UserGroup
  status: AppNodeStatus
  author: UserUpdateOneRequiredWithoutEventsInput
  place: SpaceUpdateOneRequiredWithoutEventsInput
}

input EventUpdateManyDataInput {
  title: String
  subtitle: String
  organizer: String
  body: String
  imageURL: String
  date: DateTime
  access: String
  accessPoint: String
  target: UserGroup
  status: AppNodeStatus
}

input EventUpdateManyMutationInput {
  title: String
  subtitle: String
  organizer: String
  body: String
  imageURL: String
  date: DateTime
  access: String
  accessPoint: String
  target: UserGroup
  status: AppNodeStatus
}

input EventUpdateManyWithoutAuthorInput {
  create: [EventCreateWithoutAuthorInput!]
  connect: [EventWhereUniqueInput!]
  set: [EventWhereUniqueInput!]
  disconnect: [EventWhereUniqueInput!]
  delete: [EventWhereUniqueInput!]
  update: [EventUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [EventUpdateManyWithWhereNestedInput!]
  deleteMany: [EventScalarWhereInput!]
  upsert: [EventUpsertWithWhereUniqueWithoutAuthorInput!]
}

input EventUpdateManyWithoutPlaceInput {
  create: [EventCreateWithoutPlaceInput!]
  connect: [EventWhereUniqueInput!]
  set: [EventWhereUniqueInput!]
  disconnect: [EventWhereUniqueInput!]
  delete: [EventWhereUniqueInput!]
  update: [EventUpdateWithWhereUniqueWithoutPlaceInput!]
  updateMany: [EventUpdateManyWithWhereNestedInput!]
  deleteMany: [EventScalarWhereInput!]
  upsert: [EventUpsertWithWhereUniqueWithoutPlaceInput!]
}

input EventUpdateManyWithWhereNestedInput {
  where: EventScalarWhereInput!
  data: EventUpdateManyDataInput!
}

input EventUpdateWithoutAuthorDataInput {
  title: String
  subtitle: String
  organizer: String
  body: String
  imageURL: String
  date: DateTime
  access: String
  accessPoint: String
  target: UserGroup
  status: AppNodeStatus
  place: SpaceUpdateOneRequiredWithoutEventsInput
}

input EventUpdateWithoutPlaceDataInput {
  title: String
  subtitle: String
  organizer: String
  body: String
  imageURL: String
  date: DateTime
  access: String
  accessPoint: String
  target: UserGroup
  status: AppNodeStatus
  author: UserUpdateOneRequiredWithoutEventsInput
}

input EventUpdateWithWhereUniqueWithoutAuthorInput {
  where: EventWhereUniqueInput!
  data: EventUpdateWithoutAuthorDataInput!
}

input EventUpdateWithWhereUniqueWithoutPlaceInput {
  where: EventWhereUniqueInput!
  data: EventUpdateWithoutPlaceDataInput!
}

input EventUpsertWithWhereUniqueWithoutAuthorInput {
  where: EventWhereUniqueInput!
  update: EventUpdateWithoutAuthorDataInput!
  create: EventCreateWithoutAuthorInput!
}

input EventUpsertWithWhereUniqueWithoutPlaceInput {
  where: EventWhereUniqueInput!
  update: EventUpdateWithoutPlaceDataInput!
  create: EventCreateWithoutPlaceInput!
}

input EventWhereInput {
  """Logical AND on all given filters."""
  AND: [EventWhereInput!]

  """Logical OR on all given filters."""
  OR: [EventWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EventWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  subtitle: String

  """All values that are not equal to given value."""
  subtitle_not: String

  """All values that are contained in given list."""
  subtitle_in: [String!]

  """All values that are not contained in given list."""
  subtitle_not_in: [String!]

  """All values less than the given value."""
  subtitle_lt: String

  """All values less than or equal the given value."""
  subtitle_lte: String

  """All values greater than the given value."""
  subtitle_gt: String

  """All values greater than or equal the given value."""
  subtitle_gte: String

  """All values containing the given string."""
  subtitle_contains: String

  """All values not containing the given string."""
  subtitle_not_contains: String

  """All values starting with the given string."""
  subtitle_starts_with: String

  """All values not starting with the given string."""
  subtitle_not_starts_with: String

  """All values ending with the given string."""
  subtitle_ends_with: String

  """All values not ending with the given string."""
  subtitle_not_ends_with: String
  organizer: String

  """All values that are not equal to given value."""
  organizer_not: String

  """All values that are contained in given list."""
  organizer_in: [String!]

  """All values that are not contained in given list."""
  organizer_not_in: [String!]

  """All values less than the given value."""
  organizer_lt: String

  """All values less than or equal the given value."""
  organizer_lte: String

  """All values greater than the given value."""
  organizer_gt: String

  """All values greater than or equal the given value."""
  organizer_gte: String

  """All values containing the given string."""
  organizer_contains: String

  """All values not containing the given string."""
  organizer_not_contains: String

  """All values starting with the given string."""
  organizer_starts_with: String

  """All values not starting with the given string."""
  organizer_not_starts_with: String

  """All values ending with the given string."""
  organizer_ends_with: String

  """All values not ending with the given string."""
  organizer_not_ends_with: String
  body: String

  """All values that are not equal to given value."""
  body_not: String

  """All values that are contained in given list."""
  body_in: [String!]

  """All values that are not contained in given list."""
  body_not_in: [String!]

  """All values less than the given value."""
  body_lt: String

  """All values less than or equal the given value."""
  body_lte: String

  """All values greater than the given value."""
  body_gt: String

  """All values greater than or equal the given value."""
  body_gte: String

  """All values containing the given string."""
  body_contains: String

  """All values not containing the given string."""
  body_not_contains: String

  """All values starting with the given string."""
  body_starts_with: String

  """All values not starting with the given string."""
  body_not_starts_with: String

  """All values ending with the given string."""
  body_ends_with: String

  """All values not ending with the given string."""
  body_not_ends_with: String
  imageURL: String

  """All values that are not equal to given value."""
  imageURL_not: String

  """All values that are contained in given list."""
  imageURL_in: [String!]

  """All values that are not contained in given list."""
  imageURL_not_in: [String!]

  """All values less than the given value."""
  imageURL_lt: String

  """All values less than or equal the given value."""
  imageURL_lte: String

  """All values greater than the given value."""
  imageURL_gt: String

  """All values greater than or equal the given value."""
  imageURL_gte: String

  """All values containing the given string."""
  imageURL_contains: String

  """All values not containing the given string."""
  imageURL_not_contains: String

  """All values starting with the given string."""
  imageURL_starts_with: String

  """All values not starting with the given string."""
  imageURL_not_starts_with: String

  """All values ending with the given string."""
  imageURL_ends_with: String

  """All values not ending with the given string."""
  imageURL_not_ends_with: String
  date: DateTime

  """All values that are not equal to given value."""
  date_not: DateTime

  """All values that are contained in given list."""
  date_in: [DateTime!]

  """All values that are not contained in given list."""
  date_not_in: [DateTime!]

  """All values less than the given value."""
  date_lt: DateTime

  """All values less than or equal the given value."""
  date_lte: DateTime

  """All values greater than the given value."""
  date_gt: DateTime

  """All values greater than or equal the given value."""
  date_gte: DateTime
  access: String

  """All values that are not equal to given value."""
  access_not: String

  """All values that are contained in given list."""
  access_in: [String!]

  """All values that are not contained in given list."""
  access_not_in: [String!]

  """All values less than the given value."""
  access_lt: String

  """All values less than or equal the given value."""
  access_lte: String

  """All values greater than the given value."""
  access_gt: String

  """All values greater than or equal the given value."""
  access_gte: String

  """All values containing the given string."""
  access_contains: String

  """All values not containing the given string."""
  access_not_contains: String

  """All values starting with the given string."""
  access_starts_with: String

  """All values not starting with the given string."""
  access_not_starts_with: String

  """All values ending with the given string."""
  access_ends_with: String

  """All values not ending with the given string."""
  access_not_ends_with: String
  accessPoint: String

  """All values that are not equal to given value."""
  accessPoint_not: String

  """All values that are contained in given list."""
  accessPoint_in: [String!]

  """All values that are not contained in given list."""
  accessPoint_not_in: [String!]

  """All values less than the given value."""
  accessPoint_lt: String

  """All values less than or equal the given value."""
  accessPoint_lte: String

  """All values greater than the given value."""
  accessPoint_gt: String

  """All values greater than or equal the given value."""
  accessPoint_gte: String

  """All values containing the given string."""
  accessPoint_contains: String

  """All values not containing the given string."""
  accessPoint_not_contains: String

  """All values starting with the given string."""
  accessPoint_starts_with: String

  """All values not starting with the given string."""
  accessPoint_not_starts_with: String

  """All values ending with the given string."""
  accessPoint_ends_with: String

  """All values not ending with the given string."""
  accessPoint_not_ends_with: String
  target: UserGroup

  """All values that are not equal to given value."""
  target_not: UserGroup

  """All values that are contained in given list."""
  target_in: [UserGroup!]

  """All values that are not contained in given list."""
  target_not_in: [UserGroup!]
  status: AppNodeStatus

  """All values that are not equal to given value."""
  status_not: AppNodeStatus

  """All values that are contained in given list."""
  status_in: [AppNodeStatus!]

  """All values that are not contained in given list."""
  status_not_in: [AppNodeStatus!]
  author: UserWhereInput
  place: SpaceWhereInput
}

input EventWhereUniqueInput {
  id: ID
}

type Item implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  order: Order!
  product: Product!
  discount: Discount
  quantity: Int!
  orderPrice: Float!
}

"""A connection to a list of items."""
type ItemConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ItemEdge]!
  aggregate: AggregateItem!
}

input ItemCreateInput {
  id: ID
  quantity: Int!
  orderPrice: Float!
  order: OrderCreateOneWithoutItemsInput!
  product: ProductCreateOneWithoutOrdersInput!
  discount: DiscountCreateOneInput
}

input ItemCreateManyWithoutOrderInput {
  create: [ItemCreateWithoutOrderInput!]
  connect: [ItemWhereUniqueInput!]
}

input ItemCreateManyWithoutProductInput {
  create: [ItemCreateWithoutProductInput!]
  connect: [ItemWhereUniqueInput!]
}

input ItemCreateWithoutOrderInput {
  id: ID
  quantity: Int!
  orderPrice: Float!
  product: ProductCreateOneWithoutOrdersInput!
  discount: DiscountCreateOneInput
}

input ItemCreateWithoutProductInput {
  id: ID
  quantity: Int!
  orderPrice: Float!
  order: OrderCreateOneWithoutItemsInput!
  discount: DiscountCreateOneInput
}

"""An edge in a connection."""
type ItemEdge {
  """The item at the end of the edge."""
  node: Item!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ItemOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  quantity_ASC
  quantity_DESC
  orderPrice_ASC
  orderPrice_DESC
}

type ItemPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  quantity: Int!
  orderPrice: Float!
}

input ItemScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ItemScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ItemScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ItemScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  quantity: Int

  """All values that are not equal to given value."""
  quantity_not: Int

  """All values that are contained in given list."""
  quantity_in: [Int!]

  """All values that are not contained in given list."""
  quantity_not_in: [Int!]

  """All values less than the given value."""
  quantity_lt: Int

  """All values less than or equal the given value."""
  quantity_lte: Int

  """All values greater than the given value."""
  quantity_gt: Int

  """All values greater than or equal the given value."""
  quantity_gte: Int
  orderPrice: Float

  """All values that are not equal to given value."""
  orderPrice_not: Float

  """All values that are contained in given list."""
  orderPrice_in: [Float!]

  """All values that are not contained in given list."""
  orderPrice_not_in: [Float!]

  """All values less than the given value."""
  orderPrice_lt: Float

  """All values less than or equal the given value."""
  orderPrice_lte: Float

  """All values greater than the given value."""
  orderPrice_gt: Float

  """All values greater than or equal the given value."""
  orderPrice_gte: Float
}

type ItemSubscriptionPayload {
  mutation: MutationType!
  node: Item
  updatedFields: [String!]
  previousValues: ItemPreviousValues
}

input ItemSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ItemSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ItemSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ItemSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ItemWhereInput
}

input ItemUpdateInput {
  quantity: Int
  orderPrice: Float
  order: OrderUpdateOneRequiredWithoutItemsInput
  product: ProductUpdateOneRequiredWithoutOrdersInput
  discount: DiscountUpdateOneInput
}

input ItemUpdateManyDataInput {
  quantity: Int
  orderPrice: Float
}

input ItemUpdateManyMutationInput {
  quantity: Int
  orderPrice: Float
}

input ItemUpdateManyWithoutOrderInput {
  create: [ItemCreateWithoutOrderInput!]
  connect: [ItemWhereUniqueInput!]
  set: [ItemWhereUniqueInput!]
  disconnect: [ItemWhereUniqueInput!]
  delete: [ItemWhereUniqueInput!]
  update: [ItemUpdateWithWhereUniqueWithoutOrderInput!]
  updateMany: [ItemUpdateManyWithWhereNestedInput!]
  deleteMany: [ItemScalarWhereInput!]
  upsert: [ItemUpsertWithWhereUniqueWithoutOrderInput!]
}

input ItemUpdateManyWithoutProductInput {
  create: [ItemCreateWithoutProductInput!]
  connect: [ItemWhereUniqueInput!]
  set: [ItemWhereUniqueInput!]
  disconnect: [ItemWhereUniqueInput!]
  delete: [ItemWhereUniqueInput!]
  update: [ItemUpdateWithWhereUniqueWithoutProductInput!]
  updateMany: [ItemUpdateManyWithWhereNestedInput!]
  deleteMany: [ItemScalarWhereInput!]
  upsert: [ItemUpsertWithWhereUniqueWithoutProductInput!]
}

input ItemUpdateManyWithWhereNestedInput {
  where: ItemScalarWhereInput!
  data: ItemUpdateManyDataInput!
}

input ItemUpdateWithoutOrderDataInput {
  quantity: Int
  orderPrice: Float
  product: ProductUpdateOneRequiredWithoutOrdersInput
  discount: DiscountUpdateOneInput
}

input ItemUpdateWithoutProductDataInput {
  quantity: Int
  orderPrice: Float
  order: OrderUpdateOneRequiredWithoutItemsInput
  discount: DiscountUpdateOneInput
}

input ItemUpdateWithWhereUniqueWithoutOrderInput {
  where: ItemWhereUniqueInput!
  data: ItemUpdateWithoutOrderDataInput!
}

input ItemUpdateWithWhereUniqueWithoutProductInput {
  where: ItemWhereUniqueInput!
  data: ItemUpdateWithoutProductDataInput!
}

input ItemUpsertWithWhereUniqueWithoutOrderInput {
  where: ItemWhereUniqueInput!
  update: ItemUpdateWithoutOrderDataInput!
  create: ItemCreateWithoutOrderInput!
}

input ItemUpsertWithWhereUniqueWithoutProductInput {
  where: ItemWhereUniqueInput!
  update: ItemUpdateWithoutProductDataInput!
  create: ItemCreateWithoutProductInput!
}

input ItemWhereInput {
  """Logical AND on all given filters."""
  AND: [ItemWhereInput!]

  """Logical OR on all given filters."""
  OR: [ItemWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ItemWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  quantity: Int

  """All values that are not equal to given value."""
  quantity_not: Int

  """All values that are contained in given list."""
  quantity_in: [Int!]

  """All values that are not contained in given list."""
  quantity_not_in: [Int!]

  """All values less than the given value."""
  quantity_lt: Int

  """All values less than or equal the given value."""
  quantity_lte: Int

  """All values greater than the given value."""
  quantity_gt: Int

  """All values greater than or equal the given value."""
  quantity_gte: Int
  orderPrice: Float

  """All values that are not equal to given value."""
  orderPrice_not: Float

  """All values that are contained in given list."""
  orderPrice_in: [Float!]

  """All values that are not contained in given list."""
  orderPrice_not_in: [Float!]

  """All values less than the given value."""
  orderPrice_lt: Float

  """All values less than or equal the given value."""
  orderPrice_lte: Float

  """All values greater than the given value."""
  orderPrice_gt: Float

  """All values greater than or equal the given value."""
  orderPrice_gte: Float
  order: OrderWhereInput
  product: ProductWhereInput
  discount: DiscountWhereInput
}

input ItemWhereUniqueInput {
  id: ID
}

"""Raw JSON value"""
scalar Json

type Lesson implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  subjects(where: SubjectWhereInput, orderBy: SubjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Subject!]
  period: OperatingPeriod!
  sessions(where: SessionWhereInput, orderBy: SessionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Session!]
  manager: User!
  availableTeachers(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
}

"""A connection to a list of items."""
type LessonConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [LessonEdge]!
  aggregate: AggregateLesson!
}

input LessonCreateInput {
  id: ID
  name: String!
  subjects: SubjectCreateManyWithoutLessonInput
  period: OperatingPeriodCreateOneWithoutLessonsInput!
  sessions: SessionCreateManyWithoutLessonInput
  manager: UserCreateOneWithoutLessonsManagedInput!
  availableTeachers: UserCreateManyWithoutAvailableLessonsInput
}

input LessonCreateManyWithoutAvailableTeachersInput {
  create: [LessonCreateWithoutAvailableTeachersInput!]
  connect: [LessonWhereUniqueInput!]
}

input LessonCreateManyWithoutManagerInput {
  create: [LessonCreateWithoutManagerInput!]
  connect: [LessonWhereUniqueInput!]
}

input LessonCreateManyWithoutPeriodInput {
  create: [LessonCreateWithoutPeriodInput!]
  connect: [LessonWhereUniqueInput!]
}

input LessonCreateOneWithoutSessionsInput {
  create: LessonCreateWithoutSessionsInput
  connect: LessonWhereUniqueInput
}

input LessonCreateOneWithoutSubjectsInput {
  create: LessonCreateWithoutSubjectsInput
  connect: LessonWhereUniqueInput
}

input LessonCreateWithoutAvailableTeachersInput {
  id: ID
  name: String!
  subjects: SubjectCreateManyWithoutLessonInput
  period: OperatingPeriodCreateOneWithoutLessonsInput!
  sessions: SessionCreateManyWithoutLessonInput
  manager: UserCreateOneWithoutLessonsManagedInput!
}

input LessonCreateWithoutManagerInput {
  id: ID
  name: String!
  subjects: SubjectCreateManyWithoutLessonInput
  period: OperatingPeriodCreateOneWithoutLessonsInput!
  sessions: SessionCreateManyWithoutLessonInput
  availableTeachers: UserCreateManyWithoutAvailableLessonsInput
}

input LessonCreateWithoutPeriodInput {
  id: ID
  name: String!
  subjects: SubjectCreateManyWithoutLessonInput
  sessions: SessionCreateManyWithoutLessonInput
  manager: UserCreateOneWithoutLessonsManagedInput!
  availableTeachers: UserCreateManyWithoutAvailableLessonsInput
}

input LessonCreateWithoutSessionsInput {
  id: ID
  name: String!
  subjects: SubjectCreateManyWithoutLessonInput
  period: OperatingPeriodCreateOneWithoutLessonsInput!
  manager: UserCreateOneWithoutLessonsManagedInput!
  availableTeachers: UserCreateManyWithoutAvailableLessonsInput
}

input LessonCreateWithoutSubjectsInput {
  id: ID
  name: String!
  period: OperatingPeriodCreateOneWithoutLessonsInput!
  sessions: SessionCreateManyWithoutLessonInput
  manager: UserCreateOneWithoutLessonsManagedInput!
  availableTeachers: UserCreateManyWithoutAvailableLessonsInput
}

"""An edge in a connection."""
type LessonEdge {
  """The item at the end of the edge."""
  node: Lesson!

  """A cursor for use in pagination."""
  cursor: String!
}

enum LessonOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
}

type LessonPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
}

input LessonScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [LessonScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [LessonScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LessonScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
}

type LessonSubscriptionPayload {
  mutation: MutationType!
  node: Lesson
  updatedFields: [String!]
  previousValues: LessonPreviousValues
}

input LessonSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [LessonSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [LessonSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LessonSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: LessonWhereInput
}

input LessonUpdateInput {
  name: String
  subjects: SubjectUpdateManyWithoutLessonInput
  period: OperatingPeriodUpdateOneRequiredWithoutLessonsInput
  sessions: SessionUpdateManyWithoutLessonInput
  manager: UserUpdateOneRequiredWithoutLessonsManagedInput
  availableTeachers: UserUpdateManyWithoutAvailableLessonsInput
}

input LessonUpdateManyDataInput {
  name: String
}

input LessonUpdateManyMutationInput {
  name: String
}

input LessonUpdateManyWithoutAvailableTeachersInput {
  create: [LessonCreateWithoutAvailableTeachersInput!]
  connect: [LessonWhereUniqueInput!]
  set: [LessonWhereUniqueInput!]
  disconnect: [LessonWhereUniqueInput!]
  delete: [LessonWhereUniqueInput!]
  update: [LessonUpdateWithWhereUniqueWithoutAvailableTeachersInput!]
  updateMany: [LessonUpdateManyWithWhereNestedInput!]
  deleteMany: [LessonScalarWhereInput!]
  upsert: [LessonUpsertWithWhereUniqueWithoutAvailableTeachersInput!]
}

input LessonUpdateManyWithoutManagerInput {
  create: [LessonCreateWithoutManagerInput!]
  connect: [LessonWhereUniqueInput!]
  set: [LessonWhereUniqueInput!]
  disconnect: [LessonWhereUniqueInput!]
  delete: [LessonWhereUniqueInput!]
  update: [LessonUpdateWithWhereUniqueWithoutManagerInput!]
  updateMany: [LessonUpdateManyWithWhereNestedInput!]
  deleteMany: [LessonScalarWhereInput!]
  upsert: [LessonUpsertWithWhereUniqueWithoutManagerInput!]
}

input LessonUpdateManyWithoutPeriodInput {
  create: [LessonCreateWithoutPeriodInput!]
  connect: [LessonWhereUniqueInput!]
  set: [LessonWhereUniqueInput!]
  disconnect: [LessonWhereUniqueInput!]
  delete: [LessonWhereUniqueInput!]
  update: [LessonUpdateWithWhereUniqueWithoutPeriodInput!]
  updateMany: [LessonUpdateManyWithWhereNestedInput!]
  deleteMany: [LessonScalarWhereInput!]
  upsert: [LessonUpsertWithWhereUniqueWithoutPeriodInput!]
}

input LessonUpdateManyWithWhereNestedInput {
  where: LessonScalarWhereInput!
  data: LessonUpdateManyDataInput!
}

input LessonUpdateOneRequiredWithoutSessionsInput {
  create: LessonCreateWithoutSessionsInput
  connect: LessonWhereUniqueInput
  update: LessonUpdateWithoutSessionsDataInput
  upsert: LessonUpsertWithoutSessionsInput
}

input LessonUpdateOneWithoutSubjectsInput {
  create: LessonCreateWithoutSubjectsInput
  connect: LessonWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: LessonUpdateWithoutSubjectsDataInput
  upsert: LessonUpsertWithoutSubjectsInput
}

input LessonUpdateWithoutAvailableTeachersDataInput {
  name: String
  subjects: SubjectUpdateManyWithoutLessonInput
  period: OperatingPeriodUpdateOneRequiredWithoutLessonsInput
  sessions: SessionUpdateManyWithoutLessonInput
  manager: UserUpdateOneRequiredWithoutLessonsManagedInput
}

input LessonUpdateWithoutManagerDataInput {
  name: String
  subjects: SubjectUpdateManyWithoutLessonInput
  period: OperatingPeriodUpdateOneRequiredWithoutLessonsInput
  sessions: SessionUpdateManyWithoutLessonInput
  availableTeachers: UserUpdateManyWithoutAvailableLessonsInput
}

input LessonUpdateWithoutPeriodDataInput {
  name: String
  subjects: SubjectUpdateManyWithoutLessonInput
  sessions: SessionUpdateManyWithoutLessonInput
  manager: UserUpdateOneRequiredWithoutLessonsManagedInput
  availableTeachers: UserUpdateManyWithoutAvailableLessonsInput
}

input LessonUpdateWithoutSessionsDataInput {
  name: String
  subjects: SubjectUpdateManyWithoutLessonInput
  period: OperatingPeriodUpdateOneRequiredWithoutLessonsInput
  manager: UserUpdateOneRequiredWithoutLessonsManagedInput
  availableTeachers: UserUpdateManyWithoutAvailableLessonsInput
}

input LessonUpdateWithoutSubjectsDataInput {
  name: String
  period: OperatingPeriodUpdateOneRequiredWithoutLessonsInput
  sessions: SessionUpdateManyWithoutLessonInput
  manager: UserUpdateOneRequiredWithoutLessonsManagedInput
  availableTeachers: UserUpdateManyWithoutAvailableLessonsInput
}

input LessonUpdateWithWhereUniqueWithoutAvailableTeachersInput {
  where: LessonWhereUniqueInput!
  data: LessonUpdateWithoutAvailableTeachersDataInput!
}

input LessonUpdateWithWhereUniqueWithoutManagerInput {
  where: LessonWhereUniqueInput!
  data: LessonUpdateWithoutManagerDataInput!
}

input LessonUpdateWithWhereUniqueWithoutPeriodInput {
  where: LessonWhereUniqueInput!
  data: LessonUpdateWithoutPeriodDataInput!
}

input LessonUpsertWithoutSessionsInput {
  update: LessonUpdateWithoutSessionsDataInput!
  create: LessonCreateWithoutSessionsInput!
}

input LessonUpsertWithoutSubjectsInput {
  update: LessonUpdateWithoutSubjectsDataInput!
  create: LessonCreateWithoutSubjectsInput!
}

input LessonUpsertWithWhereUniqueWithoutAvailableTeachersInput {
  where: LessonWhereUniqueInput!
  update: LessonUpdateWithoutAvailableTeachersDataInput!
  create: LessonCreateWithoutAvailableTeachersInput!
}

input LessonUpsertWithWhereUniqueWithoutManagerInput {
  where: LessonWhereUniqueInput!
  update: LessonUpdateWithoutManagerDataInput!
  create: LessonCreateWithoutManagerInput!
}

input LessonUpsertWithWhereUniqueWithoutPeriodInput {
  where: LessonWhereUniqueInput!
  update: LessonUpdateWithoutPeriodDataInput!
  create: LessonCreateWithoutPeriodInput!
}

input LessonWhereInput {
  """Logical AND on all given filters."""
  AND: [LessonWhereInput!]

  """Logical OR on all given filters."""
  OR: [LessonWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LessonWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  subjects_every: SubjectWhereInput
  subjects_some: SubjectWhereInput
  subjects_none: SubjectWhereInput
  period: OperatingPeriodWhereInput
  sessions_every: SessionWhereInput
  sessions_some: SessionWhereInput
  sessions_none: SessionWhereInput
  manager: UserWhereInput
  availableTeachers_every: UserWhereInput
  availableTeachers_some: UserWhereInput
  availableTeachers_none: UserWhereInput
}

input LessonWhereUniqueInput {
  id: ID
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createAdminRole(data: AdminRoleCreateInput!): AdminRole!
  createSocialLink(data: SocialLinkCreateInput!): SocialLink!
  createSocialNetwork(data: SocialNetworkCreateInput!): SocialNetwork!
  createOfficialDocument(data: OfficialDocumentCreateInput!): OfficialDocument!
  createAddress(data: AddressCreateInput!): Address!
  createDevice(data: DeviceCreateInput!): Device!
  createNews(data: NewsCreateInput!): News!
  createEvent(data: EventCreateInput!): Event!
  createVenue(data: VenueCreateInput!): Venue!
  createSpace(data: SpaceCreateInput!): Space!
  createDepartment(data: DepartmentCreateInput!): Department!
  createProgram(data: ProgramCreateInput!): Program!
  createBranch(data: BranchCreateInput!): Branch!
  createSubject(data: SubjectCreateInput!): Subject!
  createLesson(data: LessonCreateInput!): Lesson!
  createOperatingPeriod(data: OperatingPeriodCreateInput!): OperatingPeriod!
  createSession(data: SessionCreateInput!): Session!
  createProductCategory(data: ProductCategoryCreateInput!): ProductCategory!
  createProduct(data: ProductCreateInput!): Product!
  createDiscountRequest(data: DiscountRequestCreateInput!): DiscountRequest!
  createTransaction(data: TransactionCreateInput!): Transaction!
  createOrder(data: OrderCreateInput!): Order!
  createItem(data: ItemCreateInput!): Item!
  createUser(data: UserCreateInput!): User!
  createDiscount(data: DiscountCreateInput!): Discount!
  updateAdminRole(data: AdminRoleUpdateInput!, where: AdminRoleWhereUniqueInput!): AdminRole
  updateSocialLink(data: SocialLinkUpdateInput!, where: SocialLinkWhereUniqueInput!): SocialLink
  updateSocialNetwork(data: SocialNetworkUpdateInput!, where: SocialNetworkWhereUniqueInput!): SocialNetwork
  updateOfficialDocument(data: OfficialDocumentUpdateInput!, where: OfficialDocumentWhereUniqueInput!): OfficialDocument
  updateAddress(data: AddressUpdateInput!, where: AddressWhereUniqueInput!): Address
  updateDevice(data: DeviceUpdateInput!, where: DeviceWhereUniqueInput!): Device
  updateNews(data: NewsUpdateInput!, where: NewsWhereUniqueInput!): News
  updateEvent(data: EventUpdateInput!, where: EventWhereUniqueInput!): Event
  updateVenue(data: VenueUpdateInput!, where: VenueWhereUniqueInput!): Venue
  updateSpace(data: SpaceUpdateInput!, where: SpaceWhereUniqueInput!): Space
  updateDepartment(data: DepartmentUpdateInput!, where: DepartmentWhereUniqueInput!): Department
  updateProgram(data: ProgramUpdateInput!, where: ProgramWhereUniqueInput!): Program
  updateBranch(data: BranchUpdateInput!, where: BranchWhereUniqueInput!): Branch
  updateSubject(data: SubjectUpdateInput!, where: SubjectWhereUniqueInput!): Subject
  updateLesson(data: LessonUpdateInput!, where: LessonWhereUniqueInput!): Lesson
  updateOperatingPeriod(data: OperatingPeriodUpdateInput!, where: OperatingPeriodWhereUniqueInput!): OperatingPeriod
  updateSession(data: SessionUpdateInput!, where: SessionWhereUniqueInput!): Session
  updateProductCategory(data: ProductCategoryUpdateInput!, where: ProductCategoryWhereUniqueInput!): ProductCategory
  updateProduct(data: ProductUpdateInput!, where: ProductWhereUniqueInput!): Product
  updateDiscountRequest(data: DiscountRequestUpdateInput!, where: DiscountRequestWhereUniqueInput!): DiscountRequest
  updateTransaction(data: TransactionUpdateInput!, where: TransactionWhereUniqueInput!): Transaction
  updateOrder(data: OrderUpdateInput!, where: OrderWhereUniqueInput!): Order
  updateItem(data: ItemUpdateInput!, where: ItemWhereUniqueInput!): Item
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateDiscount(data: DiscountUpdateInput!, where: DiscountWhereUniqueInput!): Discount
  deleteAdminRole(where: AdminRoleWhereUniqueInput!): AdminRole
  deleteSocialLink(where: SocialLinkWhereUniqueInput!): SocialLink
  deleteSocialNetwork(where: SocialNetworkWhereUniqueInput!): SocialNetwork
  deleteOfficialDocument(where: OfficialDocumentWhereUniqueInput!): OfficialDocument
  deleteAddress(where: AddressWhereUniqueInput!): Address
  deleteDevice(where: DeviceWhereUniqueInput!): Device
  deleteNews(where: NewsWhereUniqueInput!): News
  deleteEvent(where: EventWhereUniqueInput!): Event
  deleteVenue(where: VenueWhereUniqueInput!): Venue
  deleteSpace(where: SpaceWhereUniqueInput!): Space
  deleteDepartment(where: DepartmentWhereUniqueInput!): Department
  deleteProgram(where: ProgramWhereUniqueInput!): Program
  deleteBranch(where: BranchWhereUniqueInput!): Branch
  deleteSubject(where: SubjectWhereUniqueInput!): Subject
  deleteLesson(where: LessonWhereUniqueInput!): Lesson
  deleteOperatingPeriod(where: OperatingPeriodWhereUniqueInput!): OperatingPeriod
  deleteSession(where: SessionWhereUniqueInput!): Session
  deleteProductCategory(where: ProductCategoryWhereUniqueInput!): ProductCategory
  deleteProduct(where: ProductWhereUniqueInput!): Product
  deleteDiscountRequest(where: DiscountRequestWhereUniqueInput!): DiscountRequest
  deleteTransaction(where: TransactionWhereUniqueInput!): Transaction
  deleteOrder(where: OrderWhereUniqueInput!): Order
  deleteItem(where: ItemWhereUniqueInput!): Item
  deleteUser(where: UserWhereUniqueInput!): User
  deleteDiscount(where: DiscountWhereUniqueInput!): Discount
  upsertAdminRole(where: AdminRoleWhereUniqueInput!, create: AdminRoleCreateInput!, update: AdminRoleUpdateInput!): AdminRole!
  upsertSocialLink(where: SocialLinkWhereUniqueInput!, create: SocialLinkCreateInput!, update: SocialLinkUpdateInput!): SocialLink!
  upsertSocialNetwork(where: SocialNetworkWhereUniqueInput!, create: SocialNetworkCreateInput!, update: SocialNetworkUpdateInput!): SocialNetwork!
  upsertOfficialDocument(where: OfficialDocumentWhereUniqueInput!, create: OfficialDocumentCreateInput!, update: OfficialDocumentUpdateInput!): OfficialDocument!
  upsertAddress(where: AddressWhereUniqueInput!, create: AddressCreateInput!, update: AddressUpdateInput!): Address!
  upsertDevice(where: DeviceWhereUniqueInput!, create: DeviceCreateInput!, update: DeviceUpdateInput!): Device!
  upsertNews(where: NewsWhereUniqueInput!, create: NewsCreateInput!, update: NewsUpdateInput!): News!
  upsertEvent(where: EventWhereUniqueInput!, create: EventCreateInput!, update: EventUpdateInput!): Event!
  upsertVenue(where: VenueWhereUniqueInput!, create: VenueCreateInput!, update: VenueUpdateInput!): Venue!
  upsertSpace(where: SpaceWhereUniqueInput!, create: SpaceCreateInput!, update: SpaceUpdateInput!): Space!
  upsertDepartment(where: DepartmentWhereUniqueInput!, create: DepartmentCreateInput!, update: DepartmentUpdateInput!): Department!
  upsertProgram(where: ProgramWhereUniqueInput!, create: ProgramCreateInput!, update: ProgramUpdateInput!): Program!
  upsertBranch(where: BranchWhereUniqueInput!, create: BranchCreateInput!, update: BranchUpdateInput!): Branch!
  upsertSubject(where: SubjectWhereUniqueInput!, create: SubjectCreateInput!, update: SubjectUpdateInput!): Subject!
  upsertLesson(where: LessonWhereUniqueInput!, create: LessonCreateInput!, update: LessonUpdateInput!): Lesson!
  upsertOperatingPeriod(where: OperatingPeriodWhereUniqueInput!, create: OperatingPeriodCreateInput!, update: OperatingPeriodUpdateInput!): OperatingPeriod!
  upsertSession(where: SessionWhereUniqueInput!, create: SessionCreateInput!, update: SessionUpdateInput!): Session!
  upsertProductCategory(where: ProductCategoryWhereUniqueInput!, create: ProductCategoryCreateInput!, update: ProductCategoryUpdateInput!): ProductCategory!
  upsertProduct(where: ProductWhereUniqueInput!, create: ProductCreateInput!, update: ProductUpdateInput!): Product!
  upsertDiscountRequest(where: DiscountRequestWhereUniqueInput!, create: DiscountRequestCreateInput!, update: DiscountRequestUpdateInput!): DiscountRequest!
  upsertTransaction(where: TransactionWhereUniqueInput!, create: TransactionCreateInput!, update: TransactionUpdateInput!): Transaction!
  upsertOrder(where: OrderWhereUniqueInput!, create: OrderCreateInput!, update: OrderUpdateInput!): Order!
  upsertItem(where: ItemWhereUniqueInput!, create: ItemCreateInput!, update: ItemUpdateInput!): Item!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertDiscount(where: DiscountWhereUniqueInput!, create: DiscountCreateInput!, update: DiscountUpdateInput!): Discount!
  updateManyAdminRoles(data: AdminRoleUpdateManyMutationInput!, where: AdminRoleWhereInput): BatchPayload!
  updateManySocialLinks(data: SocialLinkUpdateManyMutationInput!, where: SocialLinkWhereInput): BatchPayload!
  updateManySocialNetworks(data: SocialNetworkUpdateManyMutationInput!, where: SocialNetworkWhereInput): BatchPayload!
  updateManyOfficialDocuments(data: OfficialDocumentUpdateManyMutationInput!, where: OfficialDocumentWhereInput): BatchPayload!
  updateManyAddresses(data: AddressUpdateManyMutationInput!, where: AddressWhereInput): BatchPayload!
  updateManyDevices(data: DeviceUpdateManyMutationInput!, where: DeviceWhereInput): BatchPayload!
  updateManyNewses(data: NewsUpdateManyMutationInput!, where: NewsWhereInput): BatchPayload!
  updateManyEvents(data: EventUpdateManyMutationInput!, where: EventWhereInput): BatchPayload!
  updateManyVenues(data: VenueUpdateManyMutationInput!, where: VenueWhereInput): BatchPayload!
  updateManySpaces(data: SpaceUpdateManyMutationInput!, where: SpaceWhereInput): BatchPayload!
  updateManyDepartments(data: DepartmentUpdateManyMutationInput!, where: DepartmentWhereInput): BatchPayload!
  updateManyPrograms(data: ProgramUpdateManyMutationInput!, where: ProgramWhereInput): BatchPayload!
  updateManyBranches(data: BranchUpdateManyMutationInput!, where: BranchWhereInput): BatchPayload!
  updateManySubjects(data: SubjectUpdateManyMutationInput!, where: SubjectWhereInput): BatchPayload!
  updateManyLessons(data: LessonUpdateManyMutationInput!, where: LessonWhereInput): BatchPayload!
  updateManyOperatingPeriods(data: OperatingPeriodUpdateManyMutationInput!, where: OperatingPeriodWhereInput): BatchPayload!
  updateManySessions(data: SessionUpdateManyMutationInput!, where: SessionWhereInput): BatchPayload!
  updateManyProductCategories(data: ProductCategoryUpdateManyMutationInput!, where: ProductCategoryWhereInput): BatchPayload!
  updateManyProducts(data: ProductUpdateManyMutationInput!, where: ProductWhereInput): BatchPayload!
  updateManyDiscountRequests(data: DiscountRequestUpdateManyMutationInput!, where: DiscountRequestWhereInput): BatchPayload!
  updateManyTransactions(data: TransactionUpdateManyMutationInput!, where: TransactionWhereInput): BatchPayload!
  updateManyOrders(data: OrderUpdateManyMutationInput!, where: OrderWhereInput): BatchPayload!
  updateManyItems(data: ItemUpdateManyMutationInput!, where: ItemWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateManyDiscounts(data: DiscountUpdateManyMutationInput!, where: DiscountWhereInput): BatchPayload!
  deleteManyAdminRoles(where: AdminRoleWhereInput): BatchPayload!
  deleteManySocialLinks(where: SocialLinkWhereInput): BatchPayload!
  deleteManySocialNetworks(where: SocialNetworkWhereInput): BatchPayload!
  deleteManyOfficialDocuments(where: OfficialDocumentWhereInput): BatchPayload!
  deleteManyAddresses(where: AddressWhereInput): BatchPayload!
  deleteManyDevices(where: DeviceWhereInput): BatchPayload!
  deleteManyNewses(where: NewsWhereInput): BatchPayload!
  deleteManyEvents(where: EventWhereInput): BatchPayload!
  deleteManyVenues(where: VenueWhereInput): BatchPayload!
  deleteManySpaces(where: SpaceWhereInput): BatchPayload!
  deleteManyDepartments(where: DepartmentWhereInput): BatchPayload!
  deleteManyPrograms(where: ProgramWhereInput): BatchPayload!
  deleteManyBranches(where: BranchWhereInput): BatchPayload!
  deleteManySubjects(where: SubjectWhereInput): BatchPayload!
  deleteManyLessons(where: LessonWhereInput): BatchPayload!
  deleteManyOperatingPeriods(where: OperatingPeriodWhereInput): BatchPayload!
  deleteManySessions(where: SessionWhereInput): BatchPayload!
  deleteManyProductCategories(where: ProductCategoryWhereInput): BatchPayload!
  deleteManyProducts(where: ProductWhereInput): BatchPayload!
  deleteManyDiscountRequests(where: DiscountRequestWhereInput): BatchPayload!
  deleteManyTransactions(where: TransactionWhereInput): BatchPayload!
  deleteManyOrders(where: OrderWhereInput): BatchPayload!
  deleteManyItems(where: ItemWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyDiscounts(where: DiscountWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

type News implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  author: User!
  title: String!
  subtitle: String
  body: String!
  imageURL: String
  expiration: DateTime
  category: String
  featured: Boolean
  target: UserGroup!
  status: AppNodeStatus!
}

"""A connection to a list of items."""
type NewsConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [NewsEdge]!
  aggregate: AggregateNews!
}

input NewsCreateInput {
  id: ID
  title: String!
  subtitle: String
  body: String!
  imageURL: String
  expiration: DateTime
  category: String
  featured: Boolean
  target: UserGroup!
  status: AppNodeStatus
  author: UserCreateOneWithoutNewsesInput!
}

input NewsCreateManyWithoutAuthorInput {
  create: [NewsCreateWithoutAuthorInput!]
  connect: [NewsWhereUniqueInput!]
}

input NewsCreateWithoutAuthorInput {
  id: ID
  title: String!
  subtitle: String
  body: String!
  imageURL: String
  expiration: DateTime
  category: String
  featured: Boolean
  target: UserGroup!
  status: AppNodeStatus
}

"""An edge in a connection."""
type NewsEdge {
  """The item at the end of the edge."""
  node: News!

  """A cursor for use in pagination."""
  cursor: String!
}

enum NewsOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  title_ASC
  title_DESC
  subtitle_ASC
  subtitle_DESC
  body_ASC
  body_DESC
  imageURL_ASC
  imageURL_DESC
  expiration_ASC
  expiration_DESC
  category_ASC
  category_DESC
  featured_ASC
  featured_DESC
  target_ASC
  target_DESC
  status_ASC
  status_DESC
}

type NewsPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  subtitle: String
  body: String!
  imageURL: String
  expiration: DateTime
  category: String
  featured: Boolean
  target: UserGroup!
  status: AppNodeStatus!
}

input NewsScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [NewsScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [NewsScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [NewsScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  subtitle: String

  """All values that are not equal to given value."""
  subtitle_not: String

  """All values that are contained in given list."""
  subtitle_in: [String!]

  """All values that are not contained in given list."""
  subtitle_not_in: [String!]

  """All values less than the given value."""
  subtitle_lt: String

  """All values less than or equal the given value."""
  subtitle_lte: String

  """All values greater than the given value."""
  subtitle_gt: String

  """All values greater than or equal the given value."""
  subtitle_gte: String

  """All values containing the given string."""
  subtitle_contains: String

  """All values not containing the given string."""
  subtitle_not_contains: String

  """All values starting with the given string."""
  subtitle_starts_with: String

  """All values not starting with the given string."""
  subtitle_not_starts_with: String

  """All values ending with the given string."""
  subtitle_ends_with: String

  """All values not ending with the given string."""
  subtitle_not_ends_with: String
  body: String

  """All values that are not equal to given value."""
  body_not: String

  """All values that are contained in given list."""
  body_in: [String!]

  """All values that are not contained in given list."""
  body_not_in: [String!]

  """All values less than the given value."""
  body_lt: String

  """All values less than or equal the given value."""
  body_lte: String

  """All values greater than the given value."""
  body_gt: String

  """All values greater than or equal the given value."""
  body_gte: String

  """All values containing the given string."""
  body_contains: String

  """All values not containing the given string."""
  body_not_contains: String

  """All values starting with the given string."""
  body_starts_with: String

  """All values not starting with the given string."""
  body_not_starts_with: String

  """All values ending with the given string."""
  body_ends_with: String

  """All values not ending with the given string."""
  body_not_ends_with: String
  imageURL: String

  """All values that are not equal to given value."""
  imageURL_not: String

  """All values that are contained in given list."""
  imageURL_in: [String!]

  """All values that are not contained in given list."""
  imageURL_not_in: [String!]

  """All values less than the given value."""
  imageURL_lt: String

  """All values less than or equal the given value."""
  imageURL_lte: String

  """All values greater than the given value."""
  imageURL_gt: String

  """All values greater than or equal the given value."""
  imageURL_gte: String

  """All values containing the given string."""
  imageURL_contains: String

  """All values not containing the given string."""
  imageURL_not_contains: String

  """All values starting with the given string."""
  imageURL_starts_with: String

  """All values not starting with the given string."""
  imageURL_not_starts_with: String

  """All values ending with the given string."""
  imageURL_ends_with: String

  """All values not ending with the given string."""
  imageURL_not_ends_with: String
  expiration: DateTime

  """All values that are not equal to given value."""
  expiration_not: DateTime

  """All values that are contained in given list."""
  expiration_in: [DateTime!]

  """All values that are not contained in given list."""
  expiration_not_in: [DateTime!]

  """All values less than the given value."""
  expiration_lt: DateTime

  """All values less than or equal the given value."""
  expiration_lte: DateTime

  """All values greater than the given value."""
  expiration_gt: DateTime

  """All values greater than or equal the given value."""
  expiration_gte: DateTime
  category: String

  """All values that are not equal to given value."""
  category_not: String

  """All values that are contained in given list."""
  category_in: [String!]

  """All values that are not contained in given list."""
  category_not_in: [String!]

  """All values less than the given value."""
  category_lt: String

  """All values less than or equal the given value."""
  category_lte: String

  """All values greater than the given value."""
  category_gt: String

  """All values greater than or equal the given value."""
  category_gte: String

  """All values containing the given string."""
  category_contains: String

  """All values not containing the given string."""
  category_not_contains: String

  """All values starting with the given string."""
  category_starts_with: String

  """All values not starting with the given string."""
  category_not_starts_with: String

  """All values ending with the given string."""
  category_ends_with: String

  """All values not ending with the given string."""
  category_not_ends_with: String
  featured: Boolean

  """All values that are not equal to given value."""
  featured_not: Boolean
  target: UserGroup

  """All values that are not equal to given value."""
  target_not: UserGroup

  """All values that are contained in given list."""
  target_in: [UserGroup!]

  """All values that are not contained in given list."""
  target_not_in: [UserGroup!]
  status: AppNodeStatus

  """All values that are not equal to given value."""
  status_not: AppNodeStatus

  """All values that are contained in given list."""
  status_in: [AppNodeStatus!]

  """All values that are not contained in given list."""
  status_not_in: [AppNodeStatus!]
}

type NewsSubscriptionPayload {
  mutation: MutationType!
  node: News
  updatedFields: [String!]
  previousValues: NewsPreviousValues
}

input NewsSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [NewsSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [NewsSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [NewsSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: NewsWhereInput
}

input NewsUpdateInput {
  title: String
  subtitle: String
  body: String
  imageURL: String
  expiration: DateTime
  category: String
  featured: Boolean
  target: UserGroup
  status: AppNodeStatus
  author: UserUpdateOneRequiredWithoutNewsesInput
}

input NewsUpdateManyDataInput {
  title: String
  subtitle: String
  body: String
  imageURL: String
  expiration: DateTime
  category: String
  featured: Boolean
  target: UserGroup
  status: AppNodeStatus
}

input NewsUpdateManyMutationInput {
  title: String
  subtitle: String
  body: String
  imageURL: String
  expiration: DateTime
  category: String
  featured: Boolean
  target: UserGroup
  status: AppNodeStatus
}

input NewsUpdateManyWithoutAuthorInput {
  create: [NewsCreateWithoutAuthorInput!]
  connect: [NewsWhereUniqueInput!]
  set: [NewsWhereUniqueInput!]
  disconnect: [NewsWhereUniqueInput!]
  delete: [NewsWhereUniqueInput!]
  update: [NewsUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [NewsUpdateManyWithWhereNestedInput!]
  deleteMany: [NewsScalarWhereInput!]
  upsert: [NewsUpsertWithWhereUniqueWithoutAuthorInput!]
}

input NewsUpdateManyWithWhereNestedInput {
  where: NewsScalarWhereInput!
  data: NewsUpdateManyDataInput!
}

input NewsUpdateWithoutAuthorDataInput {
  title: String
  subtitle: String
  body: String
  imageURL: String
  expiration: DateTime
  category: String
  featured: Boolean
  target: UserGroup
  status: AppNodeStatus
}

input NewsUpdateWithWhereUniqueWithoutAuthorInput {
  where: NewsWhereUniqueInput!
  data: NewsUpdateWithoutAuthorDataInput!
}

input NewsUpsertWithWhereUniqueWithoutAuthorInput {
  where: NewsWhereUniqueInput!
  update: NewsUpdateWithoutAuthorDataInput!
  create: NewsCreateWithoutAuthorInput!
}

input NewsWhereInput {
  """Logical AND on all given filters."""
  AND: [NewsWhereInput!]

  """Logical OR on all given filters."""
  OR: [NewsWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [NewsWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  subtitle: String

  """All values that are not equal to given value."""
  subtitle_not: String

  """All values that are contained in given list."""
  subtitle_in: [String!]

  """All values that are not contained in given list."""
  subtitle_not_in: [String!]

  """All values less than the given value."""
  subtitle_lt: String

  """All values less than or equal the given value."""
  subtitle_lte: String

  """All values greater than the given value."""
  subtitle_gt: String

  """All values greater than or equal the given value."""
  subtitle_gte: String

  """All values containing the given string."""
  subtitle_contains: String

  """All values not containing the given string."""
  subtitle_not_contains: String

  """All values starting with the given string."""
  subtitle_starts_with: String

  """All values not starting with the given string."""
  subtitle_not_starts_with: String

  """All values ending with the given string."""
  subtitle_ends_with: String

  """All values not ending with the given string."""
  subtitle_not_ends_with: String
  body: String

  """All values that are not equal to given value."""
  body_not: String

  """All values that are contained in given list."""
  body_in: [String!]

  """All values that are not contained in given list."""
  body_not_in: [String!]

  """All values less than the given value."""
  body_lt: String

  """All values less than or equal the given value."""
  body_lte: String

  """All values greater than the given value."""
  body_gt: String

  """All values greater than or equal the given value."""
  body_gte: String

  """All values containing the given string."""
  body_contains: String

  """All values not containing the given string."""
  body_not_contains: String

  """All values starting with the given string."""
  body_starts_with: String

  """All values not starting with the given string."""
  body_not_starts_with: String

  """All values ending with the given string."""
  body_ends_with: String

  """All values not ending with the given string."""
  body_not_ends_with: String
  imageURL: String

  """All values that are not equal to given value."""
  imageURL_not: String

  """All values that are contained in given list."""
  imageURL_in: [String!]

  """All values that are not contained in given list."""
  imageURL_not_in: [String!]

  """All values less than the given value."""
  imageURL_lt: String

  """All values less than or equal the given value."""
  imageURL_lte: String

  """All values greater than the given value."""
  imageURL_gt: String

  """All values greater than or equal the given value."""
  imageURL_gte: String

  """All values containing the given string."""
  imageURL_contains: String

  """All values not containing the given string."""
  imageURL_not_contains: String

  """All values starting with the given string."""
  imageURL_starts_with: String

  """All values not starting with the given string."""
  imageURL_not_starts_with: String

  """All values ending with the given string."""
  imageURL_ends_with: String

  """All values not ending with the given string."""
  imageURL_not_ends_with: String
  expiration: DateTime

  """All values that are not equal to given value."""
  expiration_not: DateTime

  """All values that are contained in given list."""
  expiration_in: [DateTime!]

  """All values that are not contained in given list."""
  expiration_not_in: [DateTime!]

  """All values less than the given value."""
  expiration_lt: DateTime

  """All values less than or equal the given value."""
  expiration_lte: DateTime

  """All values greater than the given value."""
  expiration_gt: DateTime

  """All values greater than or equal the given value."""
  expiration_gte: DateTime
  category: String

  """All values that are not equal to given value."""
  category_not: String

  """All values that are contained in given list."""
  category_in: [String!]

  """All values that are not contained in given list."""
  category_not_in: [String!]

  """All values less than the given value."""
  category_lt: String

  """All values less than or equal the given value."""
  category_lte: String

  """All values greater than the given value."""
  category_gt: String

  """All values greater than or equal the given value."""
  category_gte: String

  """All values containing the given string."""
  category_contains: String

  """All values not containing the given string."""
  category_not_contains: String

  """All values starting with the given string."""
  category_starts_with: String

  """All values not starting with the given string."""
  category_not_starts_with: String

  """All values ending with the given string."""
  category_ends_with: String

  """All values not ending with the given string."""
  category_not_ends_with: String
  featured: Boolean

  """All values that are not equal to given value."""
  featured_not: Boolean
  target: UserGroup

  """All values that are not equal to given value."""
  target_not: UserGroup

  """All values that are contained in given list."""
  target_in: [UserGroup!]

  """All values that are not contained in given list."""
  target_not_in: [UserGroup!]
  status: AppNodeStatus

  """All values that are not equal to given value."""
  status_not: AppNodeStatus

  """All values that are contained in given list."""
  status_in: [AppNodeStatus!]

  """All values that are not contained in given list."""
  status_not_in: [AppNodeStatus!]
  author: UserWhereInput
}

input NewsWhereUniqueInput {
  id: ID
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

type OfficialDocument implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  number: String!
  type: OfficialDocumentType
  other: String
  expiration: DateTime
  owner: User!
}

"""A connection to a list of items."""
type OfficialDocumentConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [OfficialDocumentEdge]!
  aggregate: AggregateOfficialDocument!
}

input OfficialDocumentCreateInput {
  id: ID
  number: String!
  type: OfficialDocumentType
  other: String
  expiration: DateTime
  owner: UserCreateOneWithoutOfficialDocumentsInput!
}

input OfficialDocumentCreateManyWithoutOwnerInput {
  create: [OfficialDocumentCreateWithoutOwnerInput!]
  connect: [OfficialDocumentWhereUniqueInput!]
}

input OfficialDocumentCreateWithoutOwnerInput {
  id: ID
  number: String!
  type: OfficialDocumentType
  other: String
  expiration: DateTime
}

"""An edge in a connection."""
type OfficialDocumentEdge {
  """The item at the end of the edge."""
  node: OfficialDocument!

  """A cursor for use in pagination."""
  cursor: String!
}

enum OfficialDocumentOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  number_ASC
  number_DESC
  type_ASC
  type_DESC
  other_ASC
  other_DESC
  expiration_ASC
  expiration_DESC
}

type OfficialDocumentPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  number: String!
  type: OfficialDocumentType
  other: String
  expiration: DateTime
}

input OfficialDocumentScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [OfficialDocumentScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [OfficialDocumentScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [OfficialDocumentScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  number: String

  """All values that are not equal to given value."""
  number_not: String

  """All values that are contained in given list."""
  number_in: [String!]

  """All values that are not contained in given list."""
  number_not_in: [String!]

  """All values less than the given value."""
  number_lt: String

  """All values less than or equal the given value."""
  number_lte: String

  """All values greater than the given value."""
  number_gt: String

  """All values greater than or equal the given value."""
  number_gte: String

  """All values containing the given string."""
  number_contains: String

  """All values not containing the given string."""
  number_not_contains: String

  """All values starting with the given string."""
  number_starts_with: String

  """All values not starting with the given string."""
  number_not_starts_with: String

  """All values ending with the given string."""
  number_ends_with: String

  """All values not ending with the given string."""
  number_not_ends_with: String
  type: OfficialDocumentType

  """All values that are not equal to given value."""
  type_not: OfficialDocumentType

  """All values that are contained in given list."""
  type_in: [OfficialDocumentType!]

  """All values that are not contained in given list."""
  type_not_in: [OfficialDocumentType!]
  other: String

  """All values that are not equal to given value."""
  other_not: String

  """All values that are contained in given list."""
  other_in: [String!]

  """All values that are not contained in given list."""
  other_not_in: [String!]

  """All values less than the given value."""
  other_lt: String

  """All values less than or equal the given value."""
  other_lte: String

  """All values greater than the given value."""
  other_gt: String

  """All values greater than or equal the given value."""
  other_gte: String

  """All values containing the given string."""
  other_contains: String

  """All values not containing the given string."""
  other_not_contains: String

  """All values starting with the given string."""
  other_starts_with: String

  """All values not starting with the given string."""
  other_not_starts_with: String

  """All values ending with the given string."""
  other_ends_with: String

  """All values not ending with the given string."""
  other_not_ends_with: String
  expiration: DateTime

  """All values that are not equal to given value."""
  expiration_not: DateTime

  """All values that are contained in given list."""
  expiration_in: [DateTime!]

  """All values that are not contained in given list."""
  expiration_not_in: [DateTime!]

  """All values less than the given value."""
  expiration_lt: DateTime

  """All values less than or equal the given value."""
  expiration_lte: DateTime

  """All values greater than the given value."""
  expiration_gt: DateTime

  """All values greater than or equal the given value."""
  expiration_gte: DateTime
}

type OfficialDocumentSubscriptionPayload {
  mutation: MutationType!
  node: OfficialDocument
  updatedFields: [String!]
  previousValues: OfficialDocumentPreviousValues
}

input OfficialDocumentSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [OfficialDocumentSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [OfficialDocumentSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [OfficialDocumentSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: OfficialDocumentWhereInput
}

enum OfficialDocumentType {
  NATIONALID
  PASSPORT
  SOCIALSECURITY
  DRIVINGLICENSE
  OTHER
}

input OfficialDocumentUpdateInput {
  number: String
  type: OfficialDocumentType
  other: String
  expiration: DateTime
  owner: UserUpdateOneRequiredWithoutOfficialDocumentsInput
}

input OfficialDocumentUpdateManyDataInput {
  number: String
  type: OfficialDocumentType
  other: String
  expiration: DateTime
}

input OfficialDocumentUpdateManyMutationInput {
  number: String
  type: OfficialDocumentType
  other: String
  expiration: DateTime
}

input OfficialDocumentUpdateManyWithoutOwnerInput {
  create: [OfficialDocumentCreateWithoutOwnerInput!]
  connect: [OfficialDocumentWhereUniqueInput!]
  set: [OfficialDocumentWhereUniqueInput!]
  disconnect: [OfficialDocumentWhereUniqueInput!]
  delete: [OfficialDocumentWhereUniqueInput!]
  update: [OfficialDocumentUpdateWithWhereUniqueWithoutOwnerInput!]
  updateMany: [OfficialDocumentUpdateManyWithWhereNestedInput!]
  deleteMany: [OfficialDocumentScalarWhereInput!]
  upsert: [OfficialDocumentUpsertWithWhereUniqueWithoutOwnerInput!]
}

input OfficialDocumentUpdateManyWithWhereNestedInput {
  where: OfficialDocumentScalarWhereInput!
  data: OfficialDocumentUpdateManyDataInput!
}

input OfficialDocumentUpdateWithoutOwnerDataInput {
  number: String
  type: OfficialDocumentType
  other: String
  expiration: DateTime
}

input OfficialDocumentUpdateWithWhereUniqueWithoutOwnerInput {
  where: OfficialDocumentWhereUniqueInput!
  data: OfficialDocumentUpdateWithoutOwnerDataInput!
}

input OfficialDocumentUpsertWithWhereUniqueWithoutOwnerInput {
  where: OfficialDocumentWhereUniqueInput!
  update: OfficialDocumentUpdateWithoutOwnerDataInput!
  create: OfficialDocumentCreateWithoutOwnerInput!
}

input OfficialDocumentWhereInput {
  """Logical AND on all given filters."""
  AND: [OfficialDocumentWhereInput!]

  """Logical OR on all given filters."""
  OR: [OfficialDocumentWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [OfficialDocumentWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  number: String

  """All values that are not equal to given value."""
  number_not: String

  """All values that are contained in given list."""
  number_in: [String!]

  """All values that are not contained in given list."""
  number_not_in: [String!]

  """All values less than the given value."""
  number_lt: String

  """All values less than or equal the given value."""
  number_lte: String

  """All values greater than the given value."""
  number_gt: String

  """All values greater than or equal the given value."""
  number_gte: String

  """All values containing the given string."""
  number_contains: String

  """All values not containing the given string."""
  number_not_contains: String

  """All values starting with the given string."""
  number_starts_with: String

  """All values not starting with the given string."""
  number_not_starts_with: String

  """All values ending with the given string."""
  number_ends_with: String

  """All values not ending with the given string."""
  number_not_ends_with: String
  type: OfficialDocumentType

  """All values that are not equal to given value."""
  type_not: OfficialDocumentType

  """All values that are contained in given list."""
  type_in: [OfficialDocumentType!]

  """All values that are not contained in given list."""
  type_not_in: [OfficialDocumentType!]
  other: String

  """All values that are not equal to given value."""
  other_not: String

  """All values that are contained in given list."""
  other_in: [String!]

  """All values that are not contained in given list."""
  other_not_in: [String!]

  """All values less than the given value."""
  other_lt: String

  """All values less than or equal the given value."""
  other_lte: String

  """All values greater than the given value."""
  other_gt: String

  """All values greater than or equal the given value."""
  other_gte: String

  """All values containing the given string."""
  other_contains: String

  """All values not containing the given string."""
  other_not_contains: String

  """All values starting with the given string."""
  other_starts_with: String

  """All values not starting with the given string."""
  other_not_starts_with: String

  """All values ending with the given string."""
  other_ends_with: String

  """All values not ending with the given string."""
  other_not_ends_with: String
  expiration: DateTime

  """All values that are not equal to given value."""
  expiration_not: DateTime

  """All values that are contained in given list."""
  expiration_in: [DateTime!]

  """All values that are not contained in given list."""
  expiration_not_in: [DateTime!]

  """All values less than the given value."""
  expiration_lt: DateTime

  """All values less than or equal the given value."""
  expiration_lte: DateTime

  """All values greater than the given value."""
  expiration_gt: DateTime

  """All values greater than or equal the given value."""
  expiration_gte: DateTime
  owner: UserWhereInput
}

input OfficialDocumentWhereUniqueInput {
  id: ID
  number: String
}

type OperatingPeriod implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  yearStart: Int!
  yearEnd: Int!
  lessons(where: LessonWhereInput, orderBy: LessonOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Lesson!]
}

"""A connection to a list of items."""
type OperatingPeriodConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [OperatingPeriodEdge]!
  aggregate: AggregateOperatingPeriod!
}

input OperatingPeriodCreateInput {
  id: ID
  yearStart: Int!
  yearEnd: Int!
  lessons: LessonCreateManyWithoutPeriodInput
}

input OperatingPeriodCreateOneWithoutLessonsInput {
  create: OperatingPeriodCreateWithoutLessonsInput
  connect: OperatingPeriodWhereUniqueInput
}

input OperatingPeriodCreateWithoutLessonsInput {
  id: ID
  yearStart: Int!
  yearEnd: Int!
}

"""An edge in a connection."""
type OperatingPeriodEdge {
  """The item at the end of the edge."""
  node: OperatingPeriod!

  """A cursor for use in pagination."""
  cursor: String!
}

enum OperatingPeriodOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  yearStart_ASC
  yearStart_DESC
  yearEnd_ASC
  yearEnd_DESC
}

type OperatingPeriodPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  yearStart: Int!
  yearEnd: Int!
}

type OperatingPeriodSubscriptionPayload {
  mutation: MutationType!
  node: OperatingPeriod
  updatedFields: [String!]
  previousValues: OperatingPeriodPreviousValues
}

input OperatingPeriodSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [OperatingPeriodSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [OperatingPeriodSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [OperatingPeriodSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: OperatingPeriodWhereInput
}

input OperatingPeriodUpdateInput {
  yearStart: Int
  yearEnd: Int
  lessons: LessonUpdateManyWithoutPeriodInput
}

input OperatingPeriodUpdateManyMutationInput {
  yearStart: Int
  yearEnd: Int
}

input OperatingPeriodUpdateOneRequiredWithoutLessonsInput {
  create: OperatingPeriodCreateWithoutLessonsInput
  connect: OperatingPeriodWhereUniqueInput
  update: OperatingPeriodUpdateWithoutLessonsDataInput
  upsert: OperatingPeriodUpsertWithoutLessonsInput
}

input OperatingPeriodUpdateWithoutLessonsDataInput {
  yearStart: Int
  yearEnd: Int
}

input OperatingPeriodUpsertWithoutLessonsInput {
  update: OperatingPeriodUpdateWithoutLessonsDataInput!
  create: OperatingPeriodCreateWithoutLessonsInput!
}

input OperatingPeriodWhereInput {
  """Logical AND on all given filters."""
  AND: [OperatingPeriodWhereInput!]

  """Logical OR on all given filters."""
  OR: [OperatingPeriodWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [OperatingPeriodWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  yearStart: Int

  """All values that are not equal to given value."""
  yearStart_not: Int

  """All values that are contained in given list."""
  yearStart_in: [Int!]

  """All values that are not contained in given list."""
  yearStart_not_in: [Int!]

  """All values less than the given value."""
  yearStart_lt: Int

  """All values less than or equal the given value."""
  yearStart_lte: Int

  """All values greater than the given value."""
  yearStart_gt: Int

  """All values greater than or equal the given value."""
  yearStart_gte: Int
  yearEnd: Int

  """All values that are not equal to given value."""
  yearEnd_not: Int

  """All values that are contained in given list."""
  yearEnd_in: [Int!]

  """All values that are not contained in given list."""
  yearEnd_not_in: [Int!]

  """All values less than the given value."""
  yearEnd_lt: Int

  """All values less than or equal the given value."""
  yearEnd_lte: Int

  """All values greater than the given value."""
  yearEnd_gt: Int

  """All values greater than or equal the given value."""
  yearEnd_gte: Int
  lessons_every: LessonWhereInput
  lessons_some: LessonWhereInput
  lessons_none: LessonWhereInput
}

input OperatingPeriodWhereUniqueInput {
  id: ID
}

type Order implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  customer: User!
  items(where: ItemWhereInput, orderBy: ItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Item!]
  reference: String!
  metadata: Json
  paymentSettled: Boolean!
  paymentDue: DateTime
  transactions(where: TransactionWhereInput, orderBy: TransactionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Transaction!]
  vatRate: Int
  total: Float!
}

"""A connection to a list of items."""
type OrderConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [OrderEdge]!
  aggregate: AggregateOrder!
}

input OrderCreateInput {
  id: ID
  reference: String!
  metadata: Json
  paymentSettled: Boolean
  paymentDue: DateTime
  vatRate: Int
  total: Float!
  customer: UserCreateOneInput!
  items: ItemCreateManyWithoutOrderInput
  transactions: TransactionCreateManyWithoutOrderInput
}

input OrderCreateOneWithoutItemsInput {
  create: OrderCreateWithoutItemsInput
  connect: OrderWhereUniqueInput
}

input OrderCreateOneWithoutTransactionsInput {
  create: OrderCreateWithoutTransactionsInput
  connect: OrderWhereUniqueInput
}

input OrderCreateWithoutItemsInput {
  id: ID
  reference: String!
  metadata: Json
  paymentSettled: Boolean
  paymentDue: DateTime
  vatRate: Int
  total: Float!
  customer: UserCreateOneInput!
  transactions: TransactionCreateManyWithoutOrderInput
}

input OrderCreateWithoutTransactionsInput {
  id: ID
  reference: String!
  metadata: Json
  paymentSettled: Boolean
  paymentDue: DateTime
  vatRate: Int
  total: Float!
  customer: UserCreateOneInput!
  items: ItemCreateManyWithoutOrderInput
}

"""An edge in a connection."""
type OrderEdge {
  """The item at the end of the edge."""
  node: Order!

  """A cursor for use in pagination."""
  cursor: String!
}

enum OrderOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  reference_ASC
  reference_DESC
  metadata_ASC
  metadata_DESC
  paymentSettled_ASC
  paymentSettled_DESC
  paymentDue_ASC
  paymentDue_DESC
  vatRate_ASC
  vatRate_DESC
  total_ASC
  total_DESC
}

type OrderPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  reference: String!
  metadata: Json
  paymentSettled: Boolean!
  paymentDue: DateTime
  vatRate: Int
  total: Float!
}

type OrderSubscriptionPayload {
  mutation: MutationType!
  node: Order
  updatedFields: [String!]
  previousValues: OrderPreviousValues
}

input OrderSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [OrderSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [OrderSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [OrderSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: OrderWhereInput
}

input OrderUpdateInput {
  reference: String
  metadata: Json
  paymentSettled: Boolean
  paymentDue: DateTime
  vatRate: Int
  total: Float
  customer: UserUpdateOneRequiredInput
  items: ItemUpdateManyWithoutOrderInput
  transactions: TransactionUpdateManyWithoutOrderInput
}

input OrderUpdateManyMutationInput {
  reference: String
  metadata: Json
  paymentSettled: Boolean
  paymentDue: DateTime
  vatRate: Int
  total: Float
}

input OrderUpdateOneRequiredWithoutItemsInput {
  create: OrderCreateWithoutItemsInput
  connect: OrderWhereUniqueInput
  update: OrderUpdateWithoutItemsDataInput
  upsert: OrderUpsertWithoutItemsInput
}

input OrderUpdateOneWithoutTransactionsInput {
  create: OrderCreateWithoutTransactionsInput
  connect: OrderWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: OrderUpdateWithoutTransactionsDataInput
  upsert: OrderUpsertWithoutTransactionsInput
}

input OrderUpdateWithoutItemsDataInput {
  reference: String
  metadata: Json
  paymentSettled: Boolean
  paymentDue: DateTime
  vatRate: Int
  total: Float
  customer: UserUpdateOneRequiredInput
  transactions: TransactionUpdateManyWithoutOrderInput
}

input OrderUpdateWithoutTransactionsDataInput {
  reference: String
  metadata: Json
  paymentSettled: Boolean
  paymentDue: DateTime
  vatRate: Int
  total: Float
  customer: UserUpdateOneRequiredInput
  items: ItemUpdateManyWithoutOrderInput
}

input OrderUpsertWithoutItemsInput {
  update: OrderUpdateWithoutItemsDataInput!
  create: OrderCreateWithoutItemsInput!
}

input OrderUpsertWithoutTransactionsInput {
  update: OrderUpdateWithoutTransactionsDataInput!
  create: OrderCreateWithoutTransactionsInput!
}

input OrderWhereInput {
  """Logical AND on all given filters."""
  AND: [OrderWhereInput!]

  """Logical OR on all given filters."""
  OR: [OrderWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [OrderWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  reference: String

  """All values that are not equal to given value."""
  reference_not: String

  """All values that are contained in given list."""
  reference_in: [String!]

  """All values that are not contained in given list."""
  reference_not_in: [String!]

  """All values less than the given value."""
  reference_lt: String

  """All values less than or equal the given value."""
  reference_lte: String

  """All values greater than the given value."""
  reference_gt: String

  """All values greater than or equal the given value."""
  reference_gte: String

  """All values containing the given string."""
  reference_contains: String

  """All values not containing the given string."""
  reference_not_contains: String

  """All values starting with the given string."""
  reference_starts_with: String

  """All values not starting with the given string."""
  reference_not_starts_with: String

  """All values ending with the given string."""
  reference_ends_with: String

  """All values not ending with the given string."""
  reference_not_ends_with: String
  paymentSettled: Boolean

  """All values that are not equal to given value."""
  paymentSettled_not: Boolean
  paymentDue: DateTime

  """All values that are not equal to given value."""
  paymentDue_not: DateTime

  """All values that are contained in given list."""
  paymentDue_in: [DateTime!]

  """All values that are not contained in given list."""
  paymentDue_not_in: [DateTime!]

  """All values less than the given value."""
  paymentDue_lt: DateTime

  """All values less than or equal the given value."""
  paymentDue_lte: DateTime

  """All values greater than the given value."""
  paymentDue_gt: DateTime

  """All values greater than or equal the given value."""
  paymentDue_gte: DateTime
  vatRate: Int

  """All values that are not equal to given value."""
  vatRate_not: Int

  """All values that are contained in given list."""
  vatRate_in: [Int!]

  """All values that are not contained in given list."""
  vatRate_not_in: [Int!]

  """All values less than the given value."""
  vatRate_lt: Int

  """All values less than or equal the given value."""
  vatRate_lte: Int

  """All values greater than the given value."""
  vatRate_gt: Int

  """All values greater than or equal the given value."""
  vatRate_gte: Int
  total: Float

  """All values that are not equal to given value."""
  total_not: Float

  """All values that are contained in given list."""
  total_in: [Float!]

  """All values that are not contained in given list."""
  total_not_in: [Float!]

  """All values less than the given value."""
  total_lt: Float

  """All values less than or equal the given value."""
  total_lte: Float

  """All values greater than the given value."""
  total_gt: Float

  """All values greater than or equal the given value."""
  total_gte: Float
  customer: UserWhereInput
  items_every: ItemWhereInput
  items_some: ItemWhereInput
  items_none: ItemWhereInput
  transactions_every: TransactionWhereInput
  transactions_some: TransactionWhereInput
  transactions_none: TransactionWhereInput
}

input OrderWhereUniqueInput {
  id: ID
  reference: String
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Product implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  description: String!
  content: String
  unitPrice: Float!
  category: ProductCategory!
  imageURLs: [String!]!
  discounts(where: DiscountWhereInput, orderBy: DiscountOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Discount!]
  orders(where: ItemWhereInput, orderBy: ItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Item!]
}

type ProductCategory implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  products(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Product!]
}

"""A connection to a list of items."""
type ProductCategoryConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProductCategoryEdge]!
  aggregate: AggregateProductCategory!
}

input ProductCategoryCreateInput {
  id: ID
  name: String!
  products: ProductCreateManyWithoutCategoryInput
}

input ProductCategoryCreateOneWithoutProductsInput {
  create: ProductCategoryCreateWithoutProductsInput
  connect: ProductCategoryWhereUniqueInput
}

input ProductCategoryCreateWithoutProductsInput {
  id: ID
  name: String!
}

"""An edge in a connection."""
type ProductCategoryEdge {
  """The item at the end of the edge."""
  node: ProductCategory!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ProductCategoryOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
}

type ProductCategoryPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
}

type ProductCategorySubscriptionPayload {
  mutation: MutationType!
  node: ProductCategory
  updatedFields: [String!]
  previousValues: ProductCategoryPreviousValues
}

input ProductCategorySubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductCategorySubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProductCategorySubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProductCategorySubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ProductCategoryWhereInput
}

input ProductCategoryUpdateInput {
  name: String
  products: ProductUpdateManyWithoutCategoryInput
}

input ProductCategoryUpdateManyMutationInput {
  name: String
}

input ProductCategoryUpdateOneRequiredWithoutProductsInput {
  create: ProductCategoryCreateWithoutProductsInput
  connect: ProductCategoryWhereUniqueInput
  update: ProductCategoryUpdateWithoutProductsDataInput
  upsert: ProductCategoryUpsertWithoutProductsInput
}

input ProductCategoryUpdateWithoutProductsDataInput {
  name: String
}

input ProductCategoryUpsertWithoutProductsInput {
  update: ProductCategoryUpdateWithoutProductsDataInput!
  create: ProductCategoryCreateWithoutProductsInput!
}

input ProductCategoryWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductCategoryWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProductCategoryWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProductCategoryWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  products_every: ProductWhereInput
  products_some: ProductWhereInput
  products_none: ProductWhereInput
}

input ProductCategoryWhereUniqueInput {
  id: ID
}

"""A connection to a list of items."""
type ProductConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProductEdge]!
  aggregate: AggregateProduct!
}

input ProductCreateimageURLsInput {
  set: [String!]
}

input ProductCreateInput {
  id: ID
  name: String!
  description: String!
  content: String
  unitPrice: Float!
  imageURLs: ProductCreateimageURLsInput
  category: ProductCategoryCreateOneWithoutProductsInput!
  discounts: DiscountCreateManyWithoutProductInput
  orders: ItemCreateManyWithoutProductInput
}

input ProductCreateManyWithoutCategoryInput {
  create: [ProductCreateWithoutCategoryInput!]
  connect: [ProductWhereUniqueInput!]
}

input ProductCreateOneWithoutDiscountsInput {
  create: ProductCreateWithoutDiscountsInput
  connect: ProductWhereUniqueInput
}

input ProductCreateOneWithoutOrdersInput {
  create: ProductCreateWithoutOrdersInput
  connect: ProductWhereUniqueInput
}

input ProductCreateWithoutCategoryInput {
  id: ID
  name: String!
  description: String!
  content: String
  unitPrice: Float!
  imageURLs: ProductCreateimageURLsInput
  discounts: DiscountCreateManyWithoutProductInput
  orders: ItemCreateManyWithoutProductInput
}

input ProductCreateWithoutDiscountsInput {
  id: ID
  name: String!
  description: String!
  content: String
  unitPrice: Float!
  imageURLs: ProductCreateimageURLsInput
  category: ProductCategoryCreateOneWithoutProductsInput!
  orders: ItemCreateManyWithoutProductInput
}

input ProductCreateWithoutOrdersInput {
  id: ID
  name: String!
  description: String!
  content: String
  unitPrice: Float!
  imageURLs: ProductCreateimageURLsInput
  category: ProductCategoryCreateOneWithoutProductsInput!
  discounts: DiscountCreateManyWithoutProductInput
}

"""An edge in a connection."""
type ProductEdge {
  """The item at the end of the edge."""
  node: Product!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ProductOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  content_ASC
  content_DESC
  unitPrice_ASC
  unitPrice_DESC
}

type ProductPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  description: String!
  content: String
  unitPrice: Float!
  imageURLs: [String!]!
}

input ProductScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProductScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProductScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  content: String

  """All values that are not equal to given value."""
  content_not: String

  """All values that are contained in given list."""
  content_in: [String!]

  """All values that are not contained in given list."""
  content_not_in: [String!]

  """All values less than the given value."""
  content_lt: String

  """All values less than or equal the given value."""
  content_lte: String

  """All values greater than the given value."""
  content_gt: String

  """All values greater than or equal the given value."""
  content_gte: String

  """All values containing the given string."""
  content_contains: String

  """All values not containing the given string."""
  content_not_contains: String

  """All values starting with the given string."""
  content_starts_with: String

  """All values not starting with the given string."""
  content_not_starts_with: String

  """All values ending with the given string."""
  content_ends_with: String

  """All values not ending with the given string."""
  content_not_ends_with: String
  unitPrice: Float

  """All values that are not equal to given value."""
  unitPrice_not: Float

  """All values that are contained in given list."""
  unitPrice_in: [Float!]

  """All values that are not contained in given list."""
  unitPrice_not_in: [Float!]

  """All values less than the given value."""
  unitPrice_lt: Float

  """All values less than or equal the given value."""
  unitPrice_lte: Float

  """All values greater than the given value."""
  unitPrice_gt: Float

  """All values greater than or equal the given value."""
  unitPrice_gte: Float
}

type ProductSubscriptionPayload {
  mutation: MutationType!
  node: Product
  updatedFields: [String!]
  previousValues: ProductPreviousValues
}

input ProductSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProductSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProductSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ProductWhereInput
}

input ProductUpdateimageURLsInput {
  set: [String!]
}

input ProductUpdateInput {
  name: String
  description: String
  content: String
  unitPrice: Float
  imageURLs: ProductUpdateimageURLsInput
  category: ProductCategoryUpdateOneRequiredWithoutProductsInput
  discounts: DiscountUpdateManyWithoutProductInput
  orders: ItemUpdateManyWithoutProductInput
}

input ProductUpdateManyDataInput {
  name: String
  description: String
  content: String
  unitPrice: Float
  imageURLs: ProductUpdateimageURLsInput
}

input ProductUpdateManyMutationInput {
  name: String
  description: String
  content: String
  unitPrice: Float
  imageURLs: ProductUpdateimageURLsInput
}

input ProductUpdateManyWithoutCategoryInput {
  create: [ProductCreateWithoutCategoryInput!]
  connect: [ProductWhereUniqueInput!]
  set: [ProductWhereUniqueInput!]
  disconnect: [ProductWhereUniqueInput!]
  delete: [ProductWhereUniqueInput!]
  update: [ProductUpdateWithWhereUniqueWithoutCategoryInput!]
  updateMany: [ProductUpdateManyWithWhereNestedInput!]
  deleteMany: [ProductScalarWhereInput!]
  upsert: [ProductUpsertWithWhereUniqueWithoutCategoryInput!]
}

input ProductUpdateManyWithWhereNestedInput {
  where: ProductScalarWhereInput!
  data: ProductUpdateManyDataInput!
}

input ProductUpdateOneRequiredWithoutDiscountsInput {
  create: ProductCreateWithoutDiscountsInput
  connect: ProductWhereUniqueInput
  update: ProductUpdateWithoutDiscountsDataInput
  upsert: ProductUpsertWithoutDiscountsInput
}

input ProductUpdateOneRequiredWithoutOrdersInput {
  create: ProductCreateWithoutOrdersInput
  connect: ProductWhereUniqueInput
  update: ProductUpdateWithoutOrdersDataInput
  upsert: ProductUpsertWithoutOrdersInput
}

input ProductUpdateWithoutCategoryDataInput {
  name: String
  description: String
  content: String
  unitPrice: Float
  imageURLs: ProductUpdateimageURLsInput
  discounts: DiscountUpdateManyWithoutProductInput
  orders: ItemUpdateManyWithoutProductInput
}

input ProductUpdateWithoutDiscountsDataInput {
  name: String
  description: String
  content: String
  unitPrice: Float
  imageURLs: ProductUpdateimageURLsInput
  category: ProductCategoryUpdateOneRequiredWithoutProductsInput
  orders: ItemUpdateManyWithoutProductInput
}

input ProductUpdateWithoutOrdersDataInput {
  name: String
  description: String
  content: String
  unitPrice: Float
  imageURLs: ProductUpdateimageURLsInput
  category: ProductCategoryUpdateOneRequiredWithoutProductsInput
  discounts: DiscountUpdateManyWithoutProductInput
}

input ProductUpdateWithWhereUniqueWithoutCategoryInput {
  where: ProductWhereUniqueInput!
  data: ProductUpdateWithoutCategoryDataInput!
}

input ProductUpsertWithoutDiscountsInput {
  update: ProductUpdateWithoutDiscountsDataInput!
  create: ProductCreateWithoutDiscountsInput!
}

input ProductUpsertWithoutOrdersInput {
  update: ProductUpdateWithoutOrdersDataInput!
  create: ProductCreateWithoutOrdersInput!
}

input ProductUpsertWithWhereUniqueWithoutCategoryInput {
  where: ProductWhereUniqueInput!
  update: ProductUpdateWithoutCategoryDataInput!
  create: ProductCreateWithoutCategoryInput!
}

input ProductWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProductWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProductWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  content: String

  """All values that are not equal to given value."""
  content_not: String

  """All values that are contained in given list."""
  content_in: [String!]

  """All values that are not contained in given list."""
  content_not_in: [String!]

  """All values less than the given value."""
  content_lt: String

  """All values less than or equal the given value."""
  content_lte: String

  """All values greater than the given value."""
  content_gt: String

  """All values greater than or equal the given value."""
  content_gte: String

  """All values containing the given string."""
  content_contains: String

  """All values not containing the given string."""
  content_not_contains: String

  """All values starting with the given string."""
  content_starts_with: String

  """All values not starting with the given string."""
  content_not_starts_with: String

  """All values ending with the given string."""
  content_ends_with: String

  """All values not ending with the given string."""
  content_not_ends_with: String
  unitPrice: Float

  """All values that are not equal to given value."""
  unitPrice_not: Float

  """All values that are contained in given list."""
  unitPrice_in: [Float!]

  """All values that are not contained in given list."""
  unitPrice_not_in: [Float!]

  """All values less than the given value."""
  unitPrice_lt: Float

  """All values less than or equal the given value."""
  unitPrice_lte: Float

  """All values greater than the given value."""
  unitPrice_gt: Float

  """All values greater than or equal the given value."""
  unitPrice_gte: Float
  category: ProductCategoryWhereInput
  discounts_every: DiscountWhereInput
  discounts_some: DiscountWhereInput
  discounts_none: DiscountWhereInput
  orders_every: ItemWhereInput
  orders_some: ItemWhereInput
  orders_none: ItemWhereInput
}

input ProductWhereUniqueInput {
  id: ID
}

type Program implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  shortName: String!
  description: String
  branches(where: BranchWhereInput, orderBy: BranchOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Branch!]
}

"""A connection to a list of items."""
type ProgramConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProgramEdge]!
  aggregate: AggregateProgram!
}

input ProgramCreateInput {
  id: ID
  name: String!
  shortName: String!
  description: String
  branches: BranchCreateManyWithoutProgramInput
}

input ProgramCreateOneWithoutBranchesInput {
  create: ProgramCreateWithoutBranchesInput
  connect: ProgramWhereUniqueInput
}

input ProgramCreateWithoutBranchesInput {
  id: ID
  name: String!
  shortName: String!
  description: String
}

"""An edge in a connection."""
type ProgramEdge {
  """The item at the end of the edge."""
  node: Program!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ProgramOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
  shortName_ASC
  shortName_DESC
  description_ASC
  description_DESC
}

type ProgramPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  shortName: String!
  description: String
}

type ProgramSubscriptionPayload {
  mutation: MutationType!
  node: Program
  updatedFields: [String!]
  previousValues: ProgramPreviousValues
}

input ProgramSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ProgramSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProgramSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProgramSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ProgramWhereInput
}

input ProgramUpdateInput {
  name: String
  shortName: String
  description: String
  branches: BranchUpdateManyWithoutProgramInput
}

input ProgramUpdateManyMutationInput {
  name: String
  shortName: String
  description: String
}

input ProgramUpdateOneRequiredWithoutBranchesInput {
  create: ProgramCreateWithoutBranchesInput
  connect: ProgramWhereUniqueInput
  update: ProgramUpdateWithoutBranchesDataInput
  upsert: ProgramUpsertWithoutBranchesInput
}

input ProgramUpdateWithoutBranchesDataInput {
  name: String
  shortName: String
  description: String
}

input ProgramUpsertWithoutBranchesInput {
  update: ProgramUpdateWithoutBranchesDataInput!
  create: ProgramCreateWithoutBranchesInput!
}

input ProgramWhereInput {
  """Logical AND on all given filters."""
  AND: [ProgramWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProgramWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProgramWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  shortName: String

  """All values that are not equal to given value."""
  shortName_not: String

  """All values that are contained in given list."""
  shortName_in: [String!]

  """All values that are not contained in given list."""
  shortName_not_in: [String!]

  """All values less than the given value."""
  shortName_lt: String

  """All values less than or equal the given value."""
  shortName_lte: String

  """All values greater than the given value."""
  shortName_gt: String

  """All values greater than or equal the given value."""
  shortName_gte: String

  """All values containing the given string."""
  shortName_contains: String

  """All values not containing the given string."""
  shortName_not_contains: String

  """All values starting with the given string."""
  shortName_starts_with: String

  """All values not starting with the given string."""
  shortName_not_starts_with: String

  """All values ending with the given string."""
  shortName_ends_with: String

  """All values not ending with the given string."""
  shortName_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  branches_every: BranchWhereInput
  branches_some: BranchWhereInput
  branches_none: BranchWhereInput
}

input ProgramWhereUniqueInput {
  id: ID
  name: String
  shortName: String
}

type Query {
  adminRoles(where: AdminRoleWhereInput, orderBy: AdminRoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [AdminRole]!
  socialLinks(where: SocialLinkWhereInput, orderBy: SocialLinkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SocialLink]!
  socialNetworks(where: SocialNetworkWhereInput, orderBy: SocialNetworkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SocialNetwork]!
  officialDocuments(where: OfficialDocumentWhereInput, orderBy: OfficialDocumentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [OfficialDocument]!
  addresses(where: AddressWhereInput, orderBy: AddressOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Address]!
  devices(where: DeviceWhereInput, orderBy: DeviceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Device]!
  newses(where: NewsWhereInput, orderBy: NewsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [News]!
  events(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Event]!
  venues(where: VenueWhereInput, orderBy: VenueOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Venue]!
  spaces(where: SpaceWhereInput, orderBy: SpaceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Space]!
  departments(where: DepartmentWhereInput, orderBy: DepartmentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Department]!
  programs(where: ProgramWhereInput, orderBy: ProgramOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Program]!
  branches(where: BranchWhereInput, orderBy: BranchOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Branch]!
  subjects(where: SubjectWhereInput, orderBy: SubjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Subject]!
  lessons(where: LessonWhereInput, orderBy: LessonOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Lesson]!
  operatingPeriods(where: OperatingPeriodWhereInput, orderBy: OperatingPeriodOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [OperatingPeriod]!
  sessions(where: SessionWhereInput, orderBy: SessionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Session]!
  productCategories(where: ProductCategoryWhereInput, orderBy: ProductCategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProductCategory]!
  products(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Product]!
  discountRequests(where: DiscountRequestWhereInput, orderBy: DiscountRequestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [DiscountRequest]!
  transactions(where: TransactionWhereInput, orderBy: TransactionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Transaction]!
  orders(where: OrderWhereInput, orderBy: OrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Order]!
  items(where: ItemWhereInput, orderBy: ItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Item]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  discounts(where: DiscountWhereInput, orderBy: DiscountOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Discount]!
  adminRole(where: AdminRoleWhereUniqueInput!): AdminRole
  socialLink(where: SocialLinkWhereUniqueInput!): SocialLink
  socialNetwork(where: SocialNetworkWhereUniqueInput!): SocialNetwork
  officialDocument(where: OfficialDocumentWhereUniqueInput!): OfficialDocument
  address(where: AddressWhereUniqueInput!): Address
  device(where: DeviceWhereUniqueInput!): Device
  news(where: NewsWhereUniqueInput!): News
  event(where: EventWhereUniqueInput!): Event
  venue(where: VenueWhereUniqueInput!): Venue
  space(where: SpaceWhereUniqueInput!): Space
  department(where: DepartmentWhereUniqueInput!): Department
  program(where: ProgramWhereUniqueInput!): Program
  branch(where: BranchWhereUniqueInput!): Branch
  subject(where: SubjectWhereUniqueInput!): Subject
  lesson(where: LessonWhereUniqueInput!): Lesson
  operatingPeriod(where: OperatingPeriodWhereUniqueInput!): OperatingPeriod
  session(where: SessionWhereUniqueInput!): Session
  productCategory(where: ProductCategoryWhereUniqueInput!): ProductCategory
  product(where: ProductWhereUniqueInput!): Product
  discountRequest(where: DiscountRequestWhereUniqueInput!): DiscountRequest
  transaction(where: TransactionWhereUniqueInput!): Transaction
  order(where: OrderWhereUniqueInput!): Order
  item(where: ItemWhereUniqueInput!): Item
  user(where: UserWhereUniqueInput!): User
  discount(where: DiscountWhereUniqueInput!): Discount
  adminRolesConnection(where: AdminRoleWhereInput, orderBy: AdminRoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AdminRoleConnection!
  socialLinksConnection(where: SocialLinkWhereInput, orderBy: SocialLinkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SocialLinkConnection!
  socialNetworksConnection(where: SocialNetworkWhereInput, orderBy: SocialNetworkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SocialNetworkConnection!
  officialDocumentsConnection(where: OfficialDocumentWhereInput, orderBy: OfficialDocumentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OfficialDocumentConnection!
  addressesConnection(where: AddressWhereInput, orderBy: AddressOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AddressConnection!
  devicesConnection(where: DeviceWhereInput, orderBy: DeviceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DeviceConnection!
  newsesConnection(where: NewsWhereInput, orderBy: NewsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): NewsConnection!
  eventsConnection(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EventConnection!
  venuesConnection(where: VenueWhereInput, orderBy: VenueOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): VenueConnection!
  spacesConnection(where: SpaceWhereInput, orderBy: SpaceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SpaceConnection!
  departmentsConnection(where: DepartmentWhereInput, orderBy: DepartmentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DepartmentConnection!
  programsConnection(where: ProgramWhereInput, orderBy: ProgramOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProgramConnection!
  branchesConnection(where: BranchWhereInput, orderBy: BranchOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BranchConnection!
  subjectsConnection(where: SubjectWhereInput, orderBy: SubjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SubjectConnection!
  lessonsConnection(where: LessonWhereInput, orderBy: LessonOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LessonConnection!
  operatingPeriodsConnection(where: OperatingPeriodWhereInput, orderBy: OperatingPeriodOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OperatingPeriodConnection!
  sessionsConnection(where: SessionWhereInput, orderBy: SessionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SessionConnection!
  productCategoriesConnection(where: ProductCategoryWhereInput, orderBy: ProductCategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProductCategoryConnection!
  productsConnection(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProductConnection!
  discountRequestsConnection(where: DiscountRequestWhereInput, orderBy: DiscountRequestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DiscountRequestConnection!
  transactionsConnection(where: TransactionWhereInput, orderBy: TransactionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TransactionConnection!
  ordersConnection(where: OrderWhereInput, orderBy: OrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OrderConnection!
  itemsConnection(where: ItemWhereInput, orderBy: ItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ItemConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  discountsConnection(where: DiscountWhereInput, orderBy: DiscountOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DiscountConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Session implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  lesson: Lesson!
  closedAt: DateTime!
  by: User!
  at: Space!
}

"""A connection to a list of items."""
type SessionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SessionEdge]!
  aggregate: AggregateSession!
}

input SessionCreateInput {
  id: ID
  closedAt: DateTime!
  lesson: LessonCreateOneWithoutSessionsInput!
  by: UserCreateOneWithoutTeachedSessionsInput!
  at: SpaceCreateOneWithoutSessionsInput!
}

input SessionCreateManyWithoutAtInput {
  create: [SessionCreateWithoutAtInput!]
  connect: [SessionWhereUniqueInput!]
}

input SessionCreateManyWithoutByInput {
  create: [SessionCreateWithoutByInput!]
  connect: [SessionWhereUniqueInput!]
}

input SessionCreateManyWithoutLessonInput {
  create: [SessionCreateWithoutLessonInput!]
  connect: [SessionWhereUniqueInput!]
}

input SessionCreateWithoutAtInput {
  id: ID
  closedAt: DateTime!
  lesson: LessonCreateOneWithoutSessionsInput!
  by: UserCreateOneWithoutTeachedSessionsInput!
}

input SessionCreateWithoutByInput {
  id: ID
  closedAt: DateTime!
  lesson: LessonCreateOneWithoutSessionsInput!
  at: SpaceCreateOneWithoutSessionsInput!
}

input SessionCreateWithoutLessonInput {
  id: ID
  closedAt: DateTime!
  by: UserCreateOneWithoutTeachedSessionsInput!
  at: SpaceCreateOneWithoutSessionsInput!
}

"""An edge in a connection."""
type SessionEdge {
  """The item at the end of the edge."""
  node: Session!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SessionOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  closedAt_ASC
  closedAt_DESC
}

type SessionPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  closedAt: DateTime!
}

input SessionScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [SessionScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [SessionScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SessionScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  closedAt: DateTime

  """All values that are not equal to given value."""
  closedAt_not: DateTime

  """All values that are contained in given list."""
  closedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  closedAt_not_in: [DateTime!]

  """All values less than the given value."""
  closedAt_lt: DateTime

  """All values less than or equal the given value."""
  closedAt_lte: DateTime

  """All values greater than the given value."""
  closedAt_gt: DateTime

  """All values greater than or equal the given value."""
  closedAt_gte: DateTime
}

type SessionSubscriptionPayload {
  mutation: MutationType!
  node: Session
  updatedFields: [String!]
  previousValues: SessionPreviousValues
}

input SessionSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SessionSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SessionSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SessionSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SessionWhereInput
}

input SessionUpdateInput {
  closedAt: DateTime
  lesson: LessonUpdateOneRequiredWithoutSessionsInput
  by: UserUpdateOneRequiredWithoutTeachedSessionsInput
  at: SpaceUpdateOneRequiredWithoutSessionsInput
}

input SessionUpdateManyDataInput {
  closedAt: DateTime
}

input SessionUpdateManyMutationInput {
  closedAt: DateTime
}

input SessionUpdateManyWithoutAtInput {
  create: [SessionCreateWithoutAtInput!]
  connect: [SessionWhereUniqueInput!]
  set: [SessionWhereUniqueInput!]
  disconnect: [SessionWhereUniqueInput!]
  delete: [SessionWhereUniqueInput!]
  update: [SessionUpdateWithWhereUniqueWithoutAtInput!]
  updateMany: [SessionUpdateManyWithWhereNestedInput!]
  deleteMany: [SessionScalarWhereInput!]
  upsert: [SessionUpsertWithWhereUniqueWithoutAtInput!]
}

input SessionUpdateManyWithoutByInput {
  create: [SessionCreateWithoutByInput!]
  connect: [SessionWhereUniqueInput!]
  set: [SessionWhereUniqueInput!]
  disconnect: [SessionWhereUniqueInput!]
  delete: [SessionWhereUniqueInput!]
  update: [SessionUpdateWithWhereUniqueWithoutByInput!]
  updateMany: [SessionUpdateManyWithWhereNestedInput!]
  deleteMany: [SessionScalarWhereInput!]
  upsert: [SessionUpsertWithWhereUniqueWithoutByInput!]
}

input SessionUpdateManyWithoutLessonInput {
  create: [SessionCreateWithoutLessonInput!]
  connect: [SessionWhereUniqueInput!]
  set: [SessionWhereUniqueInput!]
  disconnect: [SessionWhereUniqueInput!]
  delete: [SessionWhereUniqueInput!]
  update: [SessionUpdateWithWhereUniqueWithoutLessonInput!]
  updateMany: [SessionUpdateManyWithWhereNestedInput!]
  deleteMany: [SessionScalarWhereInput!]
  upsert: [SessionUpsertWithWhereUniqueWithoutLessonInput!]
}

input SessionUpdateManyWithWhereNestedInput {
  where: SessionScalarWhereInput!
  data: SessionUpdateManyDataInput!
}

input SessionUpdateWithoutAtDataInput {
  closedAt: DateTime
  lesson: LessonUpdateOneRequiredWithoutSessionsInput
  by: UserUpdateOneRequiredWithoutTeachedSessionsInput
}

input SessionUpdateWithoutByDataInput {
  closedAt: DateTime
  lesson: LessonUpdateOneRequiredWithoutSessionsInput
  at: SpaceUpdateOneRequiredWithoutSessionsInput
}

input SessionUpdateWithoutLessonDataInput {
  closedAt: DateTime
  by: UserUpdateOneRequiredWithoutTeachedSessionsInput
  at: SpaceUpdateOneRequiredWithoutSessionsInput
}

input SessionUpdateWithWhereUniqueWithoutAtInput {
  where: SessionWhereUniqueInput!
  data: SessionUpdateWithoutAtDataInput!
}

input SessionUpdateWithWhereUniqueWithoutByInput {
  where: SessionWhereUniqueInput!
  data: SessionUpdateWithoutByDataInput!
}

input SessionUpdateWithWhereUniqueWithoutLessonInput {
  where: SessionWhereUniqueInput!
  data: SessionUpdateWithoutLessonDataInput!
}

input SessionUpsertWithWhereUniqueWithoutAtInput {
  where: SessionWhereUniqueInput!
  update: SessionUpdateWithoutAtDataInput!
  create: SessionCreateWithoutAtInput!
}

input SessionUpsertWithWhereUniqueWithoutByInput {
  where: SessionWhereUniqueInput!
  update: SessionUpdateWithoutByDataInput!
  create: SessionCreateWithoutByInput!
}

input SessionUpsertWithWhereUniqueWithoutLessonInput {
  where: SessionWhereUniqueInput!
  update: SessionUpdateWithoutLessonDataInput!
  create: SessionCreateWithoutLessonInput!
}

input SessionWhereInput {
  """Logical AND on all given filters."""
  AND: [SessionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SessionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SessionWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  closedAt: DateTime

  """All values that are not equal to given value."""
  closedAt_not: DateTime

  """All values that are contained in given list."""
  closedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  closedAt_not_in: [DateTime!]

  """All values less than the given value."""
  closedAt_lt: DateTime

  """All values less than or equal the given value."""
  closedAt_lte: DateTime

  """All values greater than the given value."""
  closedAt_gt: DateTime

  """All values greater than or equal the given value."""
  closedAt_gte: DateTime
  lesson: LessonWhereInput
  by: UserWhereInput
  at: SpaceWhereInput
}

input SessionWhereUniqueInput {
  id: ID
}

type SocialLink implements Node {
  id: ID!
  link: String!
  socialNetwork: SocialNetwork!
  owner: User!
}

"""A connection to a list of items."""
type SocialLinkConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SocialLinkEdge]!
  aggregate: AggregateSocialLink!
}

input SocialLinkCreateInput {
  id: ID
  link: String!
  socialNetwork: SocialNetworkCreateOneWithoutUserLinksInput!
  owner: UserCreateOneWithoutSocialNetworkLinksInput!
}

input SocialLinkCreateManyWithoutOwnerInput {
  create: [SocialLinkCreateWithoutOwnerInput!]
  connect: [SocialLinkWhereUniqueInput!]
}

input SocialLinkCreateManyWithoutSocialNetworkInput {
  create: [SocialLinkCreateWithoutSocialNetworkInput!]
  connect: [SocialLinkWhereUniqueInput!]
}

input SocialLinkCreateWithoutOwnerInput {
  id: ID
  link: String!
  socialNetwork: SocialNetworkCreateOneWithoutUserLinksInput!
}

input SocialLinkCreateWithoutSocialNetworkInput {
  id: ID
  link: String!
  owner: UserCreateOneWithoutSocialNetworkLinksInput!
}

"""An edge in a connection."""
type SocialLinkEdge {
  """The item at the end of the edge."""
  node: SocialLink!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SocialLinkOrderByInput {
  id_ASC
  id_DESC
  link_ASC
  link_DESC
}

type SocialLinkPreviousValues {
  id: ID!
  link: String!
}

input SocialLinkScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [SocialLinkScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [SocialLinkScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SocialLinkScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  link: String

  """All values that are not equal to given value."""
  link_not: String

  """All values that are contained in given list."""
  link_in: [String!]

  """All values that are not contained in given list."""
  link_not_in: [String!]

  """All values less than the given value."""
  link_lt: String

  """All values less than or equal the given value."""
  link_lte: String

  """All values greater than the given value."""
  link_gt: String

  """All values greater than or equal the given value."""
  link_gte: String

  """All values containing the given string."""
  link_contains: String

  """All values not containing the given string."""
  link_not_contains: String

  """All values starting with the given string."""
  link_starts_with: String

  """All values not starting with the given string."""
  link_not_starts_with: String

  """All values ending with the given string."""
  link_ends_with: String

  """All values not ending with the given string."""
  link_not_ends_with: String
}

type SocialLinkSubscriptionPayload {
  mutation: MutationType!
  node: SocialLink
  updatedFields: [String!]
  previousValues: SocialLinkPreviousValues
}

input SocialLinkSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SocialLinkSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SocialLinkSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SocialLinkSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SocialLinkWhereInput
}

input SocialLinkUpdateInput {
  link: String
  socialNetwork: SocialNetworkUpdateOneRequiredWithoutUserLinksInput
  owner: UserUpdateOneRequiredWithoutSocialNetworkLinksInput
}

input SocialLinkUpdateManyDataInput {
  link: String
}

input SocialLinkUpdateManyMutationInput {
  link: String
}

input SocialLinkUpdateManyWithoutOwnerInput {
  create: [SocialLinkCreateWithoutOwnerInput!]
  connect: [SocialLinkWhereUniqueInput!]
  set: [SocialLinkWhereUniqueInput!]
  disconnect: [SocialLinkWhereUniqueInput!]
  delete: [SocialLinkWhereUniqueInput!]
  update: [SocialLinkUpdateWithWhereUniqueWithoutOwnerInput!]
  updateMany: [SocialLinkUpdateManyWithWhereNestedInput!]
  deleteMany: [SocialLinkScalarWhereInput!]
  upsert: [SocialLinkUpsertWithWhereUniqueWithoutOwnerInput!]
}

input SocialLinkUpdateManyWithoutSocialNetworkInput {
  create: [SocialLinkCreateWithoutSocialNetworkInput!]
  connect: [SocialLinkWhereUniqueInput!]
  set: [SocialLinkWhereUniqueInput!]
  disconnect: [SocialLinkWhereUniqueInput!]
  delete: [SocialLinkWhereUniqueInput!]
  update: [SocialLinkUpdateWithWhereUniqueWithoutSocialNetworkInput!]
  updateMany: [SocialLinkUpdateManyWithWhereNestedInput!]
  deleteMany: [SocialLinkScalarWhereInput!]
  upsert: [SocialLinkUpsertWithWhereUniqueWithoutSocialNetworkInput!]
}

input SocialLinkUpdateManyWithWhereNestedInput {
  where: SocialLinkScalarWhereInput!
  data: SocialLinkUpdateManyDataInput!
}

input SocialLinkUpdateWithoutOwnerDataInput {
  link: String
  socialNetwork: SocialNetworkUpdateOneRequiredWithoutUserLinksInput
}

input SocialLinkUpdateWithoutSocialNetworkDataInput {
  link: String
  owner: UserUpdateOneRequiredWithoutSocialNetworkLinksInput
}

input SocialLinkUpdateWithWhereUniqueWithoutOwnerInput {
  where: SocialLinkWhereUniqueInput!
  data: SocialLinkUpdateWithoutOwnerDataInput!
}

input SocialLinkUpdateWithWhereUniqueWithoutSocialNetworkInput {
  where: SocialLinkWhereUniqueInput!
  data: SocialLinkUpdateWithoutSocialNetworkDataInput!
}

input SocialLinkUpsertWithWhereUniqueWithoutOwnerInput {
  where: SocialLinkWhereUniqueInput!
  update: SocialLinkUpdateWithoutOwnerDataInput!
  create: SocialLinkCreateWithoutOwnerInput!
}

input SocialLinkUpsertWithWhereUniqueWithoutSocialNetworkInput {
  where: SocialLinkWhereUniqueInput!
  update: SocialLinkUpdateWithoutSocialNetworkDataInput!
  create: SocialLinkCreateWithoutSocialNetworkInput!
}

input SocialLinkWhereInput {
  """Logical AND on all given filters."""
  AND: [SocialLinkWhereInput!]

  """Logical OR on all given filters."""
  OR: [SocialLinkWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SocialLinkWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  link: String

  """All values that are not equal to given value."""
  link_not: String

  """All values that are contained in given list."""
  link_in: [String!]

  """All values that are not contained in given list."""
  link_not_in: [String!]

  """All values less than the given value."""
  link_lt: String

  """All values less than or equal the given value."""
  link_lte: String

  """All values greater than the given value."""
  link_gt: String

  """All values greater than or equal the given value."""
  link_gte: String

  """All values containing the given string."""
  link_contains: String

  """All values not containing the given string."""
  link_not_contains: String

  """All values starting with the given string."""
  link_starts_with: String

  """All values not starting with the given string."""
  link_not_starts_with: String

  """All values ending with the given string."""
  link_ends_with: String

  """All values not ending with the given string."""
  link_not_ends_with: String
  socialNetwork: SocialNetworkWhereInput
  owner: UserWhereInput
}

input SocialLinkWhereUniqueInput {
  id: ID
  link: String
}

type SocialNetwork implements Node {
  id: ID!
  name: String!
  baseURL: String!
  ownURL: String!
  userLinks(where: SocialLinkWhereInput, orderBy: SocialLinkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SocialLink!]
}

"""A connection to a list of items."""
type SocialNetworkConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SocialNetworkEdge]!
  aggregate: AggregateSocialNetwork!
}

input SocialNetworkCreateInput {
  id: ID
  name: String!
  baseURL: String!
  ownURL: String!
  userLinks: SocialLinkCreateManyWithoutSocialNetworkInput
}

input SocialNetworkCreateOneWithoutUserLinksInput {
  create: SocialNetworkCreateWithoutUserLinksInput
  connect: SocialNetworkWhereUniqueInput
}

input SocialNetworkCreateWithoutUserLinksInput {
  id: ID
  name: String!
  baseURL: String!
  ownURL: String!
}

"""An edge in a connection."""
type SocialNetworkEdge {
  """The item at the end of the edge."""
  node: SocialNetwork!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SocialNetworkOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  baseURL_ASC
  baseURL_DESC
  ownURL_ASC
  ownURL_DESC
}

type SocialNetworkPreviousValues {
  id: ID!
  name: String!
  baseURL: String!
  ownURL: String!
}

type SocialNetworkSubscriptionPayload {
  mutation: MutationType!
  node: SocialNetwork
  updatedFields: [String!]
  previousValues: SocialNetworkPreviousValues
}

input SocialNetworkSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SocialNetworkSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SocialNetworkSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SocialNetworkSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SocialNetworkWhereInput
}

input SocialNetworkUpdateInput {
  name: String
  baseURL: String
  ownURL: String
  userLinks: SocialLinkUpdateManyWithoutSocialNetworkInput
}

input SocialNetworkUpdateManyMutationInput {
  name: String
  baseURL: String
  ownURL: String
}

input SocialNetworkUpdateOneRequiredWithoutUserLinksInput {
  create: SocialNetworkCreateWithoutUserLinksInput
  connect: SocialNetworkWhereUniqueInput
  update: SocialNetworkUpdateWithoutUserLinksDataInput
  upsert: SocialNetworkUpsertWithoutUserLinksInput
}

input SocialNetworkUpdateWithoutUserLinksDataInput {
  name: String
  baseURL: String
  ownURL: String
}

input SocialNetworkUpsertWithoutUserLinksInput {
  update: SocialNetworkUpdateWithoutUserLinksDataInput!
  create: SocialNetworkCreateWithoutUserLinksInput!
}

input SocialNetworkWhereInput {
  """Logical AND on all given filters."""
  AND: [SocialNetworkWhereInput!]

  """Logical OR on all given filters."""
  OR: [SocialNetworkWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SocialNetworkWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  baseURL: String

  """All values that are not equal to given value."""
  baseURL_not: String

  """All values that are contained in given list."""
  baseURL_in: [String!]

  """All values that are not contained in given list."""
  baseURL_not_in: [String!]

  """All values less than the given value."""
  baseURL_lt: String

  """All values less than or equal the given value."""
  baseURL_lte: String

  """All values greater than the given value."""
  baseURL_gt: String

  """All values greater than or equal the given value."""
  baseURL_gte: String

  """All values containing the given string."""
  baseURL_contains: String

  """All values not containing the given string."""
  baseURL_not_contains: String

  """All values starting with the given string."""
  baseURL_starts_with: String

  """All values not starting with the given string."""
  baseURL_not_starts_with: String

  """All values ending with the given string."""
  baseURL_ends_with: String

  """All values not ending with the given string."""
  baseURL_not_ends_with: String
  ownURL: String

  """All values that are not equal to given value."""
  ownURL_not: String

  """All values that are contained in given list."""
  ownURL_in: [String!]

  """All values that are not contained in given list."""
  ownURL_not_in: [String!]

  """All values less than the given value."""
  ownURL_lt: String

  """All values less than or equal the given value."""
  ownURL_lte: String

  """All values greater than the given value."""
  ownURL_gt: String

  """All values greater than or equal the given value."""
  ownURL_gte: String

  """All values containing the given string."""
  ownURL_contains: String

  """All values not containing the given string."""
  ownURL_not_contains: String

  """All values starting with the given string."""
  ownURL_starts_with: String

  """All values not starting with the given string."""
  ownURL_not_starts_with: String

  """All values ending with the given string."""
  ownURL_ends_with: String

  """All values not ending with the given string."""
  ownURL_not_ends_with: String
  userLinks_every: SocialLinkWhereInput
  userLinks_some: SocialLinkWhereInput
  userLinks_none: SocialLinkWhereInput
}

input SocialNetworkWhereUniqueInput {
  id: ID
}

type Space implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  venue: Venue!
  events(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Event!]
  sessions(where: SessionWhereInput, orderBy: SessionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Session!]
}

"""A connection to a list of items."""
type SpaceConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SpaceEdge]!
  aggregate: AggregateSpace!
}

input SpaceCreateInput {
  id: ID
  name: String!
  venue: VenueCreateOneWithoutSpacesInput!
  events: EventCreateManyWithoutPlaceInput
  sessions: SessionCreateManyWithoutAtInput
}

input SpaceCreateManyWithoutVenueInput {
  create: [SpaceCreateWithoutVenueInput!]
  connect: [SpaceWhereUniqueInput!]
}

input SpaceCreateOneWithoutEventsInput {
  create: SpaceCreateWithoutEventsInput
  connect: SpaceWhereUniqueInput
}

input SpaceCreateOneWithoutSessionsInput {
  create: SpaceCreateWithoutSessionsInput
  connect: SpaceWhereUniqueInput
}

input SpaceCreateWithoutEventsInput {
  id: ID
  name: String!
  venue: VenueCreateOneWithoutSpacesInput!
  sessions: SessionCreateManyWithoutAtInput
}

input SpaceCreateWithoutSessionsInput {
  id: ID
  name: String!
  venue: VenueCreateOneWithoutSpacesInput!
  events: EventCreateManyWithoutPlaceInput
}

input SpaceCreateWithoutVenueInput {
  id: ID
  name: String!
  events: EventCreateManyWithoutPlaceInput
  sessions: SessionCreateManyWithoutAtInput
}

"""An edge in a connection."""
type SpaceEdge {
  """The item at the end of the edge."""
  node: Space!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SpaceOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
}

type SpacePreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
}

input SpaceScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [SpaceScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [SpaceScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SpaceScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
}

type SpaceSubscriptionPayload {
  mutation: MutationType!
  node: Space
  updatedFields: [String!]
  previousValues: SpacePreviousValues
}

input SpaceSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SpaceSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SpaceSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SpaceSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SpaceWhereInput
}

input SpaceUpdateInput {
  name: String
  venue: VenueUpdateOneRequiredWithoutSpacesInput
  events: EventUpdateManyWithoutPlaceInput
  sessions: SessionUpdateManyWithoutAtInput
}

input SpaceUpdateManyDataInput {
  name: String
}

input SpaceUpdateManyMutationInput {
  name: String
}

input SpaceUpdateManyWithoutVenueInput {
  create: [SpaceCreateWithoutVenueInput!]
  connect: [SpaceWhereUniqueInput!]
  set: [SpaceWhereUniqueInput!]
  disconnect: [SpaceWhereUniqueInput!]
  delete: [SpaceWhereUniqueInput!]
  update: [SpaceUpdateWithWhereUniqueWithoutVenueInput!]
  updateMany: [SpaceUpdateManyWithWhereNestedInput!]
  deleteMany: [SpaceScalarWhereInput!]
  upsert: [SpaceUpsertWithWhereUniqueWithoutVenueInput!]
}

input SpaceUpdateManyWithWhereNestedInput {
  where: SpaceScalarWhereInput!
  data: SpaceUpdateManyDataInput!
}

input SpaceUpdateOneRequiredWithoutEventsInput {
  create: SpaceCreateWithoutEventsInput
  connect: SpaceWhereUniqueInput
  update: SpaceUpdateWithoutEventsDataInput
  upsert: SpaceUpsertWithoutEventsInput
}

input SpaceUpdateOneRequiredWithoutSessionsInput {
  create: SpaceCreateWithoutSessionsInput
  connect: SpaceWhereUniqueInput
  update: SpaceUpdateWithoutSessionsDataInput
  upsert: SpaceUpsertWithoutSessionsInput
}

input SpaceUpdateWithoutEventsDataInput {
  name: String
  venue: VenueUpdateOneRequiredWithoutSpacesInput
  sessions: SessionUpdateManyWithoutAtInput
}

input SpaceUpdateWithoutSessionsDataInput {
  name: String
  venue: VenueUpdateOneRequiredWithoutSpacesInput
  events: EventUpdateManyWithoutPlaceInput
}

input SpaceUpdateWithoutVenueDataInput {
  name: String
  events: EventUpdateManyWithoutPlaceInput
  sessions: SessionUpdateManyWithoutAtInput
}

input SpaceUpdateWithWhereUniqueWithoutVenueInput {
  where: SpaceWhereUniqueInput!
  data: SpaceUpdateWithoutVenueDataInput!
}

input SpaceUpsertWithoutEventsInput {
  update: SpaceUpdateWithoutEventsDataInput!
  create: SpaceCreateWithoutEventsInput!
}

input SpaceUpsertWithoutSessionsInput {
  update: SpaceUpdateWithoutSessionsDataInput!
  create: SpaceCreateWithoutSessionsInput!
}

input SpaceUpsertWithWhereUniqueWithoutVenueInput {
  where: SpaceWhereUniqueInput!
  update: SpaceUpdateWithoutVenueDataInput!
  create: SpaceCreateWithoutVenueInput!
}

input SpaceWhereInput {
  """Logical AND on all given filters."""
  AND: [SpaceWhereInput!]

  """Logical OR on all given filters."""
  OR: [SpaceWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SpaceWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  venue: VenueWhereInput
  events_every: EventWhereInput
  events_some: EventWhereInput
  events_none: EventWhereInput
  sessions_every: SessionWhereInput
  sessions_some: SessionWhereInput
  sessions_none: SessionWhereInput
}

input SpaceWhereUniqueInput {
  id: ID
}

type Subject implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  shortName: String!
  description: String
  branch: Branch!
  lesson: Lesson
}

"""A connection to a list of items."""
type SubjectConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SubjectEdge]!
  aggregate: AggregateSubject!
}

input SubjectCreateInput {
  id: ID
  name: String!
  shortName: String!
  description: String
  branch: BranchCreateOneWithoutSubjectsInput!
  lesson: LessonCreateOneWithoutSubjectsInput
}

input SubjectCreateManyWithoutBranchInput {
  create: [SubjectCreateWithoutBranchInput!]
  connect: [SubjectWhereUniqueInput!]
}

input SubjectCreateManyWithoutLessonInput {
  create: [SubjectCreateWithoutLessonInput!]
  connect: [SubjectWhereUniqueInput!]
}

input SubjectCreateWithoutBranchInput {
  id: ID
  name: String!
  shortName: String!
  description: String
  lesson: LessonCreateOneWithoutSubjectsInput
}

input SubjectCreateWithoutLessonInput {
  id: ID
  name: String!
  shortName: String!
  description: String
  branch: BranchCreateOneWithoutSubjectsInput!
}

"""An edge in a connection."""
type SubjectEdge {
  """The item at the end of the edge."""
  node: Subject!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SubjectOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
  shortName_ASC
  shortName_DESC
  description_ASC
  description_DESC
}

type SubjectPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  shortName: String!
  description: String
}

input SubjectScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [SubjectScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [SubjectScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SubjectScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  shortName: String

  """All values that are not equal to given value."""
  shortName_not: String

  """All values that are contained in given list."""
  shortName_in: [String!]

  """All values that are not contained in given list."""
  shortName_not_in: [String!]

  """All values less than the given value."""
  shortName_lt: String

  """All values less than or equal the given value."""
  shortName_lte: String

  """All values greater than the given value."""
  shortName_gt: String

  """All values greater than or equal the given value."""
  shortName_gte: String

  """All values containing the given string."""
  shortName_contains: String

  """All values not containing the given string."""
  shortName_not_contains: String

  """All values starting with the given string."""
  shortName_starts_with: String

  """All values not starting with the given string."""
  shortName_not_starts_with: String

  """All values ending with the given string."""
  shortName_ends_with: String

  """All values not ending with the given string."""
  shortName_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
}

type SubjectSubscriptionPayload {
  mutation: MutationType!
  node: Subject
  updatedFields: [String!]
  previousValues: SubjectPreviousValues
}

input SubjectSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SubjectSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SubjectSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SubjectSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SubjectWhereInput
}

input SubjectUpdateInput {
  name: String
  shortName: String
  description: String
  branch: BranchUpdateOneRequiredWithoutSubjectsInput
  lesson: LessonUpdateOneWithoutSubjectsInput
}

input SubjectUpdateManyDataInput {
  name: String
  shortName: String
  description: String
}

input SubjectUpdateManyMutationInput {
  name: String
  shortName: String
  description: String
}

input SubjectUpdateManyWithoutBranchInput {
  create: [SubjectCreateWithoutBranchInput!]
  connect: [SubjectWhereUniqueInput!]
  set: [SubjectWhereUniqueInput!]
  disconnect: [SubjectWhereUniqueInput!]
  delete: [SubjectWhereUniqueInput!]
  update: [SubjectUpdateWithWhereUniqueWithoutBranchInput!]
  updateMany: [SubjectUpdateManyWithWhereNestedInput!]
  deleteMany: [SubjectScalarWhereInput!]
  upsert: [SubjectUpsertWithWhereUniqueWithoutBranchInput!]
}

input SubjectUpdateManyWithoutLessonInput {
  create: [SubjectCreateWithoutLessonInput!]
  connect: [SubjectWhereUniqueInput!]
  set: [SubjectWhereUniqueInput!]
  disconnect: [SubjectWhereUniqueInput!]
  delete: [SubjectWhereUniqueInput!]
  update: [SubjectUpdateWithWhereUniqueWithoutLessonInput!]
  updateMany: [SubjectUpdateManyWithWhereNestedInput!]
  deleteMany: [SubjectScalarWhereInput!]
  upsert: [SubjectUpsertWithWhereUniqueWithoutLessonInput!]
}

input SubjectUpdateManyWithWhereNestedInput {
  where: SubjectScalarWhereInput!
  data: SubjectUpdateManyDataInput!
}

input SubjectUpdateWithoutBranchDataInput {
  name: String
  shortName: String
  description: String
  lesson: LessonUpdateOneWithoutSubjectsInput
}

input SubjectUpdateWithoutLessonDataInput {
  name: String
  shortName: String
  description: String
  branch: BranchUpdateOneRequiredWithoutSubjectsInput
}

input SubjectUpdateWithWhereUniqueWithoutBranchInput {
  where: SubjectWhereUniqueInput!
  data: SubjectUpdateWithoutBranchDataInput!
}

input SubjectUpdateWithWhereUniqueWithoutLessonInput {
  where: SubjectWhereUniqueInput!
  data: SubjectUpdateWithoutLessonDataInput!
}

input SubjectUpsertWithWhereUniqueWithoutBranchInput {
  where: SubjectWhereUniqueInput!
  update: SubjectUpdateWithoutBranchDataInput!
  create: SubjectCreateWithoutBranchInput!
}

input SubjectUpsertWithWhereUniqueWithoutLessonInput {
  where: SubjectWhereUniqueInput!
  update: SubjectUpdateWithoutLessonDataInput!
  create: SubjectCreateWithoutLessonInput!
}

input SubjectWhereInput {
  """Logical AND on all given filters."""
  AND: [SubjectWhereInput!]

  """Logical OR on all given filters."""
  OR: [SubjectWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SubjectWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  shortName: String

  """All values that are not equal to given value."""
  shortName_not: String

  """All values that are contained in given list."""
  shortName_in: [String!]

  """All values that are not contained in given list."""
  shortName_not_in: [String!]

  """All values less than the given value."""
  shortName_lt: String

  """All values less than or equal the given value."""
  shortName_lte: String

  """All values greater than the given value."""
  shortName_gt: String

  """All values greater than or equal the given value."""
  shortName_gte: String

  """All values containing the given string."""
  shortName_contains: String

  """All values not containing the given string."""
  shortName_not_contains: String

  """All values starting with the given string."""
  shortName_starts_with: String

  """All values not starting with the given string."""
  shortName_not_starts_with: String

  """All values ending with the given string."""
  shortName_ends_with: String

  """All values not ending with the given string."""
  shortName_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  branch: BranchWhereInput
  lesson: LessonWhereInput
}

input SubjectWhereUniqueInput {
  id: ID
  name: String
  shortName: String
}

type Subscription {
  adminRole(where: AdminRoleSubscriptionWhereInput): AdminRoleSubscriptionPayload
  socialLink(where: SocialLinkSubscriptionWhereInput): SocialLinkSubscriptionPayload
  socialNetwork(where: SocialNetworkSubscriptionWhereInput): SocialNetworkSubscriptionPayload
  officialDocument(where: OfficialDocumentSubscriptionWhereInput): OfficialDocumentSubscriptionPayload
  address(where: AddressSubscriptionWhereInput): AddressSubscriptionPayload
  device(where: DeviceSubscriptionWhereInput): DeviceSubscriptionPayload
  news(where: NewsSubscriptionWhereInput): NewsSubscriptionPayload
  event(where: EventSubscriptionWhereInput): EventSubscriptionPayload
  venue(where: VenueSubscriptionWhereInput): VenueSubscriptionPayload
  space(where: SpaceSubscriptionWhereInput): SpaceSubscriptionPayload
  department(where: DepartmentSubscriptionWhereInput): DepartmentSubscriptionPayload
  program(where: ProgramSubscriptionWhereInput): ProgramSubscriptionPayload
  branch(where: BranchSubscriptionWhereInput): BranchSubscriptionPayload
  subject(where: SubjectSubscriptionWhereInput): SubjectSubscriptionPayload
  lesson(where: LessonSubscriptionWhereInput): LessonSubscriptionPayload
  operatingPeriod(where: OperatingPeriodSubscriptionWhereInput): OperatingPeriodSubscriptionPayload
  session(where: SessionSubscriptionWhereInput): SessionSubscriptionPayload
  productCategory(where: ProductCategorySubscriptionWhereInput): ProductCategorySubscriptionPayload
  product(where: ProductSubscriptionWhereInput): ProductSubscriptionPayload
  discountRequest(where: DiscountRequestSubscriptionWhereInput): DiscountRequestSubscriptionPayload
  transaction(where: TransactionSubscriptionWhereInput): TransactionSubscriptionPayload
  order(where: OrderSubscriptionWhereInput): OrderSubscriptionPayload
  item(where: ItemSubscriptionWhereInput): ItemSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  discount(where: DiscountSubscriptionWhereInput): DiscountSubscriptionPayload
}

type Transaction implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  type: TxType!
  reference: String
  order: Order
  amount: Float!
}

"""A connection to a list of items."""
type TransactionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TransactionEdge]!
  aggregate: AggregateTransaction!
}

input TransactionCreateInput {
  id: ID
  type: TxType
  reference: String
  amount: Float!
  order: OrderCreateOneWithoutTransactionsInput
}

input TransactionCreateManyWithoutOrderInput {
  create: [TransactionCreateWithoutOrderInput!]
  connect: [TransactionWhereUniqueInput!]
}

input TransactionCreateWithoutOrderInput {
  id: ID
  type: TxType
  reference: String
  amount: Float!
}

"""An edge in a connection."""
type TransactionEdge {
  """The item at the end of the edge."""
  node: Transaction!

  """A cursor for use in pagination."""
  cursor: String!
}

enum TransactionOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  type_ASC
  type_DESC
  reference_ASC
  reference_DESC
  amount_ASC
  amount_DESC
}

type TransactionPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  type: TxType!
  reference: String
  amount: Float!
}

input TransactionScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [TransactionScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [TransactionScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TransactionScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  type: TxType

  """All values that are not equal to given value."""
  type_not: TxType

  """All values that are contained in given list."""
  type_in: [TxType!]

  """All values that are not contained in given list."""
  type_not_in: [TxType!]
  reference: String

  """All values that are not equal to given value."""
  reference_not: String

  """All values that are contained in given list."""
  reference_in: [String!]

  """All values that are not contained in given list."""
  reference_not_in: [String!]

  """All values less than the given value."""
  reference_lt: String

  """All values less than or equal the given value."""
  reference_lte: String

  """All values greater than the given value."""
  reference_gt: String

  """All values greater than or equal the given value."""
  reference_gte: String

  """All values containing the given string."""
  reference_contains: String

  """All values not containing the given string."""
  reference_not_contains: String

  """All values starting with the given string."""
  reference_starts_with: String

  """All values not starting with the given string."""
  reference_not_starts_with: String

  """All values ending with the given string."""
  reference_ends_with: String

  """All values not ending with the given string."""
  reference_not_ends_with: String
  amount: Float

  """All values that are not equal to given value."""
  amount_not: Float

  """All values that are contained in given list."""
  amount_in: [Float!]

  """All values that are not contained in given list."""
  amount_not_in: [Float!]

  """All values less than the given value."""
  amount_lt: Float

  """All values less than or equal the given value."""
  amount_lte: Float

  """All values greater than the given value."""
  amount_gt: Float

  """All values greater than or equal the given value."""
  amount_gte: Float
}

type TransactionSubscriptionPayload {
  mutation: MutationType!
  node: Transaction
  updatedFields: [String!]
  previousValues: TransactionPreviousValues
}

input TransactionSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [TransactionSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [TransactionSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TransactionSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TransactionWhereInput
}

input TransactionUpdateInput {
  type: TxType
  reference: String
  amount: Float
  order: OrderUpdateOneWithoutTransactionsInput
}

input TransactionUpdateManyDataInput {
  type: TxType
  reference: String
  amount: Float
}

input TransactionUpdateManyMutationInput {
  type: TxType
  reference: String
  amount: Float
}

input TransactionUpdateManyWithoutOrderInput {
  create: [TransactionCreateWithoutOrderInput!]
  connect: [TransactionWhereUniqueInput!]
  set: [TransactionWhereUniqueInput!]
  disconnect: [TransactionWhereUniqueInput!]
  delete: [TransactionWhereUniqueInput!]
  update: [TransactionUpdateWithWhereUniqueWithoutOrderInput!]
  updateMany: [TransactionUpdateManyWithWhereNestedInput!]
  deleteMany: [TransactionScalarWhereInput!]
  upsert: [TransactionUpsertWithWhereUniqueWithoutOrderInput!]
}

input TransactionUpdateManyWithWhereNestedInput {
  where: TransactionScalarWhereInput!
  data: TransactionUpdateManyDataInput!
}

input TransactionUpdateWithoutOrderDataInput {
  type: TxType
  reference: String
  amount: Float
}

input TransactionUpdateWithWhereUniqueWithoutOrderInput {
  where: TransactionWhereUniqueInput!
  data: TransactionUpdateWithoutOrderDataInput!
}

input TransactionUpsertWithWhereUniqueWithoutOrderInput {
  where: TransactionWhereUniqueInput!
  update: TransactionUpdateWithoutOrderDataInput!
  create: TransactionCreateWithoutOrderInput!
}

input TransactionWhereInput {
  """Logical AND on all given filters."""
  AND: [TransactionWhereInput!]

  """Logical OR on all given filters."""
  OR: [TransactionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TransactionWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  type: TxType

  """All values that are not equal to given value."""
  type_not: TxType

  """All values that are contained in given list."""
  type_in: [TxType!]

  """All values that are not contained in given list."""
  type_not_in: [TxType!]
  reference: String

  """All values that are not equal to given value."""
  reference_not: String

  """All values that are contained in given list."""
  reference_in: [String!]

  """All values that are not contained in given list."""
  reference_not_in: [String!]

  """All values less than the given value."""
  reference_lt: String

  """All values less than or equal the given value."""
  reference_lte: String

  """All values greater than the given value."""
  reference_gt: String

  """All values greater than or equal the given value."""
  reference_gte: String

  """All values containing the given string."""
  reference_contains: String

  """All values not containing the given string."""
  reference_not_contains: String

  """All values starting with the given string."""
  reference_starts_with: String

  """All values not starting with the given string."""
  reference_not_starts_with: String

  """All values ending with the given string."""
  reference_ends_with: String

  """All values not ending with the given string."""
  reference_not_ends_with: String
  amount: Float

  """All values that are not equal to given value."""
  amount_not: Float

  """All values that are contained in given list."""
  amount_in: [Float!]

  """All values that are not contained in given list."""
  amount_not_in: [Float!]

  """All values less than the given value."""
  amount_lt: Float

  """All values less than or equal the given value."""
  amount_lte: Float

  """All values greater than the given value."""
  amount_gt: Float

  """All values greater than or equal the given value."""
  amount_gte: Float
  order: OrderWhereInput
}

input TransactionWhereUniqueInput {
  id: ID
}

enum TxType {
  SALE
  PURCHASE
  RECEIPT
  PAYMENT
}

type User implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  lastname: String!
  email: String!
  emailVerified: Boolean!
  password: String!
  group: UserGroup!
  groupRequest: UserGroup
  isAdmin: Boolean!
  adminRole: AdminRole
  avatar: String
  addresses(where: AddressWhereInput, orderBy: AddressOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Address!]
  devices(where: DeviceWhereInput, orderBy: DeviceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Device!]
  officialDocuments(where: OfficialDocumentWhereInput, orderBy: OfficialDocumentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [OfficialDocument!]
  socialNetworkLinks(where: SocialLinkWhereInput, orderBy: SocialLinkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SocialLink!]
  metadata: Json
  department: Department
  newses(where: NewsWhereInput, orderBy: NewsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [News!]
  events(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Event!]
  lessonsManaged(where: LessonWhereInput, orderBy: LessonOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Lesson!]
  availableLessons(where: LessonWhereInput, orderBy: LessonOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Lesson!]
  teachedSessions(where: SessionWhereInput, orderBy: SessionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Session!]
  discountRequests(where: DiscountRequestWhereInput, orderBy: DiscountRequestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [DiscountRequest!]
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String!
  lastname: String!
  email: String!
  emailVerified: Boolean
  password: String!
  group: UserGroup
  groupRequest: UserGroup
  isAdmin: Boolean
  avatar: String
  metadata: Json
  adminRole: AdminRoleCreateOneWithoutAdminsInput
  addresses: AddressCreateManyWithoutOwnerInput
  devices: DeviceCreateManyWithoutOwnerInput
  officialDocuments: OfficialDocumentCreateManyWithoutOwnerInput
  socialNetworkLinks: SocialLinkCreateManyWithoutOwnerInput
  department: DepartmentCreateOneWithoutMembersInput
  newses: NewsCreateManyWithoutAuthorInput
  events: EventCreateManyWithoutAuthorInput
  lessonsManaged: LessonCreateManyWithoutManagerInput
  availableLessons: LessonCreateManyWithoutAvailableTeachersInput
  teachedSessions: SessionCreateManyWithoutByInput
  discountRequests: DiscountRequestCreateManyWithoutUserInput
}

input UserCreateManyWithoutAdminRoleInput {
  create: [UserCreateWithoutAdminRoleInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutAvailableLessonsInput {
  create: [UserCreateWithoutAvailableLessonsInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutDepartmentInput {
  create: [UserCreateWithoutDepartmentInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutAddressesInput {
  create: UserCreateWithoutAddressesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutDevicesInput {
  create: UserCreateWithoutDevicesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutDiscountRequestsInput {
  create: UserCreateWithoutDiscountRequestsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutEventsInput {
  create: UserCreateWithoutEventsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutLessonsManagedInput {
  create: UserCreateWithoutLessonsManagedInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutNewsesInput {
  create: UserCreateWithoutNewsesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutOfficialDocumentsInput {
  create: UserCreateWithoutOfficialDocumentsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutSocialNetworkLinksInput {
  create: UserCreateWithoutSocialNetworkLinksInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutTeachedSessionsInput {
  create: UserCreateWithoutTeachedSessionsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutAddressesInput {
  id: ID
  name: String!
  lastname: String!
  email: String!
  emailVerified: Boolean
  password: String!
  group: UserGroup
  groupRequest: UserGroup
  isAdmin: Boolean
  avatar: String
  metadata: Json
  adminRole: AdminRoleCreateOneWithoutAdminsInput
  devices: DeviceCreateManyWithoutOwnerInput
  officialDocuments: OfficialDocumentCreateManyWithoutOwnerInput
  socialNetworkLinks: SocialLinkCreateManyWithoutOwnerInput
  department: DepartmentCreateOneWithoutMembersInput
  newses: NewsCreateManyWithoutAuthorInput
  events: EventCreateManyWithoutAuthorInput
  lessonsManaged: LessonCreateManyWithoutManagerInput
  availableLessons: LessonCreateManyWithoutAvailableTeachersInput
  teachedSessions: SessionCreateManyWithoutByInput
  discountRequests: DiscountRequestCreateManyWithoutUserInput
}

input UserCreateWithoutAdminRoleInput {
  id: ID
  name: String!
  lastname: String!
  email: String!
  emailVerified: Boolean
  password: String!
  group: UserGroup
  groupRequest: UserGroup
  isAdmin: Boolean
  avatar: String
  metadata: Json
  addresses: AddressCreateManyWithoutOwnerInput
  devices: DeviceCreateManyWithoutOwnerInput
  officialDocuments: OfficialDocumentCreateManyWithoutOwnerInput
  socialNetworkLinks: SocialLinkCreateManyWithoutOwnerInput
  department: DepartmentCreateOneWithoutMembersInput
  newses: NewsCreateManyWithoutAuthorInput
  events: EventCreateManyWithoutAuthorInput
  lessonsManaged: LessonCreateManyWithoutManagerInput
  availableLessons: LessonCreateManyWithoutAvailableTeachersInput
  teachedSessions: SessionCreateManyWithoutByInput
  discountRequests: DiscountRequestCreateManyWithoutUserInput
}

input UserCreateWithoutAvailableLessonsInput {
  id: ID
  name: String!
  lastname: String!
  email: String!
  emailVerified: Boolean
  password: String!
  group: UserGroup
  groupRequest: UserGroup
  isAdmin: Boolean
  avatar: String
  metadata: Json
  adminRole: AdminRoleCreateOneWithoutAdminsInput
  addresses: AddressCreateManyWithoutOwnerInput
  devices: DeviceCreateManyWithoutOwnerInput
  officialDocuments: OfficialDocumentCreateManyWithoutOwnerInput
  socialNetworkLinks: SocialLinkCreateManyWithoutOwnerInput
  department: DepartmentCreateOneWithoutMembersInput
  newses: NewsCreateManyWithoutAuthorInput
  events: EventCreateManyWithoutAuthorInput
  lessonsManaged: LessonCreateManyWithoutManagerInput
  teachedSessions: SessionCreateManyWithoutByInput
  discountRequests: DiscountRequestCreateManyWithoutUserInput
}

input UserCreateWithoutDepartmentInput {
  id: ID
  name: String!
  lastname: String!
  email: String!
  emailVerified: Boolean
  password: String!
  group: UserGroup
  groupRequest: UserGroup
  isAdmin: Boolean
  avatar: String
  metadata: Json
  adminRole: AdminRoleCreateOneWithoutAdminsInput
  addresses: AddressCreateManyWithoutOwnerInput
  devices: DeviceCreateManyWithoutOwnerInput
  officialDocuments: OfficialDocumentCreateManyWithoutOwnerInput
  socialNetworkLinks: SocialLinkCreateManyWithoutOwnerInput
  newses: NewsCreateManyWithoutAuthorInput
  events: EventCreateManyWithoutAuthorInput
  lessonsManaged: LessonCreateManyWithoutManagerInput
  availableLessons: LessonCreateManyWithoutAvailableTeachersInput
  teachedSessions: SessionCreateManyWithoutByInput
  discountRequests: DiscountRequestCreateManyWithoutUserInput
}

input UserCreateWithoutDevicesInput {
  id: ID
  name: String!
  lastname: String!
  email: String!
  emailVerified: Boolean
  password: String!
  group: UserGroup
  groupRequest: UserGroup
  isAdmin: Boolean
  avatar: String
  metadata: Json
  adminRole: AdminRoleCreateOneWithoutAdminsInput
  addresses: AddressCreateManyWithoutOwnerInput
  officialDocuments: OfficialDocumentCreateManyWithoutOwnerInput
  socialNetworkLinks: SocialLinkCreateManyWithoutOwnerInput
  department: DepartmentCreateOneWithoutMembersInput
  newses: NewsCreateManyWithoutAuthorInput
  events: EventCreateManyWithoutAuthorInput
  lessonsManaged: LessonCreateManyWithoutManagerInput
  availableLessons: LessonCreateManyWithoutAvailableTeachersInput
  teachedSessions: SessionCreateManyWithoutByInput
  discountRequests: DiscountRequestCreateManyWithoutUserInput
}

input UserCreateWithoutDiscountRequestsInput {
  id: ID
  name: String!
  lastname: String!
  email: String!
  emailVerified: Boolean
  password: String!
  group: UserGroup
  groupRequest: UserGroup
  isAdmin: Boolean
  avatar: String
  metadata: Json
  adminRole: AdminRoleCreateOneWithoutAdminsInput
  addresses: AddressCreateManyWithoutOwnerInput
  devices: DeviceCreateManyWithoutOwnerInput
  officialDocuments: OfficialDocumentCreateManyWithoutOwnerInput
  socialNetworkLinks: SocialLinkCreateManyWithoutOwnerInput
  department: DepartmentCreateOneWithoutMembersInput
  newses: NewsCreateManyWithoutAuthorInput
  events: EventCreateManyWithoutAuthorInput
  lessonsManaged: LessonCreateManyWithoutManagerInput
  availableLessons: LessonCreateManyWithoutAvailableTeachersInput
  teachedSessions: SessionCreateManyWithoutByInput
}

input UserCreateWithoutEventsInput {
  id: ID
  name: String!
  lastname: String!
  email: String!
  emailVerified: Boolean
  password: String!
  group: UserGroup
  groupRequest: UserGroup
  isAdmin: Boolean
  avatar: String
  metadata: Json
  adminRole: AdminRoleCreateOneWithoutAdminsInput
  addresses: AddressCreateManyWithoutOwnerInput
  devices: DeviceCreateManyWithoutOwnerInput
  officialDocuments: OfficialDocumentCreateManyWithoutOwnerInput
  socialNetworkLinks: SocialLinkCreateManyWithoutOwnerInput
  department: DepartmentCreateOneWithoutMembersInput
  newses: NewsCreateManyWithoutAuthorInput
  lessonsManaged: LessonCreateManyWithoutManagerInput
  availableLessons: LessonCreateManyWithoutAvailableTeachersInput
  teachedSessions: SessionCreateManyWithoutByInput
  discountRequests: DiscountRequestCreateManyWithoutUserInput
}

input UserCreateWithoutLessonsManagedInput {
  id: ID
  name: String!
  lastname: String!
  email: String!
  emailVerified: Boolean
  password: String!
  group: UserGroup
  groupRequest: UserGroup
  isAdmin: Boolean
  avatar: String
  metadata: Json
  adminRole: AdminRoleCreateOneWithoutAdminsInput
  addresses: AddressCreateManyWithoutOwnerInput
  devices: DeviceCreateManyWithoutOwnerInput
  officialDocuments: OfficialDocumentCreateManyWithoutOwnerInput
  socialNetworkLinks: SocialLinkCreateManyWithoutOwnerInput
  department: DepartmentCreateOneWithoutMembersInput
  newses: NewsCreateManyWithoutAuthorInput
  events: EventCreateManyWithoutAuthorInput
  availableLessons: LessonCreateManyWithoutAvailableTeachersInput
  teachedSessions: SessionCreateManyWithoutByInput
  discountRequests: DiscountRequestCreateManyWithoutUserInput
}

input UserCreateWithoutNewsesInput {
  id: ID
  name: String!
  lastname: String!
  email: String!
  emailVerified: Boolean
  password: String!
  group: UserGroup
  groupRequest: UserGroup
  isAdmin: Boolean
  avatar: String
  metadata: Json
  adminRole: AdminRoleCreateOneWithoutAdminsInput
  addresses: AddressCreateManyWithoutOwnerInput
  devices: DeviceCreateManyWithoutOwnerInput
  officialDocuments: OfficialDocumentCreateManyWithoutOwnerInput
  socialNetworkLinks: SocialLinkCreateManyWithoutOwnerInput
  department: DepartmentCreateOneWithoutMembersInput
  events: EventCreateManyWithoutAuthorInput
  lessonsManaged: LessonCreateManyWithoutManagerInput
  availableLessons: LessonCreateManyWithoutAvailableTeachersInput
  teachedSessions: SessionCreateManyWithoutByInput
  discountRequests: DiscountRequestCreateManyWithoutUserInput
}

input UserCreateWithoutOfficialDocumentsInput {
  id: ID
  name: String!
  lastname: String!
  email: String!
  emailVerified: Boolean
  password: String!
  group: UserGroup
  groupRequest: UserGroup
  isAdmin: Boolean
  avatar: String
  metadata: Json
  adminRole: AdminRoleCreateOneWithoutAdminsInput
  addresses: AddressCreateManyWithoutOwnerInput
  devices: DeviceCreateManyWithoutOwnerInput
  socialNetworkLinks: SocialLinkCreateManyWithoutOwnerInput
  department: DepartmentCreateOneWithoutMembersInput
  newses: NewsCreateManyWithoutAuthorInput
  events: EventCreateManyWithoutAuthorInput
  lessonsManaged: LessonCreateManyWithoutManagerInput
  availableLessons: LessonCreateManyWithoutAvailableTeachersInput
  teachedSessions: SessionCreateManyWithoutByInput
  discountRequests: DiscountRequestCreateManyWithoutUserInput
}

input UserCreateWithoutSocialNetworkLinksInput {
  id: ID
  name: String!
  lastname: String!
  email: String!
  emailVerified: Boolean
  password: String!
  group: UserGroup
  groupRequest: UserGroup
  isAdmin: Boolean
  avatar: String
  metadata: Json
  adminRole: AdminRoleCreateOneWithoutAdminsInput
  addresses: AddressCreateManyWithoutOwnerInput
  devices: DeviceCreateManyWithoutOwnerInput
  officialDocuments: OfficialDocumentCreateManyWithoutOwnerInput
  department: DepartmentCreateOneWithoutMembersInput
  newses: NewsCreateManyWithoutAuthorInput
  events: EventCreateManyWithoutAuthorInput
  lessonsManaged: LessonCreateManyWithoutManagerInput
  availableLessons: LessonCreateManyWithoutAvailableTeachersInput
  teachedSessions: SessionCreateManyWithoutByInput
  discountRequests: DiscountRequestCreateManyWithoutUserInput
}

input UserCreateWithoutTeachedSessionsInput {
  id: ID
  name: String!
  lastname: String!
  email: String!
  emailVerified: Boolean
  password: String!
  group: UserGroup
  groupRequest: UserGroup
  isAdmin: Boolean
  avatar: String
  metadata: Json
  adminRole: AdminRoleCreateOneWithoutAdminsInput
  addresses: AddressCreateManyWithoutOwnerInput
  devices: DeviceCreateManyWithoutOwnerInput
  officialDocuments: OfficialDocumentCreateManyWithoutOwnerInput
  socialNetworkLinks: SocialLinkCreateManyWithoutOwnerInput
  department: DepartmentCreateOneWithoutMembersInput
  newses: NewsCreateManyWithoutAuthorInput
  events: EventCreateManyWithoutAuthorInput
  lessonsManaged: LessonCreateManyWithoutManagerInput
  availableLessons: LessonCreateManyWithoutAvailableTeachersInput
  discountRequests: DiscountRequestCreateManyWithoutUserInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserGroup {
  STUDENT
  STAFF
  PUBLIC
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
  lastname_ASC
  lastname_DESC
  email_ASC
  email_DESC
  emailVerified_ASC
  emailVerified_DESC
  password_ASC
  password_DESC
  group_ASC
  group_DESC
  groupRequest_ASC
  groupRequest_DESC
  isAdmin_ASC
  isAdmin_DESC
  avatar_ASC
  avatar_DESC
  metadata_ASC
  metadata_DESC
}

type UserPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  lastname: String!
  email: String!
  emailVerified: Boolean!
  password: String!
  group: UserGroup!
  groupRequest: UserGroup
  isAdmin: Boolean!
  avatar: String
  metadata: Json
}

input UserScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [UserScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  lastname: String

  """All values that are not equal to given value."""
  lastname_not: String

  """All values that are contained in given list."""
  lastname_in: [String!]

  """All values that are not contained in given list."""
  lastname_not_in: [String!]

  """All values less than the given value."""
  lastname_lt: String

  """All values less than or equal the given value."""
  lastname_lte: String

  """All values greater than the given value."""
  lastname_gt: String

  """All values greater than or equal the given value."""
  lastname_gte: String

  """All values containing the given string."""
  lastname_contains: String

  """All values not containing the given string."""
  lastname_not_contains: String

  """All values starting with the given string."""
  lastname_starts_with: String

  """All values not starting with the given string."""
  lastname_not_starts_with: String

  """All values ending with the given string."""
  lastname_ends_with: String

  """All values not ending with the given string."""
  lastname_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  emailVerified: Boolean

  """All values that are not equal to given value."""
  emailVerified_not: Boolean
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  group: UserGroup

  """All values that are not equal to given value."""
  group_not: UserGroup

  """All values that are contained in given list."""
  group_in: [UserGroup!]

  """All values that are not contained in given list."""
  group_not_in: [UserGroup!]
  groupRequest: UserGroup

  """All values that are not equal to given value."""
  groupRequest_not: UserGroup

  """All values that are contained in given list."""
  groupRequest_in: [UserGroup!]

  """All values that are not contained in given list."""
  groupRequest_not_in: [UserGroup!]
  isAdmin: Boolean

  """All values that are not equal to given value."""
  isAdmin_not: Boolean
  avatar: String

  """All values that are not equal to given value."""
  avatar_not: String

  """All values that are contained in given list."""
  avatar_in: [String!]

  """All values that are not contained in given list."""
  avatar_not_in: [String!]

  """All values less than the given value."""
  avatar_lt: String

  """All values less than or equal the given value."""
  avatar_lte: String

  """All values greater than the given value."""
  avatar_gt: String

  """All values greater than or equal the given value."""
  avatar_gte: String

  """All values containing the given string."""
  avatar_contains: String

  """All values not containing the given string."""
  avatar_not_contains: String

  """All values starting with the given string."""
  avatar_starts_with: String

  """All values not starting with the given string."""
  avatar_not_starts_with: String

  """All values ending with the given string."""
  avatar_ends_with: String

  """All values not ending with the given string."""
  avatar_not_ends_with: String
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateDataInput {
  name: String
  lastname: String
  email: String
  emailVerified: Boolean
  password: String
  group: UserGroup
  groupRequest: UserGroup
  isAdmin: Boolean
  avatar: String
  metadata: Json
  adminRole: AdminRoleUpdateOneWithoutAdminsInput
  addresses: AddressUpdateManyWithoutOwnerInput
  devices: DeviceUpdateManyWithoutOwnerInput
  officialDocuments: OfficialDocumentUpdateManyWithoutOwnerInput
  socialNetworkLinks: SocialLinkUpdateManyWithoutOwnerInput
  department: DepartmentUpdateOneWithoutMembersInput
  newses: NewsUpdateManyWithoutAuthorInput
  events: EventUpdateManyWithoutAuthorInput
  lessonsManaged: LessonUpdateManyWithoutManagerInput
  availableLessons: LessonUpdateManyWithoutAvailableTeachersInput
  teachedSessions: SessionUpdateManyWithoutByInput
  discountRequests: DiscountRequestUpdateManyWithoutUserInput
}

input UserUpdateInput {
  name: String
  lastname: String
  email: String
  emailVerified: Boolean
  password: String
  group: UserGroup
  groupRequest: UserGroup
  isAdmin: Boolean
  avatar: String
  metadata: Json
  adminRole: AdminRoleUpdateOneWithoutAdminsInput
  addresses: AddressUpdateManyWithoutOwnerInput
  devices: DeviceUpdateManyWithoutOwnerInput
  officialDocuments: OfficialDocumentUpdateManyWithoutOwnerInput
  socialNetworkLinks: SocialLinkUpdateManyWithoutOwnerInput
  department: DepartmentUpdateOneWithoutMembersInput
  newses: NewsUpdateManyWithoutAuthorInput
  events: EventUpdateManyWithoutAuthorInput
  lessonsManaged: LessonUpdateManyWithoutManagerInput
  availableLessons: LessonUpdateManyWithoutAvailableTeachersInput
  teachedSessions: SessionUpdateManyWithoutByInput
  discountRequests: DiscountRequestUpdateManyWithoutUserInput
}

input UserUpdateManyDataInput {
  name: String
  lastname: String
  email: String
  emailVerified: Boolean
  password: String
  group: UserGroup
  groupRequest: UserGroup
  isAdmin: Boolean
  avatar: String
  metadata: Json
}

input UserUpdateManyMutationInput {
  name: String
  lastname: String
  email: String
  emailVerified: Boolean
  password: String
  group: UserGroup
  groupRequest: UserGroup
  isAdmin: Boolean
  avatar: String
  metadata: Json
}

input UserUpdateManyWithoutAdminRoleInput {
  create: [UserCreateWithoutAdminRoleInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutAdminRoleInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  deleteMany: [UserScalarWhereInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutAdminRoleInput!]
}

input UserUpdateManyWithoutAvailableLessonsInput {
  create: [UserCreateWithoutAvailableLessonsInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutAvailableLessonsInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  deleteMany: [UserScalarWhereInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutAvailableLessonsInput!]
}

input UserUpdateManyWithoutDepartmentInput {
  create: [UserCreateWithoutDepartmentInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutDepartmentInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  deleteMany: [UserScalarWhereInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutDepartmentInput!]
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateOneRequiredInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
}

input UserUpdateOneRequiredWithoutDiscountRequestsInput {
  create: UserCreateWithoutDiscountRequestsInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutDiscountRequestsDataInput
  upsert: UserUpsertWithoutDiscountRequestsInput
}

input UserUpdateOneRequiredWithoutEventsInput {
  create: UserCreateWithoutEventsInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutEventsDataInput
  upsert: UserUpsertWithoutEventsInput
}

input UserUpdateOneRequiredWithoutLessonsManagedInput {
  create: UserCreateWithoutLessonsManagedInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutLessonsManagedDataInput
  upsert: UserUpsertWithoutLessonsManagedInput
}

input UserUpdateOneRequiredWithoutNewsesInput {
  create: UserCreateWithoutNewsesInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutNewsesDataInput
  upsert: UserUpsertWithoutNewsesInput
}

input UserUpdateOneRequiredWithoutOfficialDocumentsInput {
  create: UserCreateWithoutOfficialDocumentsInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutOfficialDocumentsDataInput
  upsert: UserUpsertWithoutOfficialDocumentsInput
}

input UserUpdateOneRequiredWithoutSocialNetworkLinksInput {
  create: UserCreateWithoutSocialNetworkLinksInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutSocialNetworkLinksDataInput
  upsert: UserUpsertWithoutSocialNetworkLinksInput
}

input UserUpdateOneRequiredWithoutTeachedSessionsInput {
  create: UserCreateWithoutTeachedSessionsInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutTeachedSessionsDataInput
  upsert: UserUpsertWithoutTeachedSessionsInput
}

input UserUpdateOneWithoutAddressesInput {
  create: UserCreateWithoutAddressesInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutAddressesDataInput
  upsert: UserUpsertWithoutAddressesInput
}

input UserUpdateOneWithoutDevicesInput {
  create: UserCreateWithoutDevicesInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutDevicesDataInput
  upsert: UserUpsertWithoutDevicesInput
}

input UserUpdateWithoutAddressesDataInput {
  name: String
  lastname: String
  email: String
  emailVerified: Boolean
  password: String
  group: UserGroup
  groupRequest: UserGroup
  isAdmin: Boolean
  avatar: String
  metadata: Json
  adminRole: AdminRoleUpdateOneWithoutAdminsInput
  devices: DeviceUpdateManyWithoutOwnerInput
  officialDocuments: OfficialDocumentUpdateManyWithoutOwnerInput
  socialNetworkLinks: SocialLinkUpdateManyWithoutOwnerInput
  department: DepartmentUpdateOneWithoutMembersInput
  newses: NewsUpdateManyWithoutAuthorInput
  events: EventUpdateManyWithoutAuthorInput
  lessonsManaged: LessonUpdateManyWithoutManagerInput
  availableLessons: LessonUpdateManyWithoutAvailableTeachersInput
  teachedSessions: SessionUpdateManyWithoutByInput
  discountRequests: DiscountRequestUpdateManyWithoutUserInput
}

input UserUpdateWithoutAdminRoleDataInput {
  name: String
  lastname: String
  email: String
  emailVerified: Boolean
  password: String
  group: UserGroup
  groupRequest: UserGroup
  isAdmin: Boolean
  avatar: String
  metadata: Json
  addresses: AddressUpdateManyWithoutOwnerInput
  devices: DeviceUpdateManyWithoutOwnerInput
  officialDocuments: OfficialDocumentUpdateManyWithoutOwnerInput
  socialNetworkLinks: SocialLinkUpdateManyWithoutOwnerInput
  department: DepartmentUpdateOneWithoutMembersInput
  newses: NewsUpdateManyWithoutAuthorInput
  events: EventUpdateManyWithoutAuthorInput
  lessonsManaged: LessonUpdateManyWithoutManagerInput
  availableLessons: LessonUpdateManyWithoutAvailableTeachersInput
  teachedSessions: SessionUpdateManyWithoutByInput
  discountRequests: DiscountRequestUpdateManyWithoutUserInput
}

input UserUpdateWithoutAvailableLessonsDataInput {
  name: String
  lastname: String
  email: String
  emailVerified: Boolean
  password: String
  group: UserGroup
  groupRequest: UserGroup
  isAdmin: Boolean
  avatar: String
  metadata: Json
  adminRole: AdminRoleUpdateOneWithoutAdminsInput
  addresses: AddressUpdateManyWithoutOwnerInput
  devices: DeviceUpdateManyWithoutOwnerInput
  officialDocuments: OfficialDocumentUpdateManyWithoutOwnerInput
  socialNetworkLinks: SocialLinkUpdateManyWithoutOwnerInput
  department: DepartmentUpdateOneWithoutMembersInput
  newses: NewsUpdateManyWithoutAuthorInput
  events: EventUpdateManyWithoutAuthorInput
  lessonsManaged: LessonUpdateManyWithoutManagerInput
  teachedSessions: SessionUpdateManyWithoutByInput
  discountRequests: DiscountRequestUpdateManyWithoutUserInput
}

input UserUpdateWithoutDepartmentDataInput {
  name: String
  lastname: String
  email: String
  emailVerified: Boolean
  password: String
  group: UserGroup
  groupRequest: UserGroup
  isAdmin: Boolean
  avatar: String
  metadata: Json
  adminRole: AdminRoleUpdateOneWithoutAdminsInput
  addresses: AddressUpdateManyWithoutOwnerInput
  devices: DeviceUpdateManyWithoutOwnerInput
  officialDocuments: OfficialDocumentUpdateManyWithoutOwnerInput
  socialNetworkLinks: SocialLinkUpdateManyWithoutOwnerInput
  newses: NewsUpdateManyWithoutAuthorInput
  events: EventUpdateManyWithoutAuthorInput
  lessonsManaged: LessonUpdateManyWithoutManagerInput
  availableLessons: LessonUpdateManyWithoutAvailableTeachersInput
  teachedSessions: SessionUpdateManyWithoutByInput
  discountRequests: DiscountRequestUpdateManyWithoutUserInput
}

input UserUpdateWithoutDevicesDataInput {
  name: String
  lastname: String
  email: String
  emailVerified: Boolean
  password: String
  group: UserGroup
  groupRequest: UserGroup
  isAdmin: Boolean
  avatar: String
  metadata: Json
  adminRole: AdminRoleUpdateOneWithoutAdminsInput
  addresses: AddressUpdateManyWithoutOwnerInput
  officialDocuments: OfficialDocumentUpdateManyWithoutOwnerInput
  socialNetworkLinks: SocialLinkUpdateManyWithoutOwnerInput
  department: DepartmentUpdateOneWithoutMembersInput
  newses: NewsUpdateManyWithoutAuthorInput
  events: EventUpdateManyWithoutAuthorInput
  lessonsManaged: LessonUpdateManyWithoutManagerInput
  availableLessons: LessonUpdateManyWithoutAvailableTeachersInput
  teachedSessions: SessionUpdateManyWithoutByInput
  discountRequests: DiscountRequestUpdateManyWithoutUserInput
}

input UserUpdateWithoutDiscountRequestsDataInput {
  name: String
  lastname: String
  email: String
  emailVerified: Boolean
  password: String
  group: UserGroup
  groupRequest: UserGroup
  isAdmin: Boolean
  avatar: String
  metadata: Json
  adminRole: AdminRoleUpdateOneWithoutAdminsInput
  addresses: AddressUpdateManyWithoutOwnerInput
  devices: DeviceUpdateManyWithoutOwnerInput
  officialDocuments: OfficialDocumentUpdateManyWithoutOwnerInput
  socialNetworkLinks: SocialLinkUpdateManyWithoutOwnerInput
  department: DepartmentUpdateOneWithoutMembersInput
  newses: NewsUpdateManyWithoutAuthorInput
  events: EventUpdateManyWithoutAuthorInput
  lessonsManaged: LessonUpdateManyWithoutManagerInput
  availableLessons: LessonUpdateManyWithoutAvailableTeachersInput
  teachedSessions: SessionUpdateManyWithoutByInput
}

input UserUpdateWithoutEventsDataInput {
  name: String
  lastname: String
  email: String
  emailVerified: Boolean
  password: String
  group: UserGroup
  groupRequest: UserGroup
  isAdmin: Boolean
  avatar: String
  metadata: Json
  adminRole: AdminRoleUpdateOneWithoutAdminsInput
  addresses: AddressUpdateManyWithoutOwnerInput
  devices: DeviceUpdateManyWithoutOwnerInput
  officialDocuments: OfficialDocumentUpdateManyWithoutOwnerInput
  socialNetworkLinks: SocialLinkUpdateManyWithoutOwnerInput
  department: DepartmentUpdateOneWithoutMembersInput
  newses: NewsUpdateManyWithoutAuthorInput
  lessonsManaged: LessonUpdateManyWithoutManagerInput
  availableLessons: LessonUpdateManyWithoutAvailableTeachersInput
  teachedSessions: SessionUpdateManyWithoutByInput
  discountRequests: DiscountRequestUpdateManyWithoutUserInput
}

input UserUpdateWithoutLessonsManagedDataInput {
  name: String
  lastname: String
  email: String
  emailVerified: Boolean
  password: String
  group: UserGroup
  groupRequest: UserGroup
  isAdmin: Boolean
  avatar: String
  metadata: Json
  adminRole: AdminRoleUpdateOneWithoutAdminsInput
  addresses: AddressUpdateManyWithoutOwnerInput
  devices: DeviceUpdateManyWithoutOwnerInput
  officialDocuments: OfficialDocumentUpdateManyWithoutOwnerInput
  socialNetworkLinks: SocialLinkUpdateManyWithoutOwnerInput
  department: DepartmentUpdateOneWithoutMembersInput
  newses: NewsUpdateManyWithoutAuthorInput
  events: EventUpdateManyWithoutAuthorInput
  availableLessons: LessonUpdateManyWithoutAvailableTeachersInput
  teachedSessions: SessionUpdateManyWithoutByInput
  discountRequests: DiscountRequestUpdateManyWithoutUserInput
}

input UserUpdateWithoutNewsesDataInput {
  name: String
  lastname: String
  email: String
  emailVerified: Boolean
  password: String
  group: UserGroup
  groupRequest: UserGroup
  isAdmin: Boolean
  avatar: String
  metadata: Json
  adminRole: AdminRoleUpdateOneWithoutAdminsInput
  addresses: AddressUpdateManyWithoutOwnerInput
  devices: DeviceUpdateManyWithoutOwnerInput
  officialDocuments: OfficialDocumentUpdateManyWithoutOwnerInput
  socialNetworkLinks: SocialLinkUpdateManyWithoutOwnerInput
  department: DepartmentUpdateOneWithoutMembersInput
  events: EventUpdateManyWithoutAuthorInput
  lessonsManaged: LessonUpdateManyWithoutManagerInput
  availableLessons: LessonUpdateManyWithoutAvailableTeachersInput
  teachedSessions: SessionUpdateManyWithoutByInput
  discountRequests: DiscountRequestUpdateManyWithoutUserInput
}

input UserUpdateWithoutOfficialDocumentsDataInput {
  name: String
  lastname: String
  email: String
  emailVerified: Boolean
  password: String
  group: UserGroup
  groupRequest: UserGroup
  isAdmin: Boolean
  avatar: String
  metadata: Json
  adminRole: AdminRoleUpdateOneWithoutAdminsInput
  addresses: AddressUpdateManyWithoutOwnerInput
  devices: DeviceUpdateManyWithoutOwnerInput
  socialNetworkLinks: SocialLinkUpdateManyWithoutOwnerInput
  department: DepartmentUpdateOneWithoutMembersInput
  newses: NewsUpdateManyWithoutAuthorInput
  events: EventUpdateManyWithoutAuthorInput
  lessonsManaged: LessonUpdateManyWithoutManagerInput
  availableLessons: LessonUpdateManyWithoutAvailableTeachersInput
  teachedSessions: SessionUpdateManyWithoutByInput
  discountRequests: DiscountRequestUpdateManyWithoutUserInput
}

input UserUpdateWithoutSocialNetworkLinksDataInput {
  name: String
  lastname: String
  email: String
  emailVerified: Boolean
  password: String
  group: UserGroup
  groupRequest: UserGroup
  isAdmin: Boolean
  avatar: String
  metadata: Json
  adminRole: AdminRoleUpdateOneWithoutAdminsInput
  addresses: AddressUpdateManyWithoutOwnerInput
  devices: DeviceUpdateManyWithoutOwnerInput
  officialDocuments: OfficialDocumentUpdateManyWithoutOwnerInput
  department: DepartmentUpdateOneWithoutMembersInput
  newses: NewsUpdateManyWithoutAuthorInput
  events: EventUpdateManyWithoutAuthorInput
  lessonsManaged: LessonUpdateManyWithoutManagerInput
  availableLessons: LessonUpdateManyWithoutAvailableTeachersInput
  teachedSessions: SessionUpdateManyWithoutByInput
  discountRequests: DiscountRequestUpdateManyWithoutUserInput
}

input UserUpdateWithoutTeachedSessionsDataInput {
  name: String
  lastname: String
  email: String
  emailVerified: Boolean
  password: String
  group: UserGroup
  groupRequest: UserGroup
  isAdmin: Boolean
  avatar: String
  metadata: Json
  adminRole: AdminRoleUpdateOneWithoutAdminsInput
  addresses: AddressUpdateManyWithoutOwnerInput
  devices: DeviceUpdateManyWithoutOwnerInput
  officialDocuments: OfficialDocumentUpdateManyWithoutOwnerInput
  socialNetworkLinks: SocialLinkUpdateManyWithoutOwnerInput
  department: DepartmentUpdateOneWithoutMembersInput
  newses: NewsUpdateManyWithoutAuthorInput
  events: EventUpdateManyWithoutAuthorInput
  lessonsManaged: LessonUpdateManyWithoutManagerInput
  availableLessons: LessonUpdateManyWithoutAvailableTeachersInput
  discountRequests: DiscountRequestUpdateManyWithoutUserInput
}

input UserUpdateWithWhereUniqueWithoutAdminRoleInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutAdminRoleDataInput!
}

input UserUpdateWithWhereUniqueWithoutAvailableLessonsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutAvailableLessonsDataInput!
}

input UserUpdateWithWhereUniqueWithoutDepartmentInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutDepartmentDataInput!
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithoutAddressesInput {
  update: UserUpdateWithoutAddressesDataInput!
  create: UserCreateWithoutAddressesInput!
}

input UserUpsertWithoutDevicesInput {
  update: UserUpdateWithoutDevicesDataInput!
  create: UserCreateWithoutDevicesInput!
}

input UserUpsertWithoutDiscountRequestsInput {
  update: UserUpdateWithoutDiscountRequestsDataInput!
  create: UserCreateWithoutDiscountRequestsInput!
}

input UserUpsertWithoutEventsInput {
  update: UserUpdateWithoutEventsDataInput!
  create: UserCreateWithoutEventsInput!
}

input UserUpsertWithoutLessonsManagedInput {
  update: UserUpdateWithoutLessonsManagedDataInput!
  create: UserCreateWithoutLessonsManagedInput!
}

input UserUpsertWithoutNewsesInput {
  update: UserUpdateWithoutNewsesDataInput!
  create: UserCreateWithoutNewsesInput!
}

input UserUpsertWithoutOfficialDocumentsInput {
  update: UserUpdateWithoutOfficialDocumentsDataInput!
  create: UserCreateWithoutOfficialDocumentsInput!
}

input UserUpsertWithoutSocialNetworkLinksInput {
  update: UserUpdateWithoutSocialNetworkLinksDataInput!
  create: UserCreateWithoutSocialNetworkLinksInput!
}

input UserUpsertWithoutTeachedSessionsInput {
  update: UserUpdateWithoutTeachedSessionsDataInput!
  create: UserCreateWithoutTeachedSessionsInput!
}

input UserUpsertWithWhereUniqueWithoutAdminRoleInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutAdminRoleDataInput!
  create: UserCreateWithoutAdminRoleInput!
}

input UserUpsertWithWhereUniqueWithoutAvailableLessonsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutAvailableLessonsDataInput!
  create: UserCreateWithoutAvailableLessonsInput!
}

input UserUpsertWithWhereUniqueWithoutDepartmentInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutDepartmentDataInput!
  create: UserCreateWithoutDepartmentInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  lastname: String

  """All values that are not equal to given value."""
  lastname_not: String

  """All values that are contained in given list."""
  lastname_in: [String!]

  """All values that are not contained in given list."""
  lastname_not_in: [String!]

  """All values less than the given value."""
  lastname_lt: String

  """All values less than or equal the given value."""
  lastname_lte: String

  """All values greater than the given value."""
  lastname_gt: String

  """All values greater than or equal the given value."""
  lastname_gte: String

  """All values containing the given string."""
  lastname_contains: String

  """All values not containing the given string."""
  lastname_not_contains: String

  """All values starting with the given string."""
  lastname_starts_with: String

  """All values not starting with the given string."""
  lastname_not_starts_with: String

  """All values ending with the given string."""
  lastname_ends_with: String

  """All values not ending with the given string."""
  lastname_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  emailVerified: Boolean

  """All values that are not equal to given value."""
  emailVerified_not: Boolean
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  group: UserGroup

  """All values that are not equal to given value."""
  group_not: UserGroup

  """All values that are contained in given list."""
  group_in: [UserGroup!]

  """All values that are not contained in given list."""
  group_not_in: [UserGroup!]
  groupRequest: UserGroup

  """All values that are not equal to given value."""
  groupRequest_not: UserGroup

  """All values that are contained in given list."""
  groupRequest_in: [UserGroup!]

  """All values that are not contained in given list."""
  groupRequest_not_in: [UserGroup!]
  isAdmin: Boolean

  """All values that are not equal to given value."""
  isAdmin_not: Boolean
  avatar: String

  """All values that are not equal to given value."""
  avatar_not: String

  """All values that are contained in given list."""
  avatar_in: [String!]

  """All values that are not contained in given list."""
  avatar_not_in: [String!]

  """All values less than the given value."""
  avatar_lt: String

  """All values less than or equal the given value."""
  avatar_lte: String

  """All values greater than the given value."""
  avatar_gt: String

  """All values greater than or equal the given value."""
  avatar_gte: String

  """All values containing the given string."""
  avatar_contains: String

  """All values not containing the given string."""
  avatar_not_contains: String

  """All values starting with the given string."""
  avatar_starts_with: String

  """All values not starting with the given string."""
  avatar_not_starts_with: String

  """All values ending with the given string."""
  avatar_ends_with: String

  """All values not ending with the given string."""
  avatar_not_ends_with: String
  adminRole: AdminRoleWhereInput
  addresses_every: AddressWhereInput
  addresses_some: AddressWhereInput
  addresses_none: AddressWhereInput
  devices_every: DeviceWhereInput
  devices_some: DeviceWhereInput
  devices_none: DeviceWhereInput
  officialDocuments_every: OfficialDocumentWhereInput
  officialDocuments_some: OfficialDocumentWhereInput
  officialDocuments_none: OfficialDocumentWhereInput
  socialNetworkLinks_every: SocialLinkWhereInput
  socialNetworkLinks_some: SocialLinkWhereInput
  socialNetworkLinks_none: SocialLinkWhereInput
  department: DepartmentWhereInput
  newses_every: NewsWhereInput
  newses_some: NewsWhereInput
  newses_none: NewsWhereInput
  events_every: EventWhereInput
  events_some: EventWhereInput
  events_none: EventWhereInput
  lessonsManaged_every: LessonWhereInput
  lessonsManaged_some: LessonWhereInput
  lessonsManaged_none: LessonWhereInput
  availableLessons_every: LessonWhereInput
  availableLessons_some: LessonWhereInput
  availableLessons_none: LessonWhereInput
  teachedSessions_every: SessionWhereInput
  teachedSessions_some: SessionWhereInput
  teachedSessions_none: SessionWhereInput
  discountRequests_every: DiscountRequestWhereInput
  discountRequests_some: DiscountRequestWhereInput
  discountRequests_none: DiscountRequestWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

type Venue implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  address: String!
  placeID: String
  latitude: Float
  longitude: Float
  spaces(where: SpaceWhereInput, orderBy: SpaceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Space!]
}

"""A connection to a list of items."""
type VenueConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [VenueEdge]!
  aggregate: AggregateVenue!
}

input VenueCreateInput {
  id: ID
  name: String!
  address: String!
  placeID: String
  latitude: Float
  longitude: Float
  spaces: SpaceCreateManyWithoutVenueInput
}

input VenueCreateOneWithoutSpacesInput {
  create: VenueCreateWithoutSpacesInput
  connect: VenueWhereUniqueInput
}

input VenueCreateWithoutSpacesInput {
  id: ID
  name: String!
  address: String!
  placeID: String
  latitude: Float
  longitude: Float
}

"""An edge in a connection."""
type VenueEdge {
  """The item at the end of the edge."""
  node: Venue!

  """A cursor for use in pagination."""
  cursor: String!
}

enum VenueOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
  address_ASC
  address_DESC
  placeID_ASC
  placeID_DESC
  latitude_ASC
  latitude_DESC
  longitude_ASC
  longitude_DESC
}

type VenuePreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  address: String!
  placeID: String
  latitude: Float
  longitude: Float
}

type VenueSubscriptionPayload {
  mutation: MutationType!
  node: Venue
  updatedFields: [String!]
  previousValues: VenuePreviousValues
}

input VenueSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [VenueSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [VenueSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [VenueSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: VenueWhereInput
}

input VenueUpdateInput {
  name: String
  address: String
  placeID: String
  latitude: Float
  longitude: Float
  spaces: SpaceUpdateManyWithoutVenueInput
}

input VenueUpdateManyMutationInput {
  name: String
  address: String
  placeID: String
  latitude: Float
  longitude: Float
}

input VenueUpdateOneRequiredWithoutSpacesInput {
  create: VenueCreateWithoutSpacesInput
  connect: VenueWhereUniqueInput
  update: VenueUpdateWithoutSpacesDataInput
  upsert: VenueUpsertWithoutSpacesInput
}

input VenueUpdateWithoutSpacesDataInput {
  name: String
  address: String
  placeID: String
  latitude: Float
  longitude: Float
}

input VenueUpsertWithoutSpacesInput {
  update: VenueUpdateWithoutSpacesDataInput!
  create: VenueCreateWithoutSpacesInput!
}

input VenueWhereInput {
  """Logical AND on all given filters."""
  AND: [VenueWhereInput!]

  """Logical OR on all given filters."""
  OR: [VenueWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [VenueWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  address: String

  """All values that are not equal to given value."""
  address_not: String

  """All values that are contained in given list."""
  address_in: [String!]

  """All values that are not contained in given list."""
  address_not_in: [String!]

  """All values less than the given value."""
  address_lt: String

  """All values less than or equal the given value."""
  address_lte: String

  """All values greater than the given value."""
  address_gt: String

  """All values greater than or equal the given value."""
  address_gte: String

  """All values containing the given string."""
  address_contains: String

  """All values not containing the given string."""
  address_not_contains: String

  """All values starting with the given string."""
  address_starts_with: String

  """All values not starting with the given string."""
  address_not_starts_with: String

  """All values ending with the given string."""
  address_ends_with: String

  """All values not ending with the given string."""
  address_not_ends_with: String
  placeID: String

  """All values that are not equal to given value."""
  placeID_not: String

  """All values that are contained in given list."""
  placeID_in: [String!]

  """All values that are not contained in given list."""
  placeID_not_in: [String!]

  """All values less than the given value."""
  placeID_lt: String

  """All values less than or equal the given value."""
  placeID_lte: String

  """All values greater than the given value."""
  placeID_gt: String

  """All values greater than or equal the given value."""
  placeID_gte: String

  """All values containing the given string."""
  placeID_contains: String

  """All values not containing the given string."""
  placeID_not_contains: String

  """All values starting with the given string."""
  placeID_starts_with: String

  """All values not starting with the given string."""
  placeID_not_starts_with: String

  """All values ending with the given string."""
  placeID_ends_with: String

  """All values not ending with the given string."""
  placeID_not_ends_with: String
  latitude: Float

  """All values that are not equal to given value."""
  latitude_not: Float

  """All values that are contained in given list."""
  latitude_in: [Float!]

  """All values that are not contained in given list."""
  latitude_not_in: [Float!]

  """All values less than the given value."""
  latitude_lt: Float

  """All values less than or equal the given value."""
  latitude_lte: Float

  """All values greater than the given value."""
  latitude_gt: Float

  """All values greater than or equal the given value."""
  latitude_gte: Float
  longitude: Float

  """All values that are not equal to given value."""
  longitude_not: Float

  """All values that are contained in given list."""
  longitude_in: [Float!]

  """All values that are not contained in given list."""
  longitude_not_in: [Float!]

  """All values less than the given value."""
  longitude_lt: Float

  """All values less than or equal the given value."""
  longitude_lte: Float

  """All values greater than the given value."""
  longitude_gt: Float

  """All values greater than or equal the given value."""
  longitude_gte: Float
  spaces_every: SpaceWhereInput
  spaces_some: SpaceWhereInput
  spaces_none: SpaceWhereInput
}

input VenueWhereUniqueInput {
  id: ID
}
