# source: http://localhost:4466/aaxapi/dev
# timestamp: Sun Jun 23 2019 10:15:42 GMT+0200 (Central European Summer Time)

type Address implements Node {
  id: ID!
  line1: String!
  line2: String
  city: String!
  state: String!
  country: String!
  latitude: Float
  longitude: Float
  user: User!
}

"""A connection to a list of items."""
type AddressConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AddressEdge]!
  aggregate: AggregateAddress!
}

input AddressCreateInput {
  line1: String!
  line2: String
  city: String!
  state: String!
  country: String!
  latitude: Float
  longitude: Float
  user: UserCreateOneWithoutAddressInput!
}

input AddressCreateOneWithoutUserInput {
  create: AddressCreateWithoutUserInput
  connect: AddressWhereUniqueInput
}

input AddressCreateWithoutUserInput {
  line1: String!
  line2: String
  city: String!
  state: String!
  country: String!
  latitude: Float
  longitude: Float
}

"""An edge in a connection."""
type AddressEdge {
  """The item at the end of the edge."""
  node: Address!

  """A cursor for use in pagination."""
  cursor: String!
}

enum AddressOrderByInput {
  id_ASC
  id_DESC
  line1_ASC
  line1_DESC
  line2_ASC
  line2_DESC
  city_ASC
  city_DESC
  state_ASC
  state_DESC
  country_ASC
  country_DESC
  latitude_ASC
  latitude_DESC
  longitude_ASC
  longitude_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type AddressPreviousValues {
  id: ID!
  line1: String!
  line2: String
  city: String!
  state: String!
  country: String!
  latitude: Float
  longitude: Float
}

type AddressSubscriptionPayload {
  mutation: MutationType!
  node: Address
  updatedFields: [String!]
  previousValues: AddressPreviousValues
}

input AddressSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [AddressSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [AddressSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AddressSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: AddressWhereInput
}

input AddressUpdateInput {
  line1: String
  line2: String
  city: String
  state: String
  country: String
  latitude: Float
  longitude: Float
  user: UserUpdateOneRequiredWithoutAddressInput
}

input AddressUpdateManyMutationInput {
  line1: String
  line2: String
  city: String
  state: String
  country: String
  latitude: Float
  longitude: Float
}

input AddressUpdateOneWithoutUserInput {
  create: AddressCreateWithoutUserInput
  connect: AddressWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: AddressUpdateWithoutUserDataInput
  upsert: AddressUpsertWithoutUserInput
}

input AddressUpdateWithoutUserDataInput {
  line1: String
  line2: String
  city: String
  state: String
  country: String
  latitude: Float
  longitude: Float
}

input AddressUpsertWithoutUserInput {
  update: AddressUpdateWithoutUserDataInput!
  create: AddressCreateWithoutUserInput!
}

input AddressWhereInput {
  """Logical AND on all given filters."""
  AND: [AddressWhereInput!]

  """Logical OR on all given filters."""
  OR: [AddressWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AddressWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  line1: String

  """All values that are not equal to given value."""
  line1_not: String

  """All values that are contained in given list."""
  line1_in: [String!]

  """All values that are not contained in given list."""
  line1_not_in: [String!]

  """All values less than the given value."""
  line1_lt: String

  """All values less than or equal the given value."""
  line1_lte: String

  """All values greater than the given value."""
  line1_gt: String

  """All values greater than or equal the given value."""
  line1_gte: String

  """All values containing the given string."""
  line1_contains: String

  """All values not containing the given string."""
  line1_not_contains: String

  """All values starting with the given string."""
  line1_starts_with: String

  """All values not starting with the given string."""
  line1_not_starts_with: String

  """All values ending with the given string."""
  line1_ends_with: String

  """All values not ending with the given string."""
  line1_not_ends_with: String
  line2: String

  """All values that are not equal to given value."""
  line2_not: String

  """All values that are contained in given list."""
  line2_in: [String!]

  """All values that are not contained in given list."""
  line2_not_in: [String!]

  """All values less than the given value."""
  line2_lt: String

  """All values less than or equal the given value."""
  line2_lte: String

  """All values greater than the given value."""
  line2_gt: String

  """All values greater than or equal the given value."""
  line2_gte: String

  """All values containing the given string."""
  line2_contains: String

  """All values not containing the given string."""
  line2_not_contains: String

  """All values starting with the given string."""
  line2_starts_with: String

  """All values not starting with the given string."""
  line2_not_starts_with: String

  """All values ending with the given string."""
  line2_ends_with: String

  """All values not ending with the given string."""
  line2_not_ends_with: String
  city: String

  """All values that are not equal to given value."""
  city_not: String

  """All values that are contained in given list."""
  city_in: [String!]

  """All values that are not contained in given list."""
  city_not_in: [String!]

  """All values less than the given value."""
  city_lt: String

  """All values less than or equal the given value."""
  city_lte: String

  """All values greater than the given value."""
  city_gt: String

  """All values greater than or equal the given value."""
  city_gte: String

  """All values containing the given string."""
  city_contains: String

  """All values not containing the given string."""
  city_not_contains: String

  """All values starting with the given string."""
  city_starts_with: String

  """All values not starting with the given string."""
  city_not_starts_with: String

  """All values ending with the given string."""
  city_ends_with: String

  """All values not ending with the given string."""
  city_not_ends_with: String
  state: String

  """All values that are not equal to given value."""
  state_not: String

  """All values that are contained in given list."""
  state_in: [String!]

  """All values that are not contained in given list."""
  state_not_in: [String!]

  """All values less than the given value."""
  state_lt: String

  """All values less than or equal the given value."""
  state_lte: String

  """All values greater than the given value."""
  state_gt: String

  """All values greater than or equal the given value."""
  state_gte: String

  """All values containing the given string."""
  state_contains: String

  """All values not containing the given string."""
  state_not_contains: String

  """All values starting with the given string."""
  state_starts_with: String

  """All values not starting with the given string."""
  state_not_starts_with: String

  """All values ending with the given string."""
  state_ends_with: String

  """All values not ending with the given string."""
  state_not_ends_with: String
  country: String

  """All values that are not equal to given value."""
  country_not: String

  """All values that are contained in given list."""
  country_in: [String!]

  """All values that are not contained in given list."""
  country_not_in: [String!]

  """All values less than the given value."""
  country_lt: String

  """All values less than or equal the given value."""
  country_lte: String

  """All values greater than the given value."""
  country_gt: String

  """All values greater than or equal the given value."""
  country_gte: String

  """All values containing the given string."""
  country_contains: String

  """All values not containing the given string."""
  country_not_contains: String

  """All values starting with the given string."""
  country_starts_with: String

  """All values not starting with the given string."""
  country_not_starts_with: String

  """All values ending with the given string."""
  country_ends_with: String

  """All values not ending with the given string."""
  country_not_ends_with: String
  latitude: Float

  """All values that are not equal to given value."""
  latitude_not: Float

  """All values that are contained in given list."""
  latitude_in: [Float!]

  """All values that are not contained in given list."""
  latitude_not_in: [Float!]

  """All values less than the given value."""
  latitude_lt: Float

  """All values less than or equal the given value."""
  latitude_lte: Float

  """All values greater than the given value."""
  latitude_gt: Float

  """All values greater than or equal the given value."""
  latitude_gte: Float
  longitude: Float

  """All values that are not equal to given value."""
  longitude_not: Float

  """All values that are contained in given list."""
  longitude_in: [Float!]

  """All values that are not contained in given list."""
  longitude_not_in: [Float!]

  """All values less than the given value."""
  longitude_lt: Float

  """All values less than or equal the given value."""
  longitude_lte: Float

  """All values greater than the given value."""
  longitude_gt: Float

  """All values greater than or equal the given value."""
  longitude_gte: Float
  user: UserWhereInput
}

input AddressWhereUniqueInput {
  id: ID
}

type AdminCompetence implements Node {
  id: ID!
  name: String!
  description: String
  roles(where: AdminRoleWhereInput, orderBy: AdminRoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [AdminRole!]
}

"""A connection to a list of items."""
type AdminCompetenceConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AdminCompetenceEdge]!
  aggregate: AggregateAdminCompetence!
}

input AdminCompetenceCreateInput {
  name: String!
  description: String
  roles: AdminRoleCreateManyWithoutCompetencesInput
}

input AdminCompetenceCreateManyWithoutRolesInput {
  create: [AdminCompetenceCreateWithoutRolesInput!]
  connect: [AdminCompetenceWhereUniqueInput!]
}

input AdminCompetenceCreateWithoutRolesInput {
  name: String!
  description: String
}

"""An edge in a connection."""
type AdminCompetenceEdge {
  """The item at the end of the edge."""
  node: AdminCompetence!

  """A cursor for use in pagination."""
  cursor: String!
}

enum AdminCompetenceOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type AdminCompetencePreviousValues {
  id: ID!
  name: String!
  description: String
}

input AdminCompetenceScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [AdminCompetenceScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [AdminCompetenceScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AdminCompetenceScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
}

type AdminCompetenceSubscriptionPayload {
  mutation: MutationType!
  node: AdminCompetence
  updatedFields: [String!]
  previousValues: AdminCompetencePreviousValues
}

input AdminCompetenceSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [AdminCompetenceSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [AdminCompetenceSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AdminCompetenceSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: AdminCompetenceWhereInput
}

input AdminCompetenceUpdateInput {
  name: String
  description: String
  roles: AdminRoleUpdateManyWithoutCompetencesInput
}

input AdminCompetenceUpdateManyDataInput {
  name: String
  description: String
}

input AdminCompetenceUpdateManyMutationInput {
  name: String
  description: String
}

input AdminCompetenceUpdateManyWithoutRolesInput {
  create: [AdminCompetenceCreateWithoutRolesInput!]
  connect: [AdminCompetenceWhereUniqueInput!]
  disconnect: [AdminCompetenceWhereUniqueInput!]
  delete: [AdminCompetenceWhereUniqueInput!]
  update: [AdminCompetenceUpdateWithWhereUniqueWithoutRolesInput!]
  updateMany: [AdminCompetenceUpdateManyWithWhereNestedInput!]
  deleteMany: [AdminCompetenceScalarWhereInput!]
  upsert: [AdminCompetenceUpsertWithWhereUniqueWithoutRolesInput!]
}

input AdminCompetenceUpdateManyWithWhereNestedInput {
  where: AdminCompetenceScalarWhereInput!
  data: AdminCompetenceUpdateManyDataInput!
}

input AdminCompetenceUpdateWithoutRolesDataInput {
  name: String
  description: String
}

input AdminCompetenceUpdateWithWhereUniqueWithoutRolesInput {
  where: AdminCompetenceWhereUniqueInput!
  data: AdminCompetenceUpdateWithoutRolesDataInput!
}

input AdminCompetenceUpsertWithWhereUniqueWithoutRolesInput {
  where: AdminCompetenceWhereUniqueInput!
  update: AdminCompetenceUpdateWithoutRolesDataInput!
  create: AdminCompetenceCreateWithoutRolesInput!
}

input AdminCompetenceWhereInput {
  """Logical AND on all given filters."""
  AND: [AdminCompetenceWhereInput!]

  """Logical OR on all given filters."""
  OR: [AdminCompetenceWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AdminCompetenceWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  roles_every: AdminRoleWhereInput
  roles_some: AdminRoleWhereInput
  roles_none: AdminRoleWhereInput
}

input AdminCompetenceWhereUniqueInput {
  id: ID
  name: String
}

type AdminRole implements Node {
  id: ID!
  name: String!
  competences(where: AdminCompetenceWhereInput, orderBy: AdminCompetenceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [AdminCompetence!]
  admins(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
}

"""A connection to a list of items."""
type AdminRoleConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AdminRoleEdge]!
  aggregate: AggregateAdminRole!
}

input AdminRoleCreateInput {
  name: String!
  competences: AdminCompetenceCreateManyWithoutRolesInput
  admins: UserCreateManyWithoutAdminRoleInput
}

input AdminRoleCreateManyWithoutCompetencesInput {
  create: [AdminRoleCreateWithoutCompetencesInput!]
  connect: [AdminRoleWhereUniqueInput!]
}

input AdminRoleCreateOneWithoutAdminsInput {
  create: AdminRoleCreateWithoutAdminsInput
  connect: AdminRoleWhereUniqueInput
}

input AdminRoleCreateWithoutAdminsInput {
  name: String!
  competences: AdminCompetenceCreateManyWithoutRolesInput
}

input AdminRoleCreateWithoutCompetencesInput {
  name: String!
  admins: UserCreateManyWithoutAdminRoleInput
}

"""An edge in a connection."""
type AdminRoleEdge {
  """The item at the end of the edge."""
  node: AdminRole!

  """A cursor for use in pagination."""
  cursor: String!
}

enum AdminRoleOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type AdminRolePreviousValues {
  id: ID!
  name: String!
}

input AdminRoleScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [AdminRoleScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [AdminRoleScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AdminRoleScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
}

type AdminRoleSubscriptionPayload {
  mutation: MutationType!
  node: AdminRole
  updatedFields: [String!]
  previousValues: AdminRolePreviousValues
}

input AdminRoleSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [AdminRoleSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [AdminRoleSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AdminRoleSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: AdminRoleWhereInput
}

input AdminRoleUpdateInput {
  name: String
  competences: AdminCompetenceUpdateManyWithoutRolesInput
  admins: UserUpdateManyWithoutAdminRoleInput
}

input AdminRoleUpdateManyDataInput {
  name: String
}

input AdminRoleUpdateManyMutationInput {
  name: String
}

input AdminRoleUpdateManyWithoutCompetencesInput {
  create: [AdminRoleCreateWithoutCompetencesInput!]
  connect: [AdminRoleWhereUniqueInput!]
  disconnect: [AdminRoleWhereUniqueInput!]
  delete: [AdminRoleWhereUniqueInput!]
  update: [AdminRoleUpdateWithWhereUniqueWithoutCompetencesInput!]
  updateMany: [AdminRoleUpdateManyWithWhereNestedInput!]
  deleteMany: [AdminRoleScalarWhereInput!]
  upsert: [AdminRoleUpsertWithWhereUniqueWithoutCompetencesInput!]
}

input AdminRoleUpdateManyWithWhereNestedInput {
  where: AdminRoleScalarWhereInput!
  data: AdminRoleUpdateManyDataInput!
}

input AdminRoleUpdateOneWithoutAdminsInput {
  create: AdminRoleCreateWithoutAdminsInput
  connect: AdminRoleWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: AdminRoleUpdateWithoutAdminsDataInput
  upsert: AdminRoleUpsertWithoutAdminsInput
}

input AdminRoleUpdateWithoutAdminsDataInput {
  name: String
  competences: AdminCompetenceUpdateManyWithoutRolesInput
}

input AdminRoleUpdateWithoutCompetencesDataInput {
  name: String
  admins: UserUpdateManyWithoutAdminRoleInput
}

input AdminRoleUpdateWithWhereUniqueWithoutCompetencesInput {
  where: AdminRoleWhereUniqueInput!
  data: AdminRoleUpdateWithoutCompetencesDataInput!
}

input AdminRoleUpsertWithoutAdminsInput {
  update: AdminRoleUpdateWithoutAdminsDataInput!
  create: AdminRoleCreateWithoutAdminsInput!
}

input AdminRoleUpsertWithWhereUniqueWithoutCompetencesInput {
  where: AdminRoleWhereUniqueInput!
  update: AdminRoleUpdateWithoutCompetencesDataInput!
  create: AdminRoleCreateWithoutCompetencesInput!
}

input AdminRoleWhereInput {
  """Logical AND on all given filters."""
  AND: [AdminRoleWhereInput!]

  """Logical OR on all given filters."""
  OR: [AdminRoleWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AdminRoleWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  competences_every: AdminCompetenceWhereInput
  competences_some: AdminCompetenceWhereInput
  competences_none: AdminCompetenceWhereInput
  admins_every: UserWhereInput
  admins_some: UserWhereInput
  admins_none: UserWhereInput
}

input AdminRoleWhereUniqueInput {
  id: ID
  name: String
}

type AggregateAddress {
  count: Int!
}

type AggregateAdminCompetence {
  count: Int!
}

type AggregateAdminRole {
  count: Int!
}

type AggregateBranch {
  count: Int!
}

type AggregateCommitteBoardUser {
  count: Int!
}

type AggregateCongressEdition {
  count: Int!
}

type AggregateCongressProduct {
  count: Int!
}

type AggregateCustomerOrder {
  count: Int!
}

type AggregateCustomerOrderItems {
  count: Int!
}

type AggregateEvent {
  count: Int!
}

type AggregateInvoice {
  count: Int!
}

type AggregateNews {
  count: Int!
}

type AggregatenID {
  count: Int!
}

type AggregateParticipant {
  count: Int!
}

type AggregatePhoneNumber {
  count: Int!
}

type AggregateProduct {
  count: Int!
}

type AggregateProductCategory {
  count: Int!
}

type AggregateProductImage {
  count: Int!
}

type AggregateProgram {
  count: Int!
}

type AggregateProposal {
  count: Int!
}

type AggregateProposalReview {
  count: Int!
}

type AggregateSocialLink {
  count: Int!
}

type AggregateSocialNetwork {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateVenue {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Branch implements Node {
  id: ID!
  name: String!
  shortName: String!
  description: String
  program: Program!
  students(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  staff(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
}

"""A connection to a list of items."""
type BranchConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [BranchEdge]!
  aggregate: AggregateBranch!
}

input BranchCreateInput {
  name: String!
  shortName: String!
  description: String
  program: ProgramCreateOneWithoutBranchesInput!
  students: UserCreateManyWithoutBranchInput
  staff: UserCreateManyWithoutDepartmentInput
}

input BranchCreateManyWithoutProgramInput {
  create: [BranchCreateWithoutProgramInput!]
  connect: [BranchWhereUniqueInput!]
}

input BranchCreateOneWithoutStaffInput {
  create: BranchCreateWithoutStaffInput
  connect: BranchWhereUniqueInput
}

input BranchCreateOneWithoutStudentsInput {
  create: BranchCreateWithoutStudentsInput
  connect: BranchWhereUniqueInput
}

input BranchCreateWithoutProgramInput {
  name: String!
  shortName: String!
  description: String
  students: UserCreateManyWithoutBranchInput
  staff: UserCreateManyWithoutDepartmentInput
}

input BranchCreateWithoutStaffInput {
  name: String!
  shortName: String!
  description: String
  program: ProgramCreateOneWithoutBranchesInput!
  students: UserCreateManyWithoutBranchInput
}

input BranchCreateWithoutStudentsInput {
  name: String!
  shortName: String!
  description: String
  program: ProgramCreateOneWithoutBranchesInput!
  staff: UserCreateManyWithoutDepartmentInput
}

"""An edge in a connection."""
type BranchEdge {
  """The item at the end of the edge."""
  node: Branch!

  """A cursor for use in pagination."""
  cursor: String!
}

enum BranchOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  shortName_ASC
  shortName_DESC
  description_ASC
  description_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type BranchPreviousValues {
  id: ID!
  name: String!
  shortName: String!
  description: String
}

input BranchScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [BranchScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [BranchScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BranchScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  shortName: String

  """All values that are not equal to given value."""
  shortName_not: String

  """All values that are contained in given list."""
  shortName_in: [String!]

  """All values that are not contained in given list."""
  shortName_not_in: [String!]

  """All values less than the given value."""
  shortName_lt: String

  """All values less than or equal the given value."""
  shortName_lte: String

  """All values greater than the given value."""
  shortName_gt: String

  """All values greater than or equal the given value."""
  shortName_gte: String

  """All values containing the given string."""
  shortName_contains: String

  """All values not containing the given string."""
  shortName_not_contains: String

  """All values starting with the given string."""
  shortName_starts_with: String

  """All values not starting with the given string."""
  shortName_not_starts_with: String

  """All values ending with the given string."""
  shortName_ends_with: String

  """All values not ending with the given string."""
  shortName_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
}

type BranchSubscriptionPayload {
  mutation: MutationType!
  node: Branch
  updatedFields: [String!]
  previousValues: BranchPreviousValues
}

input BranchSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [BranchSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [BranchSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BranchSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: BranchWhereInput
}

input BranchUpdateInput {
  name: String
  shortName: String
  description: String
  program: ProgramUpdateOneRequiredWithoutBranchesInput
  students: UserUpdateManyWithoutBranchInput
  staff: UserUpdateManyWithoutDepartmentInput
}

input BranchUpdateManyDataInput {
  name: String
  shortName: String
  description: String
}

input BranchUpdateManyMutationInput {
  name: String
  shortName: String
  description: String
}

input BranchUpdateManyWithoutProgramInput {
  create: [BranchCreateWithoutProgramInput!]
  connect: [BranchWhereUniqueInput!]
  disconnect: [BranchWhereUniqueInput!]
  delete: [BranchWhereUniqueInput!]
  update: [BranchUpdateWithWhereUniqueWithoutProgramInput!]
  updateMany: [BranchUpdateManyWithWhereNestedInput!]
  deleteMany: [BranchScalarWhereInput!]
  upsert: [BranchUpsertWithWhereUniqueWithoutProgramInput!]
}

input BranchUpdateManyWithWhereNestedInput {
  where: BranchScalarWhereInput!
  data: BranchUpdateManyDataInput!
}

input BranchUpdateOneWithoutStaffInput {
  create: BranchCreateWithoutStaffInput
  connect: BranchWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: BranchUpdateWithoutStaffDataInput
  upsert: BranchUpsertWithoutStaffInput
}

input BranchUpdateOneWithoutStudentsInput {
  create: BranchCreateWithoutStudentsInput
  connect: BranchWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: BranchUpdateWithoutStudentsDataInput
  upsert: BranchUpsertWithoutStudentsInput
}

input BranchUpdateWithoutProgramDataInput {
  name: String
  shortName: String
  description: String
  students: UserUpdateManyWithoutBranchInput
  staff: UserUpdateManyWithoutDepartmentInput
}

input BranchUpdateWithoutStaffDataInput {
  name: String
  shortName: String
  description: String
  program: ProgramUpdateOneRequiredWithoutBranchesInput
  students: UserUpdateManyWithoutBranchInput
}

input BranchUpdateWithoutStudentsDataInput {
  name: String
  shortName: String
  description: String
  program: ProgramUpdateOneRequiredWithoutBranchesInput
  staff: UserUpdateManyWithoutDepartmentInput
}

input BranchUpdateWithWhereUniqueWithoutProgramInput {
  where: BranchWhereUniqueInput!
  data: BranchUpdateWithoutProgramDataInput!
}

input BranchUpsertWithoutStaffInput {
  update: BranchUpdateWithoutStaffDataInput!
  create: BranchCreateWithoutStaffInput!
}

input BranchUpsertWithoutStudentsInput {
  update: BranchUpdateWithoutStudentsDataInput!
  create: BranchCreateWithoutStudentsInput!
}

input BranchUpsertWithWhereUniqueWithoutProgramInput {
  where: BranchWhereUniqueInput!
  update: BranchUpdateWithoutProgramDataInput!
  create: BranchCreateWithoutProgramInput!
}

input BranchWhereInput {
  """Logical AND on all given filters."""
  AND: [BranchWhereInput!]

  """Logical OR on all given filters."""
  OR: [BranchWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BranchWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  shortName: String

  """All values that are not equal to given value."""
  shortName_not: String

  """All values that are contained in given list."""
  shortName_in: [String!]

  """All values that are not contained in given list."""
  shortName_not_in: [String!]

  """All values less than the given value."""
  shortName_lt: String

  """All values less than or equal the given value."""
  shortName_lte: String

  """All values greater than the given value."""
  shortName_gt: String

  """All values greater than or equal the given value."""
  shortName_gte: String

  """All values containing the given string."""
  shortName_contains: String

  """All values not containing the given string."""
  shortName_not_contains: String

  """All values starting with the given string."""
  shortName_starts_with: String

  """All values not starting with the given string."""
  shortName_not_starts_with: String

  """All values ending with the given string."""
  shortName_ends_with: String

  """All values not ending with the given string."""
  shortName_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  program: ProgramWhereInput
  students_every: UserWhereInput
  students_some: UserWhereInput
  students_none: UserWhereInput
  staff_every: UserWhereInput
  staff_some: UserWhereInput
  staff_none: UserWhereInput
}

input BranchWhereUniqueInput {
  id: ID
  name: String
}

type CommitteBoardUser implements Node {
  id: ID!
  congress: CongressEdition!
  user: User!
  reviews(where: ProposalReviewWhereInput, orderBy: ProposalReviewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProposalReview!]
}

"""A connection to a list of items."""
type CommitteBoardUserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CommitteBoardUserEdge]!
  aggregate: AggregateCommitteBoardUser!
}

input CommitteBoardUserCreateInput {
  congress: CongressEditionCreateOneWithoutCommitteeInput!
  user: UserCreateOneInput!
  reviews: ProposalReviewCreateManyWithoutCommitteUserInput
}

input CommitteBoardUserCreateManyWithoutCongressInput {
  create: [CommitteBoardUserCreateWithoutCongressInput!]
  connect: [CommitteBoardUserWhereUniqueInput!]
}

input CommitteBoardUserCreateOneWithoutReviewsInput {
  create: CommitteBoardUserCreateWithoutReviewsInput
  connect: CommitteBoardUserWhereUniqueInput
}

input CommitteBoardUserCreateWithoutCongressInput {
  user: UserCreateOneInput!
  reviews: ProposalReviewCreateManyWithoutCommitteUserInput
}

input CommitteBoardUserCreateWithoutReviewsInput {
  congress: CongressEditionCreateOneWithoutCommitteeInput!
  user: UserCreateOneInput!
}

"""An edge in a connection."""
type CommitteBoardUserEdge {
  """The item at the end of the edge."""
  node: CommitteBoardUser!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CommitteBoardUserOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type CommitteBoardUserPreviousValues {
  id: ID!
}

input CommitteBoardUserScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [CommitteBoardUserScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [CommitteBoardUserScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CommitteBoardUserScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
}

type CommitteBoardUserSubscriptionPayload {
  mutation: MutationType!
  node: CommitteBoardUser
  updatedFields: [String!]
  previousValues: CommitteBoardUserPreviousValues
}

input CommitteBoardUserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CommitteBoardUserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CommitteBoardUserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CommitteBoardUserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CommitteBoardUserWhereInput
}

input CommitteBoardUserUpdateInput {
  congress: CongressEditionUpdateOneRequiredWithoutCommitteeInput
  user: UserUpdateOneRequiredInput
  reviews: ProposalReviewUpdateManyWithoutCommitteUserInput
}

input CommitteBoardUserUpdateManyWithoutCongressInput {
  create: [CommitteBoardUserCreateWithoutCongressInput!]
  connect: [CommitteBoardUserWhereUniqueInput!]
  disconnect: [CommitteBoardUserWhereUniqueInput!]
  delete: [CommitteBoardUserWhereUniqueInput!]
  update: [CommitteBoardUserUpdateWithWhereUniqueWithoutCongressInput!]
  deleteMany: [CommitteBoardUserScalarWhereInput!]
  upsert: [CommitteBoardUserUpsertWithWhereUniqueWithoutCongressInput!]
}

input CommitteBoardUserUpdateOneRequiredWithoutReviewsInput {
  create: CommitteBoardUserCreateWithoutReviewsInput
  connect: CommitteBoardUserWhereUniqueInput
  update: CommitteBoardUserUpdateWithoutReviewsDataInput
  upsert: CommitteBoardUserUpsertWithoutReviewsInput
}

input CommitteBoardUserUpdateWithoutCongressDataInput {
  user: UserUpdateOneRequiredInput
  reviews: ProposalReviewUpdateManyWithoutCommitteUserInput
}

input CommitteBoardUserUpdateWithoutReviewsDataInput {
  congress: CongressEditionUpdateOneRequiredWithoutCommitteeInput
  user: UserUpdateOneRequiredInput
}

input CommitteBoardUserUpdateWithWhereUniqueWithoutCongressInput {
  where: CommitteBoardUserWhereUniqueInput!
  data: CommitteBoardUserUpdateWithoutCongressDataInput!
}

input CommitteBoardUserUpsertWithoutReviewsInput {
  update: CommitteBoardUserUpdateWithoutReviewsDataInput!
  create: CommitteBoardUserCreateWithoutReviewsInput!
}

input CommitteBoardUserUpsertWithWhereUniqueWithoutCongressInput {
  where: CommitteBoardUserWhereUniqueInput!
  update: CommitteBoardUserUpdateWithoutCongressDataInput!
  create: CommitteBoardUserCreateWithoutCongressInput!
}

input CommitteBoardUserWhereInput {
  """Logical AND on all given filters."""
  AND: [CommitteBoardUserWhereInput!]

  """Logical OR on all given filters."""
  OR: [CommitteBoardUserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CommitteBoardUserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  congress: CongressEditionWhereInput
  user: UserWhereInput
  reviews_every: ProposalReviewWhereInput
  reviews_some: ProposalReviewWhereInput
  reviews_none: ProposalReviewWhereInput
}

input CommitteBoardUserWhereUniqueInput {
  id: ID
}

type CongressEdition implements Node {
  id: ID!
  year: Int!
  participants(where: ParticipantWhereInput, orderBy: ParticipantOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Participant!]
  startDate: DateTime
  endDate: DateTime
  products(where: CongressProductWhereInput, orderBy: CongressProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CongressProduct!]
  committee(where: CommitteBoardUserWhereInput, orderBy: CommitteBoardUserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CommitteBoardUser!]
}

"""A connection to a list of items."""
type CongressEditionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CongressEditionEdge]!
  aggregate: AggregateCongressEdition!
}

input CongressEditionCreateInput {
  year: Int!
  startDate: DateTime
  endDate: DateTime
  participants: ParticipantCreateManyWithoutCongressInput
  products: CongressProductCreateManyWithoutCongressInput
  committee: CommitteBoardUserCreateManyWithoutCongressInput
}

input CongressEditionCreateOneWithoutCommitteeInput {
  create: CongressEditionCreateWithoutCommitteeInput
  connect: CongressEditionWhereUniqueInput
}

input CongressEditionCreateOneWithoutParticipantsInput {
  create: CongressEditionCreateWithoutParticipantsInput
  connect: CongressEditionWhereUniqueInput
}

input CongressEditionCreateOneWithoutProductsInput {
  create: CongressEditionCreateWithoutProductsInput
  connect: CongressEditionWhereUniqueInput
}

input CongressEditionCreateWithoutCommitteeInput {
  year: Int!
  startDate: DateTime
  endDate: DateTime
  participants: ParticipantCreateManyWithoutCongressInput
  products: CongressProductCreateManyWithoutCongressInput
}

input CongressEditionCreateWithoutParticipantsInput {
  year: Int!
  startDate: DateTime
  endDate: DateTime
  products: CongressProductCreateManyWithoutCongressInput
  committee: CommitteBoardUserCreateManyWithoutCongressInput
}

input CongressEditionCreateWithoutProductsInput {
  year: Int!
  startDate: DateTime
  endDate: DateTime
  participants: ParticipantCreateManyWithoutCongressInput
  committee: CommitteBoardUserCreateManyWithoutCongressInput
}

"""An edge in a connection."""
type CongressEditionEdge {
  """The item at the end of the edge."""
  node: CongressEdition!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CongressEditionOrderByInput {
  id_ASC
  id_DESC
  year_ASC
  year_DESC
  startDate_ASC
  startDate_DESC
  endDate_ASC
  endDate_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type CongressEditionPreviousValues {
  id: ID!
  year: Int!
  startDate: DateTime
  endDate: DateTime
}

type CongressEditionSubscriptionPayload {
  mutation: MutationType!
  node: CongressEdition
  updatedFields: [String!]
  previousValues: CongressEditionPreviousValues
}

input CongressEditionSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CongressEditionSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CongressEditionSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CongressEditionSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CongressEditionWhereInput
}

input CongressEditionUpdateInput {
  year: Int
  startDate: DateTime
  endDate: DateTime
  participants: ParticipantUpdateManyWithoutCongressInput
  products: CongressProductUpdateManyWithoutCongressInput
  committee: CommitteBoardUserUpdateManyWithoutCongressInput
}

input CongressEditionUpdateManyMutationInput {
  year: Int
  startDate: DateTime
  endDate: DateTime
}

input CongressEditionUpdateOneRequiredWithoutCommitteeInput {
  create: CongressEditionCreateWithoutCommitteeInput
  connect: CongressEditionWhereUniqueInput
  update: CongressEditionUpdateWithoutCommitteeDataInput
  upsert: CongressEditionUpsertWithoutCommitteeInput
}

input CongressEditionUpdateOneRequiredWithoutParticipantsInput {
  create: CongressEditionCreateWithoutParticipantsInput
  connect: CongressEditionWhereUniqueInput
  update: CongressEditionUpdateWithoutParticipantsDataInput
  upsert: CongressEditionUpsertWithoutParticipantsInput
}

input CongressEditionUpdateOneRequiredWithoutProductsInput {
  create: CongressEditionCreateWithoutProductsInput
  connect: CongressEditionWhereUniqueInput
  update: CongressEditionUpdateWithoutProductsDataInput
  upsert: CongressEditionUpsertWithoutProductsInput
}

input CongressEditionUpdateWithoutCommitteeDataInput {
  year: Int
  startDate: DateTime
  endDate: DateTime
  participants: ParticipantUpdateManyWithoutCongressInput
  products: CongressProductUpdateManyWithoutCongressInput
}

input CongressEditionUpdateWithoutParticipantsDataInput {
  year: Int
  startDate: DateTime
  endDate: DateTime
  products: CongressProductUpdateManyWithoutCongressInput
  committee: CommitteBoardUserUpdateManyWithoutCongressInput
}

input CongressEditionUpdateWithoutProductsDataInput {
  year: Int
  startDate: DateTime
  endDate: DateTime
  participants: ParticipantUpdateManyWithoutCongressInput
  committee: CommitteBoardUserUpdateManyWithoutCongressInput
}

input CongressEditionUpsertWithoutCommitteeInput {
  update: CongressEditionUpdateWithoutCommitteeDataInput!
  create: CongressEditionCreateWithoutCommitteeInput!
}

input CongressEditionUpsertWithoutParticipantsInput {
  update: CongressEditionUpdateWithoutParticipantsDataInput!
  create: CongressEditionCreateWithoutParticipantsInput!
}

input CongressEditionUpsertWithoutProductsInput {
  update: CongressEditionUpdateWithoutProductsDataInput!
  create: CongressEditionCreateWithoutProductsInput!
}

input CongressEditionWhereInput {
  """Logical AND on all given filters."""
  AND: [CongressEditionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CongressEditionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CongressEditionWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  year: Int

  """All values that are not equal to given value."""
  year_not: Int

  """All values that are contained in given list."""
  year_in: [Int!]

  """All values that are not contained in given list."""
  year_not_in: [Int!]

  """All values less than the given value."""
  year_lt: Int

  """All values less than or equal the given value."""
  year_lte: Int

  """All values greater than the given value."""
  year_gt: Int

  """All values greater than or equal the given value."""
  year_gte: Int
  startDate: DateTime

  """All values that are not equal to given value."""
  startDate_not: DateTime

  """All values that are contained in given list."""
  startDate_in: [DateTime!]

  """All values that are not contained in given list."""
  startDate_not_in: [DateTime!]

  """All values less than the given value."""
  startDate_lt: DateTime

  """All values less than or equal the given value."""
  startDate_lte: DateTime

  """All values greater than the given value."""
  startDate_gt: DateTime

  """All values greater than or equal the given value."""
  startDate_gte: DateTime
  endDate: DateTime

  """All values that are not equal to given value."""
  endDate_not: DateTime

  """All values that are contained in given list."""
  endDate_in: [DateTime!]

  """All values that are not contained in given list."""
  endDate_not_in: [DateTime!]

  """All values less than the given value."""
  endDate_lt: DateTime

  """All values less than or equal the given value."""
  endDate_lte: DateTime

  """All values greater than the given value."""
  endDate_gt: DateTime

  """All values greater than or equal the given value."""
  endDate_gte: DateTime
  participants_every: ParticipantWhereInput
  participants_some: ParticipantWhereInput
  participants_none: ParticipantWhereInput
  products_every: CongressProductWhereInput
  products_some: CongressProductWhereInput
  products_none: CongressProductWhereInput
  committee_every: CommitteBoardUserWhereInput
  committee_some: CommitteBoardUserWhereInput
  committee_none: CommitteBoardUserWhereInput
}

input CongressEditionWhereUniqueInput {
  id: ID
}

type CongressProduct implements Node {
  id: ID!
  congress: CongressEdition!
  product: Product!
}

"""A connection to a list of items."""
type CongressProductConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CongressProductEdge]!
  aggregate: AggregateCongressProduct!
}

input CongressProductCreateInput {
  congress: CongressEditionCreateOneWithoutProductsInput!
  product: ProductCreateOneInput!
}

input CongressProductCreateManyWithoutCongressInput {
  create: [CongressProductCreateWithoutCongressInput!]
  connect: [CongressProductWhereUniqueInput!]
}

input CongressProductCreateWithoutCongressInput {
  product: ProductCreateOneInput!
}

"""An edge in a connection."""
type CongressProductEdge {
  """The item at the end of the edge."""
  node: CongressProduct!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CongressProductOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type CongressProductPreviousValues {
  id: ID!
}

input CongressProductScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [CongressProductScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [CongressProductScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CongressProductScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
}

type CongressProductSubscriptionPayload {
  mutation: MutationType!
  node: CongressProduct
  updatedFields: [String!]
  previousValues: CongressProductPreviousValues
}

input CongressProductSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CongressProductSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CongressProductSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CongressProductSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CongressProductWhereInput
}

input CongressProductUpdateInput {
  congress: CongressEditionUpdateOneRequiredWithoutProductsInput
  product: ProductUpdateOneRequiredInput
}

input CongressProductUpdateManyWithoutCongressInput {
  create: [CongressProductCreateWithoutCongressInput!]
  connect: [CongressProductWhereUniqueInput!]
  disconnect: [CongressProductWhereUniqueInput!]
  delete: [CongressProductWhereUniqueInput!]
  update: [CongressProductUpdateWithWhereUniqueWithoutCongressInput!]
  deleteMany: [CongressProductScalarWhereInput!]
  upsert: [CongressProductUpsertWithWhereUniqueWithoutCongressInput!]
}

input CongressProductUpdateWithoutCongressDataInput {
  product: ProductUpdateOneRequiredInput
}

input CongressProductUpdateWithWhereUniqueWithoutCongressInput {
  where: CongressProductWhereUniqueInput!
  data: CongressProductUpdateWithoutCongressDataInput!
}

input CongressProductUpsertWithWhereUniqueWithoutCongressInput {
  where: CongressProductWhereUniqueInput!
  update: CongressProductUpdateWithoutCongressDataInput!
  create: CongressProductCreateWithoutCongressInput!
}

input CongressProductWhereInput {
  """Logical AND on all given filters."""
  AND: [CongressProductWhereInput!]

  """Logical OR on all given filters."""
  OR: [CongressProductWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CongressProductWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  congress: CongressEditionWhereInput
  product: ProductWhereInput
}

input CongressProductWhereUniqueInput {
  id: ID
}

type CustomerOrder implements Node {
  id: ID!
  customer: User!
  items(where: CustomerOrderItemsWhereInput, orderBy: CustomerOrderItemsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CustomerOrderItems!]
  invoice: Invoice!
}

"""A connection to a list of items."""
type CustomerOrderConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CustomerOrderEdge]!
  aggregate: AggregateCustomerOrder!
}

input CustomerOrderCreateInput {
  customer: UserCreateOneInput!
  items: CustomerOrderItemsCreateManyWithoutOrderInput
  invoice: InvoiceCreateOneWithoutOrderInput!
}

input CustomerOrderCreateOneWithoutInvoiceInput {
  create: CustomerOrderCreateWithoutInvoiceInput
  connect: CustomerOrderWhereUniqueInput
}

input CustomerOrderCreateOneWithoutItemsInput {
  create: CustomerOrderCreateWithoutItemsInput
  connect: CustomerOrderWhereUniqueInput
}

input CustomerOrderCreateWithoutInvoiceInput {
  customer: UserCreateOneInput!
  items: CustomerOrderItemsCreateManyWithoutOrderInput
}

input CustomerOrderCreateWithoutItemsInput {
  customer: UserCreateOneInput!
  invoice: InvoiceCreateOneWithoutOrderInput!
}

"""An edge in a connection."""
type CustomerOrderEdge {
  """The item at the end of the edge."""
  node: CustomerOrder!

  """A cursor for use in pagination."""
  cursor: String!
}

type CustomerOrderItems implements Node {
  id: ID!
  order: CustomerOrder!
  item: Product!
  quantity: Int!
  orderPrice: Float!
}

"""A connection to a list of items."""
type CustomerOrderItemsConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CustomerOrderItemsEdge]!
  aggregate: AggregateCustomerOrderItems!
}

input CustomerOrderItemsCreateInput {
  quantity: Int!
  orderPrice: Float!
  order: CustomerOrderCreateOneWithoutItemsInput!
  item: ProductCreateOneInput!
}

input CustomerOrderItemsCreateManyWithoutOrderInput {
  create: [CustomerOrderItemsCreateWithoutOrderInput!]
  connect: [CustomerOrderItemsWhereUniqueInput!]
}

input CustomerOrderItemsCreateWithoutOrderInput {
  quantity: Int!
  orderPrice: Float!
  item: ProductCreateOneInput!
}

"""An edge in a connection."""
type CustomerOrderItemsEdge {
  """The item at the end of the edge."""
  node: CustomerOrderItems!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CustomerOrderItemsOrderByInput {
  id_ASC
  id_DESC
  quantity_ASC
  quantity_DESC
  orderPrice_ASC
  orderPrice_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type CustomerOrderItemsPreviousValues {
  id: ID!
  quantity: Int!
  orderPrice: Float!
}

input CustomerOrderItemsScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [CustomerOrderItemsScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [CustomerOrderItemsScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CustomerOrderItemsScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  quantity: Int

  """All values that are not equal to given value."""
  quantity_not: Int

  """All values that are contained in given list."""
  quantity_in: [Int!]

  """All values that are not contained in given list."""
  quantity_not_in: [Int!]

  """All values less than the given value."""
  quantity_lt: Int

  """All values less than or equal the given value."""
  quantity_lte: Int

  """All values greater than the given value."""
  quantity_gt: Int

  """All values greater than or equal the given value."""
  quantity_gte: Int
  orderPrice: Float

  """All values that are not equal to given value."""
  orderPrice_not: Float

  """All values that are contained in given list."""
  orderPrice_in: [Float!]

  """All values that are not contained in given list."""
  orderPrice_not_in: [Float!]

  """All values less than the given value."""
  orderPrice_lt: Float

  """All values less than or equal the given value."""
  orderPrice_lte: Float

  """All values greater than the given value."""
  orderPrice_gt: Float

  """All values greater than or equal the given value."""
  orderPrice_gte: Float
}

type CustomerOrderItemsSubscriptionPayload {
  mutation: MutationType!
  node: CustomerOrderItems
  updatedFields: [String!]
  previousValues: CustomerOrderItemsPreviousValues
}

input CustomerOrderItemsSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CustomerOrderItemsSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CustomerOrderItemsSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CustomerOrderItemsSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CustomerOrderItemsWhereInput
}

input CustomerOrderItemsUpdateInput {
  quantity: Int
  orderPrice: Float
  order: CustomerOrderUpdateOneRequiredWithoutItemsInput
  item: ProductUpdateOneRequiredInput
}

input CustomerOrderItemsUpdateManyDataInput {
  quantity: Int
  orderPrice: Float
}

input CustomerOrderItemsUpdateManyMutationInput {
  quantity: Int
  orderPrice: Float
}

input CustomerOrderItemsUpdateManyWithoutOrderInput {
  create: [CustomerOrderItemsCreateWithoutOrderInput!]
  connect: [CustomerOrderItemsWhereUniqueInput!]
  disconnect: [CustomerOrderItemsWhereUniqueInput!]
  delete: [CustomerOrderItemsWhereUniqueInput!]
  update: [CustomerOrderItemsUpdateWithWhereUniqueWithoutOrderInput!]
  updateMany: [CustomerOrderItemsUpdateManyWithWhereNestedInput!]
  deleteMany: [CustomerOrderItemsScalarWhereInput!]
  upsert: [CustomerOrderItemsUpsertWithWhereUniqueWithoutOrderInput!]
}

input CustomerOrderItemsUpdateManyWithWhereNestedInput {
  where: CustomerOrderItemsScalarWhereInput!
  data: CustomerOrderItemsUpdateManyDataInput!
}

input CustomerOrderItemsUpdateWithoutOrderDataInput {
  quantity: Int
  orderPrice: Float
  item: ProductUpdateOneRequiredInput
}

input CustomerOrderItemsUpdateWithWhereUniqueWithoutOrderInput {
  where: CustomerOrderItemsWhereUniqueInput!
  data: CustomerOrderItemsUpdateWithoutOrderDataInput!
}

input CustomerOrderItemsUpsertWithWhereUniqueWithoutOrderInput {
  where: CustomerOrderItemsWhereUniqueInput!
  update: CustomerOrderItemsUpdateWithoutOrderDataInput!
  create: CustomerOrderItemsCreateWithoutOrderInput!
}

input CustomerOrderItemsWhereInput {
  """Logical AND on all given filters."""
  AND: [CustomerOrderItemsWhereInput!]

  """Logical OR on all given filters."""
  OR: [CustomerOrderItemsWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CustomerOrderItemsWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  quantity: Int

  """All values that are not equal to given value."""
  quantity_not: Int

  """All values that are contained in given list."""
  quantity_in: [Int!]

  """All values that are not contained in given list."""
  quantity_not_in: [Int!]

  """All values less than the given value."""
  quantity_lt: Int

  """All values less than or equal the given value."""
  quantity_lte: Int

  """All values greater than the given value."""
  quantity_gt: Int

  """All values greater than or equal the given value."""
  quantity_gte: Int
  orderPrice: Float

  """All values that are not equal to given value."""
  orderPrice_not: Float

  """All values that are contained in given list."""
  orderPrice_in: [Float!]

  """All values that are not contained in given list."""
  orderPrice_not_in: [Float!]

  """All values less than the given value."""
  orderPrice_lt: Float

  """All values less than or equal the given value."""
  orderPrice_lte: Float

  """All values greater than the given value."""
  orderPrice_gt: Float

  """All values greater than or equal the given value."""
  orderPrice_gte: Float
  order: CustomerOrderWhereInput
  item: ProductWhereInput
}

input CustomerOrderItemsWhereUniqueInput {
  id: ID
}

enum CustomerOrderOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type CustomerOrderPreviousValues {
  id: ID!
}

type CustomerOrderSubscriptionPayload {
  mutation: MutationType!
  node: CustomerOrder
  updatedFields: [String!]
  previousValues: CustomerOrderPreviousValues
}

input CustomerOrderSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CustomerOrderSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CustomerOrderSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CustomerOrderSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CustomerOrderWhereInput
}

input CustomerOrderUpdateInput {
  customer: UserUpdateOneRequiredInput
  items: CustomerOrderItemsUpdateManyWithoutOrderInput
  invoice: InvoiceUpdateOneRequiredWithoutOrderInput
}

input CustomerOrderUpdateOneRequiredWithoutInvoiceInput {
  create: CustomerOrderCreateWithoutInvoiceInput
  connect: CustomerOrderWhereUniqueInput
  update: CustomerOrderUpdateWithoutInvoiceDataInput
  upsert: CustomerOrderUpsertWithoutInvoiceInput
}

input CustomerOrderUpdateOneRequiredWithoutItemsInput {
  create: CustomerOrderCreateWithoutItemsInput
  connect: CustomerOrderWhereUniqueInput
  update: CustomerOrderUpdateWithoutItemsDataInput
  upsert: CustomerOrderUpsertWithoutItemsInput
}

input CustomerOrderUpdateWithoutInvoiceDataInput {
  customer: UserUpdateOneRequiredInput
  items: CustomerOrderItemsUpdateManyWithoutOrderInput
}

input CustomerOrderUpdateWithoutItemsDataInput {
  customer: UserUpdateOneRequiredInput
  invoice: InvoiceUpdateOneRequiredWithoutOrderInput
}

input CustomerOrderUpsertWithoutInvoiceInput {
  update: CustomerOrderUpdateWithoutInvoiceDataInput!
  create: CustomerOrderCreateWithoutInvoiceInput!
}

input CustomerOrderUpsertWithoutItemsInput {
  update: CustomerOrderUpdateWithoutItemsDataInput!
  create: CustomerOrderCreateWithoutItemsInput!
}

input CustomerOrderWhereInput {
  """Logical AND on all given filters."""
  AND: [CustomerOrderWhereInput!]

  """Logical OR on all given filters."""
  OR: [CustomerOrderWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CustomerOrderWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  customer: UserWhereInput
  items_every: CustomerOrderItemsWhereInput
  items_some: CustomerOrderItemsWhereInput
  items_none: CustomerOrderItemsWhereInput
  invoice: InvoiceWhereInput
}

input CustomerOrderWhereUniqueInput {
  id: ID
}

scalar DateTime

type Event implements Node {
  id: ID!
  author: User!
  title: String!
  subtitle: String
  organizer: String
  body: String!
  imageURL: String
  date: DateTime!
  access: String
  accessPoint: String
  target: UserGroup!
  deleteUpon: Boolean
  published: Boolean!
  venue: Venue!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type EventConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [EventEdge]!
  aggregate: AggregateEvent!
}

input EventCreateInput {
  title: String!
  subtitle: String
  organizer: String
  body: String!
  imageURL: String
  date: DateTime!
  access: String
  accessPoint: String
  target: UserGroup!
  deleteUpon: Boolean
  published: Boolean
  author: UserCreateOneWithoutEventsInput!
  venue: VenueCreateOneWithoutEventsInput!
}

input EventCreateManyWithoutAuthorInput {
  create: [EventCreateWithoutAuthorInput!]
  connect: [EventWhereUniqueInput!]
}

input EventCreateManyWithoutVenueInput {
  create: [EventCreateWithoutVenueInput!]
  connect: [EventWhereUniqueInput!]
}

input EventCreateWithoutAuthorInput {
  title: String!
  subtitle: String
  organizer: String
  body: String!
  imageURL: String
  date: DateTime!
  access: String
  accessPoint: String
  target: UserGroup!
  deleteUpon: Boolean
  published: Boolean
  venue: VenueCreateOneWithoutEventsInput!
}

input EventCreateWithoutVenueInput {
  title: String!
  subtitle: String
  organizer: String
  body: String!
  imageURL: String
  date: DateTime!
  access: String
  accessPoint: String
  target: UserGroup!
  deleteUpon: Boolean
  published: Boolean
  author: UserCreateOneWithoutEventsInput!
}

"""An edge in a connection."""
type EventEdge {
  """The item at the end of the edge."""
  node: Event!

  """A cursor for use in pagination."""
  cursor: String!
}

enum EventOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  subtitle_ASC
  subtitle_DESC
  organizer_ASC
  organizer_DESC
  body_ASC
  body_DESC
  imageURL_ASC
  imageURL_DESC
  date_ASC
  date_DESC
  access_ASC
  access_DESC
  accessPoint_ASC
  accessPoint_DESC
  target_ASC
  target_DESC
  deleteUpon_ASC
  deleteUpon_DESC
  published_ASC
  published_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type EventPreviousValues {
  id: ID!
  title: String!
  subtitle: String
  organizer: String
  body: String!
  imageURL: String
  date: DateTime!
  access: String
  accessPoint: String
  target: UserGroup!
  deleteUpon: Boolean
  published: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input EventScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [EventScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [EventScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EventScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  subtitle: String

  """All values that are not equal to given value."""
  subtitle_not: String

  """All values that are contained in given list."""
  subtitle_in: [String!]

  """All values that are not contained in given list."""
  subtitle_not_in: [String!]

  """All values less than the given value."""
  subtitle_lt: String

  """All values less than or equal the given value."""
  subtitle_lte: String

  """All values greater than the given value."""
  subtitle_gt: String

  """All values greater than or equal the given value."""
  subtitle_gte: String

  """All values containing the given string."""
  subtitle_contains: String

  """All values not containing the given string."""
  subtitle_not_contains: String

  """All values starting with the given string."""
  subtitle_starts_with: String

  """All values not starting with the given string."""
  subtitle_not_starts_with: String

  """All values ending with the given string."""
  subtitle_ends_with: String

  """All values not ending with the given string."""
  subtitle_not_ends_with: String
  organizer: String

  """All values that are not equal to given value."""
  organizer_not: String

  """All values that are contained in given list."""
  organizer_in: [String!]

  """All values that are not contained in given list."""
  organizer_not_in: [String!]

  """All values less than the given value."""
  organizer_lt: String

  """All values less than or equal the given value."""
  organizer_lte: String

  """All values greater than the given value."""
  organizer_gt: String

  """All values greater than or equal the given value."""
  organizer_gte: String

  """All values containing the given string."""
  organizer_contains: String

  """All values not containing the given string."""
  organizer_not_contains: String

  """All values starting with the given string."""
  organizer_starts_with: String

  """All values not starting with the given string."""
  organizer_not_starts_with: String

  """All values ending with the given string."""
  organizer_ends_with: String

  """All values not ending with the given string."""
  organizer_not_ends_with: String
  body: String

  """All values that are not equal to given value."""
  body_not: String

  """All values that are contained in given list."""
  body_in: [String!]

  """All values that are not contained in given list."""
  body_not_in: [String!]

  """All values less than the given value."""
  body_lt: String

  """All values less than or equal the given value."""
  body_lte: String

  """All values greater than the given value."""
  body_gt: String

  """All values greater than or equal the given value."""
  body_gte: String

  """All values containing the given string."""
  body_contains: String

  """All values not containing the given string."""
  body_not_contains: String

  """All values starting with the given string."""
  body_starts_with: String

  """All values not starting with the given string."""
  body_not_starts_with: String

  """All values ending with the given string."""
  body_ends_with: String

  """All values not ending with the given string."""
  body_not_ends_with: String
  imageURL: String

  """All values that are not equal to given value."""
  imageURL_not: String

  """All values that are contained in given list."""
  imageURL_in: [String!]

  """All values that are not contained in given list."""
  imageURL_not_in: [String!]

  """All values less than the given value."""
  imageURL_lt: String

  """All values less than or equal the given value."""
  imageURL_lte: String

  """All values greater than the given value."""
  imageURL_gt: String

  """All values greater than or equal the given value."""
  imageURL_gte: String

  """All values containing the given string."""
  imageURL_contains: String

  """All values not containing the given string."""
  imageURL_not_contains: String

  """All values starting with the given string."""
  imageURL_starts_with: String

  """All values not starting with the given string."""
  imageURL_not_starts_with: String

  """All values ending with the given string."""
  imageURL_ends_with: String

  """All values not ending with the given string."""
  imageURL_not_ends_with: String
  date: DateTime

  """All values that are not equal to given value."""
  date_not: DateTime

  """All values that are contained in given list."""
  date_in: [DateTime!]

  """All values that are not contained in given list."""
  date_not_in: [DateTime!]

  """All values less than the given value."""
  date_lt: DateTime

  """All values less than or equal the given value."""
  date_lte: DateTime

  """All values greater than the given value."""
  date_gt: DateTime

  """All values greater than or equal the given value."""
  date_gte: DateTime
  access: String

  """All values that are not equal to given value."""
  access_not: String

  """All values that are contained in given list."""
  access_in: [String!]

  """All values that are not contained in given list."""
  access_not_in: [String!]

  """All values less than the given value."""
  access_lt: String

  """All values less than or equal the given value."""
  access_lte: String

  """All values greater than the given value."""
  access_gt: String

  """All values greater than or equal the given value."""
  access_gte: String

  """All values containing the given string."""
  access_contains: String

  """All values not containing the given string."""
  access_not_contains: String

  """All values starting with the given string."""
  access_starts_with: String

  """All values not starting with the given string."""
  access_not_starts_with: String

  """All values ending with the given string."""
  access_ends_with: String

  """All values not ending with the given string."""
  access_not_ends_with: String
  accessPoint: String

  """All values that are not equal to given value."""
  accessPoint_not: String

  """All values that are contained in given list."""
  accessPoint_in: [String!]

  """All values that are not contained in given list."""
  accessPoint_not_in: [String!]

  """All values less than the given value."""
  accessPoint_lt: String

  """All values less than or equal the given value."""
  accessPoint_lte: String

  """All values greater than the given value."""
  accessPoint_gt: String

  """All values greater than or equal the given value."""
  accessPoint_gte: String

  """All values containing the given string."""
  accessPoint_contains: String

  """All values not containing the given string."""
  accessPoint_not_contains: String

  """All values starting with the given string."""
  accessPoint_starts_with: String

  """All values not starting with the given string."""
  accessPoint_not_starts_with: String

  """All values ending with the given string."""
  accessPoint_ends_with: String

  """All values not ending with the given string."""
  accessPoint_not_ends_with: String
  target: UserGroup

  """All values that are not equal to given value."""
  target_not: UserGroup

  """All values that are contained in given list."""
  target_in: [UserGroup!]

  """All values that are not contained in given list."""
  target_not_in: [UserGroup!]
  deleteUpon: Boolean

  """All values that are not equal to given value."""
  deleteUpon_not: Boolean
  published: Boolean

  """All values that are not equal to given value."""
  published_not: Boolean
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type EventSubscriptionPayload {
  mutation: MutationType!
  node: Event
  updatedFields: [String!]
  previousValues: EventPreviousValues
}

input EventSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [EventSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [EventSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EventSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: EventWhereInput
}

input EventUpdateInput {
  title: String
  subtitle: String
  organizer: String
  body: String
  imageURL: String
  date: DateTime
  access: String
  accessPoint: String
  target: UserGroup
  deleteUpon: Boolean
  published: Boolean
  author: UserUpdateOneRequiredWithoutEventsInput
  venue: VenueUpdateOneRequiredWithoutEventsInput
}

input EventUpdateManyDataInput {
  title: String
  subtitle: String
  organizer: String
  body: String
  imageURL: String
  date: DateTime
  access: String
  accessPoint: String
  target: UserGroup
  deleteUpon: Boolean
  published: Boolean
}

input EventUpdateManyMutationInput {
  title: String
  subtitle: String
  organizer: String
  body: String
  imageURL: String
  date: DateTime
  access: String
  accessPoint: String
  target: UserGroup
  deleteUpon: Boolean
  published: Boolean
}

input EventUpdateManyWithoutAuthorInput {
  create: [EventCreateWithoutAuthorInput!]
  connect: [EventWhereUniqueInput!]
  disconnect: [EventWhereUniqueInput!]
  delete: [EventWhereUniqueInput!]
  update: [EventUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [EventUpdateManyWithWhereNestedInput!]
  deleteMany: [EventScalarWhereInput!]
  upsert: [EventUpsertWithWhereUniqueWithoutAuthorInput!]
}

input EventUpdateManyWithoutVenueInput {
  create: [EventCreateWithoutVenueInput!]
  connect: [EventWhereUniqueInput!]
  disconnect: [EventWhereUniqueInput!]
  delete: [EventWhereUniqueInput!]
  update: [EventUpdateWithWhereUniqueWithoutVenueInput!]
  updateMany: [EventUpdateManyWithWhereNestedInput!]
  deleteMany: [EventScalarWhereInput!]
  upsert: [EventUpsertWithWhereUniqueWithoutVenueInput!]
}

input EventUpdateManyWithWhereNestedInput {
  where: EventScalarWhereInput!
  data: EventUpdateManyDataInput!
}

input EventUpdateWithoutAuthorDataInput {
  title: String
  subtitle: String
  organizer: String
  body: String
  imageURL: String
  date: DateTime
  access: String
  accessPoint: String
  target: UserGroup
  deleteUpon: Boolean
  published: Boolean
  venue: VenueUpdateOneRequiredWithoutEventsInput
}

input EventUpdateWithoutVenueDataInput {
  title: String
  subtitle: String
  organizer: String
  body: String
  imageURL: String
  date: DateTime
  access: String
  accessPoint: String
  target: UserGroup
  deleteUpon: Boolean
  published: Boolean
  author: UserUpdateOneRequiredWithoutEventsInput
}

input EventUpdateWithWhereUniqueWithoutAuthorInput {
  where: EventWhereUniqueInput!
  data: EventUpdateWithoutAuthorDataInput!
}

input EventUpdateWithWhereUniqueWithoutVenueInput {
  where: EventWhereUniqueInput!
  data: EventUpdateWithoutVenueDataInput!
}

input EventUpsertWithWhereUniqueWithoutAuthorInput {
  where: EventWhereUniqueInput!
  update: EventUpdateWithoutAuthorDataInput!
  create: EventCreateWithoutAuthorInput!
}

input EventUpsertWithWhereUniqueWithoutVenueInput {
  where: EventWhereUniqueInput!
  update: EventUpdateWithoutVenueDataInput!
  create: EventCreateWithoutVenueInput!
}

input EventWhereInput {
  """Logical AND on all given filters."""
  AND: [EventWhereInput!]

  """Logical OR on all given filters."""
  OR: [EventWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EventWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  subtitle: String

  """All values that are not equal to given value."""
  subtitle_not: String

  """All values that are contained in given list."""
  subtitle_in: [String!]

  """All values that are not contained in given list."""
  subtitle_not_in: [String!]

  """All values less than the given value."""
  subtitle_lt: String

  """All values less than or equal the given value."""
  subtitle_lte: String

  """All values greater than the given value."""
  subtitle_gt: String

  """All values greater than or equal the given value."""
  subtitle_gte: String

  """All values containing the given string."""
  subtitle_contains: String

  """All values not containing the given string."""
  subtitle_not_contains: String

  """All values starting with the given string."""
  subtitle_starts_with: String

  """All values not starting with the given string."""
  subtitle_not_starts_with: String

  """All values ending with the given string."""
  subtitle_ends_with: String

  """All values not ending with the given string."""
  subtitle_not_ends_with: String
  organizer: String

  """All values that are not equal to given value."""
  organizer_not: String

  """All values that are contained in given list."""
  organizer_in: [String!]

  """All values that are not contained in given list."""
  organizer_not_in: [String!]

  """All values less than the given value."""
  organizer_lt: String

  """All values less than or equal the given value."""
  organizer_lte: String

  """All values greater than the given value."""
  organizer_gt: String

  """All values greater than or equal the given value."""
  organizer_gte: String

  """All values containing the given string."""
  organizer_contains: String

  """All values not containing the given string."""
  organizer_not_contains: String

  """All values starting with the given string."""
  organizer_starts_with: String

  """All values not starting with the given string."""
  organizer_not_starts_with: String

  """All values ending with the given string."""
  organizer_ends_with: String

  """All values not ending with the given string."""
  organizer_not_ends_with: String
  body: String

  """All values that are not equal to given value."""
  body_not: String

  """All values that are contained in given list."""
  body_in: [String!]

  """All values that are not contained in given list."""
  body_not_in: [String!]

  """All values less than the given value."""
  body_lt: String

  """All values less than or equal the given value."""
  body_lte: String

  """All values greater than the given value."""
  body_gt: String

  """All values greater than or equal the given value."""
  body_gte: String

  """All values containing the given string."""
  body_contains: String

  """All values not containing the given string."""
  body_not_contains: String

  """All values starting with the given string."""
  body_starts_with: String

  """All values not starting with the given string."""
  body_not_starts_with: String

  """All values ending with the given string."""
  body_ends_with: String

  """All values not ending with the given string."""
  body_not_ends_with: String
  imageURL: String

  """All values that are not equal to given value."""
  imageURL_not: String

  """All values that are contained in given list."""
  imageURL_in: [String!]

  """All values that are not contained in given list."""
  imageURL_not_in: [String!]

  """All values less than the given value."""
  imageURL_lt: String

  """All values less than or equal the given value."""
  imageURL_lte: String

  """All values greater than the given value."""
  imageURL_gt: String

  """All values greater than or equal the given value."""
  imageURL_gte: String

  """All values containing the given string."""
  imageURL_contains: String

  """All values not containing the given string."""
  imageURL_not_contains: String

  """All values starting with the given string."""
  imageURL_starts_with: String

  """All values not starting with the given string."""
  imageURL_not_starts_with: String

  """All values ending with the given string."""
  imageURL_ends_with: String

  """All values not ending with the given string."""
  imageURL_not_ends_with: String
  date: DateTime

  """All values that are not equal to given value."""
  date_not: DateTime

  """All values that are contained in given list."""
  date_in: [DateTime!]

  """All values that are not contained in given list."""
  date_not_in: [DateTime!]

  """All values less than the given value."""
  date_lt: DateTime

  """All values less than or equal the given value."""
  date_lte: DateTime

  """All values greater than the given value."""
  date_gt: DateTime

  """All values greater than or equal the given value."""
  date_gte: DateTime
  access: String

  """All values that are not equal to given value."""
  access_not: String

  """All values that are contained in given list."""
  access_in: [String!]

  """All values that are not contained in given list."""
  access_not_in: [String!]

  """All values less than the given value."""
  access_lt: String

  """All values less than or equal the given value."""
  access_lte: String

  """All values greater than the given value."""
  access_gt: String

  """All values greater than or equal the given value."""
  access_gte: String

  """All values containing the given string."""
  access_contains: String

  """All values not containing the given string."""
  access_not_contains: String

  """All values starting with the given string."""
  access_starts_with: String

  """All values not starting with the given string."""
  access_not_starts_with: String

  """All values ending with the given string."""
  access_ends_with: String

  """All values not ending with the given string."""
  access_not_ends_with: String
  accessPoint: String

  """All values that are not equal to given value."""
  accessPoint_not: String

  """All values that are contained in given list."""
  accessPoint_in: [String!]

  """All values that are not contained in given list."""
  accessPoint_not_in: [String!]

  """All values less than the given value."""
  accessPoint_lt: String

  """All values less than or equal the given value."""
  accessPoint_lte: String

  """All values greater than the given value."""
  accessPoint_gt: String

  """All values greater than or equal the given value."""
  accessPoint_gte: String

  """All values containing the given string."""
  accessPoint_contains: String

  """All values not containing the given string."""
  accessPoint_not_contains: String

  """All values starting with the given string."""
  accessPoint_starts_with: String

  """All values not starting with the given string."""
  accessPoint_not_starts_with: String

  """All values ending with the given string."""
  accessPoint_ends_with: String

  """All values not ending with the given string."""
  accessPoint_not_ends_with: String
  target: UserGroup

  """All values that are not equal to given value."""
  target_not: UserGroup

  """All values that are contained in given list."""
  target_in: [UserGroup!]

  """All values that are not contained in given list."""
  target_not_in: [UserGroup!]
  deleteUpon: Boolean

  """All values that are not equal to given value."""
  deleteUpon_not: Boolean
  published: Boolean

  """All values that are not equal to given value."""
  published_not: Boolean
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  author: UserWhereInput
  venue: VenueWhereInput
}

input EventWhereUniqueInput {
  id: ID
}

type Invoice implements Node {
  id: ID!
  order: CustomerOrder!
  timeDue: DateTime!
  timePaid: DateTime
  vatRate: Int!
  netAmount: Float!
  vatAmount: Float!
  grossAmount: Float!
}

"""A connection to a list of items."""
type InvoiceConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [InvoiceEdge]!
  aggregate: AggregateInvoice!
}

input InvoiceCreateInput {
  timeDue: DateTime!
  timePaid: DateTime
  vatRate: Int
  netAmount: Float!
  vatAmount: Float!
  grossAmount: Float!
  order: CustomerOrderCreateOneWithoutInvoiceInput!
}

input InvoiceCreateOneInput {
  create: InvoiceCreateInput
  connect: InvoiceWhereUniqueInput
}

input InvoiceCreateOneWithoutOrderInput {
  create: InvoiceCreateWithoutOrderInput
  connect: InvoiceWhereUniqueInput
}

input InvoiceCreateWithoutOrderInput {
  timeDue: DateTime!
  timePaid: DateTime
  vatRate: Int
  netAmount: Float!
  vatAmount: Float!
  grossAmount: Float!
}

"""An edge in a connection."""
type InvoiceEdge {
  """The item at the end of the edge."""
  node: Invoice!

  """A cursor for use in pagination."""
  cursor: String!
}

enum InvoiceOrderByInput {
  id_ASC
  id_DESC
  timeDue_ASC
  timeDue_DESC
  timePaid_ASC
  timePaid_DESC
  vatRate_ASC
  vatRate_DESC
  netAmount_ASC
  netAmount_DESC
  vatAmount_ASC
  vatAmount_DESC
  grossAmount_ASC
  grossAmount_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type InvoicePreviousValues {
  id: ID!
  timeDue: DateTime!
  timePaid: DateTime
  vatRate: Int!
  netAmount: Float!
  vatAmount: Float!
  grossAmount: Float!
}

type InvoiceSubscriptionPayload {
  mutation: MutationType!
  node: Invoice
  updatedFields: [String!]
  previousValues: InvoicePreviousValues
}

input InvoiceSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [InvoiceSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [InvoiceSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [InvoiceSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: InvoiceWhereInput
}

input InvoiceUpdateDataInput {
  timeDue: DateTime
  timePaid: DateTime
  vatRate: Int
  netAmount: Float
  vatAmount: Float
  grossAmount: Float
  order: CustomerOrderUpdateOneRequiredWithoutInvoiceInput
}

input InvoiceUpdateInput {
  timeDue: DateTime
  timePaid: DateTime
  vatRate: Int
  netAmount: Float
  vatAmount: Float
  grossAmount: Float
  order: CustomerOrderUpdateOneRequiredWithoutInvoiceInput
}

input InvoiceUpdateManyMutationInput {
  timeDue: DateTime
  timePaid: DateTime
  vatRate: Int
  netAmount: Float
  vatAmount: Float
  grossAmount: Float
}

input InvoiceUpdateOneInput {
  create: InvoiceCreateInput
  connect: InvoiceWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: InvoiceUpdateDataInput
  upsert: InvoiceUpsertNestedInput
}

input InvoiceUpdateOneRequiredWithoutOrderInput {
  create: InvoiceCreateWithoutOrderInput
  connect: InvoiceWhereUniqueInput
  update: InvoiceUpdateWithoutOrderDataInput
  upsert: InvoiceUpsertWithoutOrderInput
}

input InvoiceUpdateWithoutOrderDataInput {
  timeDue: DateTime
  timePaid: DateTime
  vatRate: Int
  netAmount: Float
  vatAmount: Float
  grossAmount: Float
}

input InvoiceUpsertNestedInput {
  update: InvoiceUpdateDataInput!
  create: InvoiceCreateInput!
}

input InvoiceUpsertWithoutOrderInput {
  update: InvoiceUpdateWithoutOrderDataInput!
  create: InvoiceCreateWithoutOrderInput!
}

input InvoiceWhereInput {
  """Logical AND on all given filters."""
  AND: [InvoiceWhereInput!]

  """Logical OR on all given filters."""
  OR: [InvoiceWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [InvoiceWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  timeDue: DateTime

  """All values that are not equal to given value."""
  timeDue_not: DateTime

  """All values that are contained in given list."""
  timeDue_in: [DateTime!]

  """All values that are not contained in given list."""
  timeDue_not_in: [DateTime!]

  """All values less than the given value."""
  timeDue_lt: DateTime

  """All values less than or equal the given value."""
  timeDue_lte: DateTime

  """All values greater than the given value."""
  timeDue_gt: DateTime

  """All values greater than or equal the given value."""
  timeDue_gte: DateTime
  timePaid: DateTime

  """All values that are not equal to given value."""
  timePaid_not: DateTime

  """All values that are contained in given list."""
  timePaid_in: [DateTime!]

  """All values that are not contained in given list."""
  timePaid_not_in: [DateTime!]

  """All values less than the given value."""
  timePaid_lt: DateTime

  """All values less than or equal the given value."""
  timePaid_lte: DateTime

  """All values greater than the given value."""
  timePaid_gt: DateTime

  """All values greater than or equal the given value."""
  timePaid_gte: DateTime
  vatRate: Int

  """All values that are not equal to given value."""
  vatRate_not: Int

  """All values that are contained in given list."""
  vatRate_in: [Int!]

  """All values that are not contained in given list."""
  vatRate_not_in: [Int!]

  """All values less than the given value."""
  vatRate_lt: Int

  """All values less than or equal the given value."""
  vatRate_lte: Int

  """All values greater than the given value."""
  vatRate_gt: Int

  """All values greater than or equal the given value."""
  vatRate_gte: Int
  netAmount: Float

  """All values that are not equal to given value."""
  netAmount_not: Float

  """All values that are contained in given list."""
  netAmount_in: [Float!]

  """All values that are not contained in given list."""
  netAmount_not_in: [Float!]

  """All values less than the given value."""
  netAmount_lt: Float

  """All values less than or equal the given value."""
  netAmount_lte: Float

  """All values greater than the given value."""
  netAmount_gt: Float

  """All values greater than or equal the given value."""
  netAmount_gte: Float
  vatAmount: Float

  """All values that are not equal to given value."""
  vatAmount_not: Float

  """All values that are contained in given list."""
  vatAmount_in: [Float!]

  """All values that are not contained in given list."""
  vatAmount_not_in: [Float!]

  """All values less than the given value."""
  vatAmount_lt: Float

  """All values less than or equal the given value."""
  vatAmount_lte: Float

  """All values greater than the given value."""
  vatAmount_gt: Float

  """All values greater than or equal the given value."""
  vatAmount_gte: Float
  grossAmount: Float

  """All values that are not equal to given value."""
  grossAmount_not: Float

  """All values that are contained in given list."""
  grossAmount_in: [Float!]

  """All values that are not contained in given list."""
  grossAmount_not_in: [Float!]

  """All values less than the given value."""
  grossAmount_lt: Float

  """All values less than or equal the given value."""
  grossAmount_lte: Float

  """All values greater than the given value."""
  grossAmount_gt: Float

  """All values greater than or equal the given value."""
  grossAmount_gte: Float
  order: CustomerOrderWhereInput
}

input InvoiceWhereUniqueInput {
  id: ID
}

"""Raw JSON value"""
scalar Json

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createAddress(data: AddressCreateInput!): Address!
  createPhoneNumber(data: PhoneNumberCreateInput!): PhoneNumber!
  createnID(data: nIDCreateInput!): nID!
  createSocialLink(data: SocialLinkCreateInput!): SocialLink!
  createSocialNetwork(data: SocialNetworkCreateInput!): SocialNetwork!
  createNews(data: NewsCreateInput!): News!
  createEvent(data: EventCreateInput!): Event!
  createVenue(data: VenueCreateInput!): Venue!
  createProgram(data: ProgramCreateInput!): Program!
  createBranch(data: BranchCreateInput!): Branch!
  createAdminRole(data: AdminRoleCreateInput!): AdminRole!
  createAdminCompetence(data: AdminCompetenceCreateInput!): AdminCompetence!
  createCongressEdition(data: CongressEditionCreateInput!): CongressEdition!
  createCongressProduct(data: CongressProductCreateInput!): CongressProduct!
  createParticipant(data: ParticipantCreateInput!): Participant!
  createCommitteBoardUser(data: CommitteBoardUserCreateInput!): CommitteBoardUser!
  createProposalReview(data: ProposalReviewCreateInput!): ProposalReview!
  createProposal(data: ProposalCreateInput!): Proposal!
  createProductCategory(data: ProductCategoryCreateInput!): ProductCategory!
  createProductImage(data: ProductImageCreateInput!): ProductImage!
  createCustomerOrder(data: CustomerOrderCreateInput!): CustomerOrder!
  createCustomerOrderItems(data: CustomerOrderItemsCreateInput!): CustomerOrderItems!
  createProduct(data: ProductCreateInput!): Product!
  createUser(data: UserCreateInput!): User!
  createInvoice(data: InvoiceCreateInput!): Invoice!
  updateAddress(data: AddressUpdateInput!, where: AddressWhereUniqueInput!): Address
  updatePhoneNumber(data: PhoneNumberUpdateInput!, where: PhoneNumberWhereUniqueInput!): PhoneNumber
  updatenID(data: nIDUpdateInput!, where: nIDWhereUniqueInput!): nID
  updateSocialLink(data: SocialLinkUpdateInput!, where: SocialLinkWhereUniqueInput!): SocialLink
  updateSocialNetwork(data: SocialNetworkUpdateInput!, where: SocialNetworkWhereUniqueInput!): SocialNetwork
  updateNews(data: NewsUpdateInput!, where: NewsWhereUniqueInput!): News
  updateEvent(data: EventUpdateInput!, where: EventWhereUniqueInput!): Event
  updateVenue(data: VenueUpdateInput!, where: VenueWhereUniqueInput!): Venue
  updateProgram(data: ProgramUpdateInput!, where: ProgramWhereUniqueInput!): Program
  updateBranch(data: BranchUpdateInput!, where: BranchWhereUniqueInput!): Branch
  updateAdminRole(data: AdminRoleUpdateInput!, where: AdminRoleWhereUniqueInput!): AdminRole
  updateAdminCompetence(data: AdminCompetenceUpdateInput!, where: AdminCompetenceWhereUniqueInput!): AdminCompetence
  updateCongressEdition(data: CongressEditionUpdateInput!, where: CongressEditionWhereUniqueInput!): CongressEdition
  updateCongressProduct(data: CongressProductUpdateInput!, where: CongressProductWhereUniqueInput!): CongressProduct
  updateParticipant(data: ParticipantUpdateInput!, where: ParticipantWhereUniqueInput!): Participant
  updateCommitteBoardUser(data: CommitteBoardUserUpdateInput!, where: CommitteBoardUserWhereUniqueInput!): CommitteBoardUser
  updateProposalReview(data: ProposalReviewUpdateInput!, where: ProposalReviewWhereUniqueInput!): ProposalReview
  updateProposal(data: ProposalUpdateInput!, where: ProposalWhereUniqueInput!): Proposal
  updateProductCategory(data: ProductCategoryUpdateInput!, where: ProductCategoryWhereUniqueInput!): ProductCategory
  updateProductImage(data: ProductImageUpdateInput!, where: ProductImageWhereUniqueInput!): ProductImage
  updateCustomerOrder(data: CustomerOrderUpdateInput!, where: CustomerOrderWhereUniqueInput!): CustomerOrder
  updateCustomerOrderItems(data: CustomerOrderItemsUpdateInput!, where: CustomerOrderItemsWhereUniqueInput!): CustomerOrderItems
  updateProduct(data: ProductUpdateInput!, where: ProductWhereUniqueInput!): Product
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateInvoice(data: InvoiceUpdateInput!, where: InvoiceWhereUniqueInput!): Invoice
  deleteAddress(where: AddressWhereUniqueInput!): Address
  deletePhoneNumber(where: PhoneNumberWhereUniqueInput!): PhoneNumber
  deletenID(where: nIDWhereUniqueInput!): nID
  deleteSocialLink(where: SocialLinkWhereUniqueInput!): SocialLink
  deleteSocialNetwork(where: SocialNetworkWhereUniqueInput!): SocialNetwork
  deleteNews(where: NewsWhereUniqueInput!): News
  deleteEvent(where: EventWhereUniqueInput!): Event
  deleteVenue(where: VenueWhereUniqueInput!): Venue
  deleteProgram(where: ProgramWhereUniqueInput!): Program
  deleteBranch(where: BranchWhereUniqueInput!): Branch
  deleteAdminRole(where: AdminRoleWhereUniqueInput!): AdminRole
  deleteAdminCompetence(where: AdminCompetenceWhereUniqueInput!): AdminCompetence
  deleteCongressEdition(where: CongressEditionWhereUniqueInput!): CongressEdition
  deleteCongressProduct(where: CongressProductWhereUniqueInput!): CongressProduct
  deleteParticipant(where: ParticipantWhereUniqueInput!): Participant
  deleteCommitteBoardUser(where: CommitteBoardUserWhereUniqueInput!): CommitteBoardUser
  deleteProposalReview(where: ProposalReviewWhereUniqueInput!): ProposalReview
  deleteProposal(where: ProposalWhereUniqueInput!): Proposal
  deleteProductCategory(where: ProductCategoryWhereUniqueInput!): ProductCategory
  deleteProductImage(where: ProductImageWhereUniqueInput!): ProductImage
  deleteCustomerOrder(where: CustomerOrderWhereUniqueInput!): CustomerOrder
  deleteCustomerOrderItems(where: CustomerOrderItemsWhereUniqueInput!): CustomerOrderItems
  deleteProduct(where: ProductWhereUniqueInput!): Product
  deleteUser(where: UserWhereUniqueInput!): User
  deleteInvoice(where: InvoiceWhereUniqueInput!): Invoice
  upsertAddress(where: AddressWhereUniqueInput!, create: AddressCreateInput!, update: AddressUpdateInput!): Address!
  upsertPhoneNumber(where: PhoneNumberWhereUniqueInput!, create: PhoneNumberCreateInput!, update: PhoneNumberUpdateInput!): PhoneNumber!
  upsertnID(where: nIDWhereUniqueInput!, create: nIDCreateInput!, update: nIDUpdateInput!): nID!
  upsertSocialLink(where: SocialLinkWhereUniqueInput!, create: SocialLinkCreateInput!, update: SocialLinkUpdateInput!): SocialLink!
  upsertSocialNetwork(where: SocialNetworkWhereUniqueInput!, create: SocialNetworkCreateInput!, update: SocialNetworkUpdateInput!): SocialNetwork!
  upsertNews(where: NewsWhereUniqueInput!, create: NewsCreateInput!, update: NewsUpdateInput!): News!
  upsertEvent(where: EventWhereUniqueInput!, create: EventCreateInput!, update: EventUpdateInput!): Event!
  upsertVenue(where: VenueWhereUniqueInput!, create: VenueCreateInput!, update: VenueUpdateInput!): Venue!
  upsertProgram(where: ProgramWhereUniqueInput!, create: ProgramCreateInput!, update: ProgramUpdateInput!): Program!
  upsertBranch(where: BranchWhereUniqueInput!, create: BranchCreateInput!, update: BranchUpdateInput!): Branch!
  upsertAdminRole(where: AdminRoleWhereUniqueInput!, create: AdminRoleCreateInput!, update: AdminRoleUpdateInput!): AdminRole!
  upsertAdminCompetence(where: AdminCompetenceWhereUniqueInput!, create: AdminCompetenceCreateInput!, update: AdminCompetenceUpdateInput!): AdminCompetence!
  upsertCongressEdition(where: CongressEditionWhereUniqueInput!, create: CongressEditionCreateInput!, update: CongressEditionUpdateInput!): CongressEdition!
  upsertCongressProduct(where: CongressProductWhereUniqueInput!, create: CongressProductCreateInput!, update: CongressProductUpdateInput!): CongressProduct!
  upsertParticipant(where: ParticipantWhereUniqueInput!, create: ParticipantCreateInput!, update: ParticipantUpdateInput!): Participant!
  upsertCommitteBoardUser(where: CommitteBoardUserWhereUniqueInput!, create: CommitteBoardUserCreateInput!, update: CommitteBoardUserUpdateInput!): CommitteBoardUser!
  upsertProposalReview(where: ProposalReviewWhereUniqueInput!, create: ProposalReviewCreateInput!, update: ProposalReviewUpdateInput!): ProposalReview!
  upsertProposal(where: ProposalWhereUniqueInput!, create: ProposalCreateInput!, update: ProposalUpdateInput!): Proposal!
  upsertProductCategory(where: ProductCategoryWhereUniqueInput!, create: ProductCategoryCreateInput!, update: ProductCategoryUpdateInput!): ProductCategory!
  upsertProductImage(where: ProductImageWhereUniqueInput!, create: ProductImageCreateInput!, update: ProductImageUpdateInput!): ProductImage!
  upsertCustomerOrder(where: CustomerOrderWhereUniqueInput!, create: CustomerOrderCreateInput!, update: CustomerOrderUpdateInput!): CustomerOrder!
  upsertCustomerOrderItems(where: CustomerOrderItemsWhereUniqueInput!, create: CustomerOrderItemsCreateInput!, update: CustomerOrderItemsUpdateInput!): CustomerOrderItems!
  upsertProduct(where: ProductWhereUniqueInput!, create: ProductCreateInput!, update: ProductUpdateInput!): Product!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertInvoice(where: InvoiceWhereUniqueInput!, create: InvoiceCreateInput!, update: InvoiceUpdateInput!): Invoice!
  updateManyAddresses(data: AddressUpdateManyMutationInput!, where: AddressWhereInput): BatchPayload!
  updateManyPhoneNumbers(data: PhoneNumberUpdateManyMutationInput!, where: PhoneNumberWhereInput): BatchPayload!
  updateManyNIDs(data: nIDUpdateManyMutationInput!, where: nIDWhereInput): BatchPayload!
  updateManySocialNetworks(data: SocialNetworkUpdateManyMutationInput!, where: SocialNetworkWhereInput): BatchPayload!
  updateManyNewses(data: NewsUpdateManyMutationInput!, where: NewsWhereInput): BatchPayload!
  updateManyEvents(data: EventUpdateManyMutationInput!, where: EventWhereInput): BatchPayload!
  updateManyVenues(data: VenueUpdateManyMutationInput!, where: VenueWhereInput): BatchPayload!
  updateManyPrograms(data: ProgramUpdateManyMutationInput!, where: ProgramWhereInput): BatchPayload!
  updateManyBranches(data: BranchUpdateManyMutationInput!, where: BranchWhereInput): BatchPayload!
  updateManyAdminRoles(data: AdminRoleUpdateManyMutationInput!, where: AdminRoleWhereInput): BatchPayload!
  updateManyAdminCompetences(data: AdminCompetenceUpdateManyMutationInput!, where: AdminCompetenceWhereInput): BatchPayload!
  updateManyCongressEditions(data: CongressEditionUpdateManyMutationInput!, where: CongressEditionWhereInput): BatchPayload!
  updateManyParticipants(data: ParticipantUpdateManyMutationInput!, where: ParticipantWhereInput): BatchPayload!
  updateManyProposalReviews(data: ProposalReviewUpdateManyMutationInput!, where: ProposalReviewWhereInput): BatchPayload!
  updateManyProposals(data: ProposalUpdateManyMutationInput!, where: ProposalWhereInput): BatchPayload!
  updateManyProductCategories(data: ProductCategoryUpdateManyMutationInput!, where: ProductCategoryWhereInput): BatchPayload!
  updateManyProductImages(data: ProductImageUpdateManyMutationInput!, where: ProductImageWhereInput): BatchPayload!
  updateManyCustomerOrderItemses(data: CustomerOrderItemsUpdateManyMutationInput!, where: CustomerOrderItemsWhereInput): BatchPayload!
  updateManyProducts(data: ProductUpdateManyMutationInput!, where: ProductWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateManyInvoices(data: InvoiceUpdateManyMutationInput!, where: InvoiceWhereInput): BatchPayload!
  deleteManyAddresses(where: AddressWhereInput): BatchPayload!
  deleteManyPhoneNumbers(where: PhoneNumberWhereInput): BatchPayload!
  deleteManyNIDs(where: nIDWhereInput): BatchPayload!
  deleteManySocialLinks(where: SocialLinkWhereInput): BatchPayload!
  deleteManySocialNetworks(where: SocialNetworkWhereInput): BatchPayload!
  deleteManyNewses(where: NewsWhereInput): BatchPayload!
  deleteManyEvents(where: EventWhereInput): BatchPayload!
  deleteManyVenues(where: VenueWhereInput): BatchPayload!
  deleteManyPrograms(where: ProgramWhereInput): BatchPayload!
  deleteManyBranches(where: BranchWhereInput): BatchPayload!
  deleteManyAdminRoles(where: AdminRoleWhereInput): BatchPayload!
  deleteManyAdminCompetences(where: AdminCompetenceWhereInput): BatchPayload!
  deleteManyCongressEditions(where: CongressEditionWhereInput): BatchPayload!
  deleteManyCongressProducts(where: CongressProductWhereInput): BatchPayload!
  deleteManyParticipants(where: ParticipantWhereInput): BatchPayload!
  deleteManyCommitteBoardUsers(where: CommitteBoardUserWhereInput): BatchPayload!
  deleteManyProposalReviews(where: ProposalReviewWhereInput): BatchPayload!
  deleteManyProposals(where: ProposalWhereInput): BatchPayload!
  deleteManyProductCategories(where: ProductCategoryWhereInput): BatchPayload!
  deleteManyProductImages(where: ProductImageWhereInput): BatchPayload!
  deleteManyCustomerOrders(where: CustomerOrderWhereInput): BatchPayload!
  deleteManyCustomerOrderItemses(where: CustomerOrderItemsWhereInput): BatchPayload!
  deleteManyProducts(where: ProductWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyInvoices(where: InvoiceWhereInput): BatchPayload!
  executeRaw(database: PrismaDatabase, query: String!): Json!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

type News implements Node {
  id: ID!
  author: User!
  title: String!
  subtitle: String
  body: String!
  imageURL: String
  expiration: DateTime
  category: String
  featured: Boolean
  target: UserGroup!
  deleteUpon: Boolean
  published: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type NewsConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [NewsEdge]!
  aggregate: AggregateNews!
}

input NewsCreateInput {
  title: String!
  subtitle: String
  body: String!
  imageURL: String
  expiration: DateTime
  category: String
  featured: Boolean
  target: UserGroup!
  deleteUpon: Boolean
  published: Boolean
  author: UserCreateOneWithoutNewsesInput!
}

input NewsCreateManyWithoutAuthorInput {
  create: [NewsCreateWithoutAuthorInput!]
  connect: [NewsWhereUniqueInput!]
}

input NewsCreateWithoutAuthorInput {
  title: String!
  subtitle: String
  body: String!
  imageURL: String
  expiration: DateTime
  category: String
  featured: Boolean
  target: UserGroup!
  deleteUpon: Boolean
  published: Boolean
}

"""An edge in a connection."""
type NewsEdge {
  """The item at the end of the edge."""
  node: News!

  """A cursor for use in pagination."""
  cursor: String!
}

enum NewsOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  subtitle_ASC
  subtitle_DESC
  body_ASC
  body_DESC
  imageURL_ASC
  imageURL_DESC
  expiration_ASC
  expiration_DESC
  category_ASC
  category_DESC
  featured_ASC
  featured_DESC
  target_ASC
  target_DESC
  deleteUpon_ASC
  deleteUpon_DESC
  published_ASC
  published_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type NewsPreviousValues {
  id: ID!
  title: String!
  subtitle: String
  body: String!
  imageURL: String
  expiration: DateTime
  category: String
  featured: Boolean
  target: UserGroup!
  deleteUpon: Boolean
  published: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input NewsScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [NewsScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [NewsScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [NewsScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  subtitle: String

  """All values that are not equal to given value."""
  subtitle_not: String

  """All values that are contained in given list."""
  subtitle_in: [String!]

  """All values that are not contained in given list."""
  subtitle_not_in: [String!]

  """All values less than the given value."""
  subtitle_lt: String

  """All values less than or equal the given value."""
  subtitle_lte: String

  """All values greater than the given value."""
  subtitle_gt: String

  """All values greater than or equal the given value."""
  subtitle_gte: String

  """All values containing the given string."""
  subtitle_contains: String

  """All values not containing the given string."""
  subtitle_not_contains: String

  """All values starting with the given string."""
  subtitle_starts_with: String

  """All values not starting with the given string."""
  subtitle_not_starts_with: String

  """All values ending with the given string."""
  subtitle_ends_with: String

  """All values not ending with the given string."""
  subtitle_not_ends_with: String
  body: String

  """All values that are not equal to given value."""
  body_not: String

  """All values that are contained in given list."""
  body_in: [String!]

  """All values that are not contained in given list."""
  body_not_in: [String!]

  """All values less than the given value."""
  body_lt: String

  """All values less than or equal the given value."""
  body_lte: String

  """All values greater than the given value."""
  body_gt: String

  """All values greater than or equal the given value."""
  body_gte: String

  """All values containing the given string."""
  body_contains: String

  """All values not containing the given string."""
  body_not_contains: String

  """All values starting with the given string."""
  body_starts_with: String

  """All values not starting with the given string."""
  body_not_starts_with: String

  """All values ending with the given string."""
  body_ends_with: String

  """All values not ending with the given string."""
  body_not_ends_with: String
  imageURL: String

  """All values that are not equal to given value."""
  imageURL_not: String

  """All values that are contained in given list."""
  imageURL_in: [String!]

  """All values that are not contained in given list."""
  imageURL_not_in: [String!]

  """All values less than the given value."""
  imageURL_lt: String

  """All values less than or equal the given value."""
  imageURL_lte: String

  """All values greater than the given value."""
  imageURL_gt: String

  """All values greater than or equal the given value."""
  imageURL_gte: String

  """All values containing the given string."""
  imageURL_contains: String

  """All values not containing the given string."""
  imageURL_not_contains: String

  """All values starting with the given string."""
  imageURL_starts_with: String

  """All values not starting with the given string."""
  imageURL_not_starts_with: String

  """All values ending with the given string."""
  imageURL_ends_with: String

  """All values not ending with the given string."""
  imageURL_not_ends_with: String
  expiration: DateTime

  """All values that are not equal to given value."""
  expiration_not: DateTime

  """All values that are contained in given list."""
  expiration_in: [DateTime!]

  """All values that are not contained in given list."""
  expiration_not_in: [DateTime!]

  """All values less than the given value."""
  expiration_lt: DateTime

  """All values less than or equal the given value."""
  expiration_lte: DateTime

  """All values greater than the given value."""
  expiration_gt: DateTime

  """All values greater than or equal the given value."""
  expiration_gte: DateTime
  category: String

  """All values that are not equal to given value."""
  category_not: String

  """All values that are contained in given list."""
  category_in: [String!]

  """All values that are not contained in given list."""
  category_not_in: [String!]

  """All values less than the given value."""
  category_lt: String

  """All values less than or equal the given value."""
  category_lte: String

  """All values greater than the given value."""
  category_gt: String

  """All values greater than or equal the given value."""
  category_gte: String

  """All values containing the given string."""
  category_contains: String

  """All values not containing the given string."""
  category_not_contains: String

  """All values starting with the given string."""
  category_starts_with: String

  """All values not starting with the given string."""
  category_not_starts_with: String

  """All values ending with the given string."""
  category_ends_with: String

  """All values not ending with the given string."""
  category_not_ends_with: String
  featured: Boolean

  """All values that are not equal to given value."""
  featured_not: Boolean
  target: UserGroup

  """All values that are not equal to given value."""
  target_not: UserGroup

  """All values that are contained in given list."""
  target_in: [UserGroup!]

  """All values that are not contained in given list."""
  target_not_in: [UserGroup!]
  deleteUpon: Boolean

  """All values that are not equal to given value."""
  deleteUpon_not: Boolean
  published: Boolean

  """All values that are not equal to given value."""
  published_not: Boolean
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type NewsSubscriptionPayload {
  mutation: MutationType!
  node: News
  updatedFields: [String!]
  previousValues: NewsPreviousValues
}

input NewsSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [NewsSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [NewsSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [NewsSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: NewsWhereInput
}

input NewsUpdateInput {
  title: String
  subtitle: String
  body: String
  imageURL: String
  expiration: DateTime
  category: String
  featured: Boolean
  target: UserGroup
  deleteUpon: Boolean
  published: Boolean
  author: UserUpdateOneRequiredWithoutNewsesInput
}

input NewsUpdateManyDataInput {
  title: String
  subtitle: String
  body: String
  imageURL: String
  expiration: DateTime
  category: String
  featured: Boolean
  target: UserGroup
  deleteUpon: Boolean
  published: Boolean
}

input NewsUpdateManyMutationInput {
  title: String
  subtitle: String
  body: String
  imageURL: String
  expiration: DateTime
  category: String
  featured: Boolean
  target: UserGroup
  deleteUpon: Boolean
  published: Boolean
}

input NewsUpdateManyWithoutAuthorInput {
  create: [NewsCreateWithoutAuthorInput!]
  connect: [NewsWhereUniqueInput!]
  disconnect: [NewsWhereUniqueInput!]
  delete: [NewsWhereUniqueInput!]
  update: [NewsUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [NewsUpdateManyWithWhereNestedInput!]
  deleteMany: [NewsScalarWhereInput!]
  upsert: [NewsUpsertWithWhereUniqueWithoutAuthorInput!]
}

input NewsUpdateManyWithWhereNestedInput {
  where: NewsScalarWhereInput!
  data: NewsUpdateManyDataInput!
}

input NewsUpdateWithoutAuthorDataInput {
  title: String
  subtitle: String
  body: String
  imageURL: String
  expiration: DateTime
  category: String
  featured: Boolean
  target: UserGroup
  deleteUpon: Boolean
  published: Boolean
}

input NewsUpdateWithWhereUniqueWithoutAuthorInput {
  where: NewsWhereUniqueInput!
  data: NewsUpdateWithoutAuthorDataInput!
}

input NewsUpsertWithWhereUniqueWithoutAuthorInput {
  where: NewsWhereUniqueInput!
  update: NewsUpdateWithoutAuthorDataInput!
  create: NewsCreateWithoutAuthorInput!
}

input NewsWhereInput {
  """Logical AND on all given filters."""
  AND: [NewsWhereInput!]

  """Logical OR on all given filters."""
  OR: [NewsWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [NewsWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  subtitle: String

  """All values that are not equal to given value."""
  subtitle_not: String

  """All values that are contained in given list."""
  subtitle_in: [String!]

  """All values that are not contained in given list."""
  subtitle_not_in: [String!]

  """All values less than the given value."""
  subtitle_lt: String

  """All values less than or equal the given value."""
  subtitle_lte: String

  """All values greater than the given value."""
  subtitle_gt: String

  """All values greater than or equal the given value."""
  subtitle_gte: String

  """All values containing the given string."""
  subtitle_contains: String

  """All values not containing the given string."""
  subtitle_not_contains: String

  """All values starting with the given string."""
  subtitle_starts_with: String

  """All values not starting with the given string."""
  subtitle_not_starts_with: String

  """All values ending with the given string."""
  subtitle_ends_with: String

  """All values not ending with the given string."""
  subtitle_not_ends_with: String
  body: String

  """All values that are not equal to given value."""
  body_not: String

  """All values that are contained in given list."""
  body_in: [String!]

  """All values that are not contained in given list."""
  body_not_in: [String!]

  """All values less than the given value."""
  body_lt: String

  """All values less than or equal the given value."""
  body_lte: String

  """All values greater than the given value."""
  body_gt: String

  """All values greater than or equal the given value."""
  body_gte: String

  """All values containing the given string."""
  body_contains: String

  """All values not containing the given string."""
  body_not_contains: String

  """All values starting with the given string."""
  body_starts_with: String

  """All values not starting with the given string."""
  body_not_starts_with: String

  """All values ending with the given string."""
  body_ends_with: String

  """All values not ending with the given string."""
  body_not_ends_with: String
  imageURL: String

  """All values that are not equal to given value."""
  imageURL_not: String

  """All values that are contained in given list."""
  imageURL_in: [String!]

  """All values that are not contained in given list."""
  imageURL_not_in: [String!]

  """All values less than the given value."""
  imageURL_lt: String

  """All values less than or equal the given value."""
  imageURL_lte: String

  """All values greater than the given value."""
  imageURL_gt: String

  """All values greater than or equal the given value."""
  imageURL_gte: String

  """All values containing the given string."""
  imageURL_contains: String

  """All values not containing the given string."""
  imageURL_not_contains: String

  """All values starting with the given string."""
  imageURL_starts_with: String

  """All values not starting with the given string."""
  imageURL_not_starts_with: String

  """All values ending with the given string."""
  imageURL_ends_with: String

  """All values not ending with the given string."""
  imageURL_not_ends_with: String
  expiration: DateTime

  """All values that are not equal to given value."""
  expiration_not: DateTime

  """All values that are contained in given list."""
  expiration_in: [DateTime!]

  """All values that are not contained in given list."""
  expiration_not_in: [DateTime!]

  """All values less than the given value."""
  expiration_lt: DateTime

  """All values less than or equal the given value."""
  expiration_lte: DateTime

  """All values greater than the given value."""
  expiration_gt: DateTime

  """All values greater than or equal the given value."""
  expiration_gte: DateTime
  category: String

  """All values that are not equal to given value."""
  category_not: String

  """All values that are contained in given list."""
  category_in: [String!]

  """All values that are not contained in given list."""
  category_not_in: [String!]

  """All values less than the given value."""
  category_lt: String

  """All values less than or equal the given value."""
  category_lte: String

  """All values greater than the given value."""
  category_gt: String

  """All values greater than or equal the given value."""
  category_gte: String

  """All values containing the given string."""
  category_contains: String

  """All values not containing the given string."""
  category_not_contains: String

  """All values starting with the given string."""
  category_starts_with: String

  """All values not starting with the given string."""
  category_not_starts_with: String

  """All values ending with the given string."""
  category_ends_with: String

  """All values not ending with the given string."""
  category_not_ends_with: String
  featured: Boolean

  """All values that are not equal to given value."""
  featured_not: Boolean
  target: UserGroup

  """All values that are not equal to given value."""
  target_not: UserGroup

  """All values that are contained in given list."""
  target_in: [UserGroup!]

  """All values that are not contained in given list."""
  target_not_in: [UserGroup!]
  deleteUpon: Boolean

  """All values that are not equal to given value."""
  deleteUpon_not: Boolean
  published: Boolean

  """All values that are not equal to given value."""
  published_not: Boolean
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  author: UserWhereInput
}

input NewsWhereUniqueInput {
  id: ID
}

type nID {
  nID: String!
  sourceType: nIdType!
  verified: Boolean!
  user: User!
}

"""A connection to a list of items."""
type nIDConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [nIDEdge]!
  aggregate: AggregatenID!
}

input nIDCreateInput {
  nID: String!
  sourceType: nIdType!
  verified: Boolean
  user: UserCreateOneWithoutNIDInput!
}

input nIDCreateOneWithoutUserInput {
  create: nIDCreateWithoutUserInput
  connect: nIDWhereUniqueInput
}

input nIDCreateWithoutUserInput {
  nID: String!
  sourceType: nIdType!
  verified: Boolean
}

"""An edge in a connection."""
type nIDEdge {
  """The item at the end of the edge."""
  node: nID!

  """A cursor for use in pagination."""
  cursor: String!
}

enum nIDOrderByInput {
  nID_ASC
  nID_DESC
  sourceType_ASC
  sourceType_DESC
  verified_ASC
  verified_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type nIDPreviousValues {
  nID: String!
  sourceType: nIdType!
  verified: Boolean!
}

type nIDSubscriptionPayload {
  mutation: MutationType!
  node: nID
  updatedFields: [String!]
  previousValues: nIDPreviousValues
}

input nIDSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [nIDSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [nIDSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [nIDSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: nIDWhereInput
}

enum nIdType {
  PASSPORT
  NATIONALID
  SOCIALSECURITY
  OTHER
}

input nIDUpdateInput {
  nID: String
  sourceType: nIdType
  verified: Boolean
  user: UserUpdateOneRequiredWithoutNIDInput
}

input nIDUpdateManyMutationInput {
  nID: String
  sourceType: nIdType
  verified: Boolean
}

input nIDUpdateOneWithoutUserInput {
  create: nIDCreateWithoutUserInput
  connect: nIDWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: nIDUpdateWithoutUserDataInput
  upsert: nIDUpsertWithoutUserInput
}

input nIDUpdateWithoutUserDataInput {
  nID: String
  sourceType: nIdType
  verified: Boolean
}

input nIDUpsertWithoutUserInput {
  update: nIDUpdateWithoutUserDataInput!
  create: nIDCreateWithoutUserInput!
}

input nIDWhereInput {
  """Logical AND on all given filters."""
  AND: [nIDWhereInput!]

  """Logical OR on all given filters."""
  OR: [nIDWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [nIDWhereInput!]
  nID: String

  """All values that are not equal to given value."""
  nID_not: String

  """All values that are contained in given list."""
  nID_in: [String!]

  """All values that are not contained in given list."""
  nID_not_in: [String!]

  """All values less than the given value."""
  nID_lt: String

  """All values less than or equal the given value."""
  nID_lte: String

  """All values greater than the given value."""
  nID_gt: String

  """All values greater than or equal the given value."""
  nID_gte: String

  """All values containing the given string."""
  nID_contains: String

  """All values not containing the given string."""
  nID_not_contains: String

  """All values starting with the given string."""
  nID_starts_with: String

  """All values not starting with the given string."""
  nID_not_starts_with: String

  """All values ending with the given string."""
  nID_ends_with: String

  """All values not ending with the given string."""
  nID_not_ends_with: String
  sourceType: nIdType

  """All values that are not equal to given value."""
  sourceType_not: nIdType

  """All values that are contained in given list."""
  sourceType_in: [nIdType!]

  """All values that are not contained in given list."""
  sourceType_not_in: [nIdType!]
  verified: Boolean

  """All values that are not equal to given value."""
  verified_not: Boolean
  user: UserWhereInput
}

input nIDWhereUniqueInput {
  nID: String
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Participant implements Node {
  id: ID!
  user: User!
  type: ParticipationType!
  participationStatus: ParticipationStatus!
  congress: CongressEdition!
  proposals(where: ProposalWhereInput, orderBy: ProposalOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Proposal!]
  paymentSettled: Boolean!
  authorized: Boolean!
  invoiceID: Invoice
}

"""A connection to a list of items."""
type ParticipantConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ParticipantEdge]!
  aggregate: AggregateParticipant!
}

input ParticipantCreateInput {
  type: ParticipationType!
  participationStatus: ParticipationStatus
  paymentSettled: Boolean
  authorized: Boolean
  user: UserCreateOneInput!
  congress: CongressEditionCreateOneWithoutParticipantsInput!
  proposals: ProposalCreateManyWithoutSpeakerApplicationInput
  invoiceID: InvoiceCreateOneInput
}

input ParticipantCreateManyWithoutCongressInput {
  create: [ParticipantCreateWithoutCongressInput!]
  connect: [ParticipantWhereUniqueInput!]
}

input ParticipantCreateOneWithoutProposalsInput {
  create: ParticipantCreateWithoutProposalsInput
  connect: ParticipantWhereUniqueInput
}

input ParticipantCreateWithoutCongressInput {
  type: ParticipationType!
  participationStatus: ParticipationStatus
  paymentSettled: Boolean
  authorized: Boolean
  user: UserCreateOneInput!
  proposals: ProposalCreateManyWithoutSpeakerApplicationInput
  invoiceID: InvoiceCreateOneInput
}

input ParticipantCreateWithoutProposalsInput {
  type: ParticipationType!
  participationStatus: ParticipationStatus
  paymentSettled: Boolean
  authorized: Boolean
  user: UserCreateOneInput!
  congress: CongressEditionCreateOneWithoutParticipantsInput!
  invoiceID: InvoiceCreateOneInput
}

"""An edge in a connection."""
type ParticipantEdge {
  """The item at the end of the edge."""
  node: Participant!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ParticipantOrderByInput {
  id_ASC
  id_DESC
  type_ASC
  type_DESC
  participationStatus_ASC
  participationStatus_DESC
  paymentSettled_ASC
  paymentSettled_DESC
  authorized_ASC
  authorized_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ParticipantPreviousValues {
  id: ID!
  type: ParticipationType!
  participationStatus: ParticipationStatus!
  paymentSettled: Boolean!
  authorized: Boolean!
}

input ParticipantScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ParticipantScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ParticipantScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ParticipantScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  type: ParticipationType

  """All values that are not equal to given value."""
  type_not: ParticipationType

  """All values that are contained in given list."""
  type_in: [ParticipationType!]

  """All values that are not contained in given list."""
  type_not_in: [ParticipationType!]
  participationStatus: ParticipationStatus

  """All values that are not equal to given value."""
  participationStatus_not: ParticipationStatus

  """All values that are contained in given list."""
  participationStatus_in: [ParticipationStatus!]

  """All values that are not contained in given list."""
  participationStatus_not_in: [ParticipationStatus!]
  paymentSettled: Boolean

  """All values that are not equal to given value."""
  paymentSettled_not: Boolean
  authorized: Boolean

  """All values that are not equal to given value."""
  authorized_not: Boolean
}

type ParticipantSubscriptionPayload {
  mutation: MutationType!
  node: Participant
  updatedFields: [String!]
  previousValues: ParticipantPreviousValues
}

input ParticipantSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ParticipantSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ParticipantSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ParticipantSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ParticipantWhereInput
}

input ParticipantUpdateInput {
  type: ParticipationType
  participationStatus: ParticipationStatus
  paymentSettled: Boolean
  authorized: Boolean
  user: UserUpdateOneRequiredInput
  congress: CongressEditionUpdateOneRequiredWithoutParticipantsInput
  proposals: ProposalUpdateManyWithoutSpeakerApplicationInput
  invoiceID: InvoiceUpdateOneInput
}

input ParticipantUpdateManyDataInput {
  type: ParticipationType
  participationStatus: ParticipationStatus
  paymentSettled: Boolean
  authorized: Boolean
}

input ParticipantUpdateManyMutationInput {
  type: ParticipationType
  participationStatus: ParticipationStatus
  paymentSettled: Boolean
  authorized: Boolean
}

input ParticipantUpdateManyWithoutCongressInput {
  create: [ParticipantCreateWithoutCongressInput!]
  connect: [ParticipantWhereUniqueInput!]
  disconnect: [ParticipantWhereUniqueInput!]
  delete: [ParticipantWhereUniqueInput!]
  update: [ParticipantUpdateWithWhereUniqueWithoutCongressInput!]
  updateMany: [ParticipantUpdateManyWithWhereNestedInput!]
  deleteMany: [ParticipantScalarWhereInput!]
  upsert: [ParticipantUpsertWithWhereUniqueWithoutCongressInput!]
}

input ParticipantUpdateManyWithWhereNestedInput {
  where: ParticipantScalarWhereInput!
  data: ParticipantUpdateManyDataInput!
}

input ParticipantUpdateOneRequiredWithoutProposalsInput {
  create: ParticipantCreateWithoutProposalsInput
  connect: ParticipantWhereUniqueInput
  update: ParticipantUpdateWithoutProposalsDataInput
  upsert: ParticipantUpsertWithoutProposalsInput
}

input ParticipantUpdateWithoutCongressDataInput {
  type: ParticipationType
  participationStatus: ParticipationStatus
  paymentSettled: Boolean
  authorized: Boolean
  user: UserUpdateOneRequiredInput
  proposals: ProposalUpdateManyWithoutSpeakerApplicationInput
  invoiceID: InvoiceUpdateOneInput
}

input ParticipantUpdateWithoutProposalsDataInput {
  type: ParticipationType
  participationStatus: ParticipationStatus
  paymentSettled: Boolean
  authorized: Boolean
  user: UserUpdateOneRequiredInput
  congress: CongressEditionUpdateOneRequiredWithoutParticipantsInput
  invoiceID: InvoiceUpdateOneInput
}

input ParticipantUpdateWithWhereUniqueWithoutCongressInput {
  where: ParticipantWhereUniqueInput!
  data: ParticipantUpdateWithoutCongressDataInput!
}

input ParticipantUpsertWithoutProposalsInput {
  update: ParticipantUpdateWithoutProposalsDataInput!
  create: ParticipantCreateWithoutProposalsInput!
}

input ParticipantUpsertWithWhereUniqueWithoutCongressInput {
  where: ParticipantWhereUniqueInput!
  update: ParticipantUpdateWithoutCongressDataInput!
  create: ParticipantCreateWithoutCongressInput!
}

input ParticipantWhereInput {
  """Logical AND on all given filters."""
  AND: [ParticipantWhereInput!]

  """Logical OR on all given filters."""
  OR: [ParticipantWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ParticipantWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  type: ParticipationType

  """All values that are not equal to given value."""
  type_not: ParticipationType

  """All values that are contained in given list."""
  type_in: [ParticipationType!]

  """All values that are not contained in given list."""
  type_not_in: [ParticipationType!]
  participationStatus: ParticipationStatus

  """All values that are not equal to given value."""
  participationStatus_not: ParticipationStatus

  """All values that are contained in given list."""
  participationStatus_in: [ParticipationStatus!]

  """All values that are not contained in given list."""
  participationStatus_not_in: [ParticipationStatus!]
  paymentSettled: Boolean

  """All values that are not equal to given value."""
  paymentSettled_not: Boolean
  authorized: Boolean

  """All values that are not equal to given value."""
  authorized_not: Boolean
  user: UserWhereInput
  congress: CongressEditionWhereInput
  proposals_every: ProposalWhereInput
  proposals_some: ProposalWhereInput
  proposals_none: ProposalWhereInput
  invoiceID: InvoiceWhereInput
}

input ParticipantWhereUniqueInput {
  id: ID
}

enum ParticipationStatus {
  PREACTIVE
  ACTIVE
  CANCELED
}

enum ParticipationType {
  ATTENDEE
  SPEAKER
}

type PhoneNumber implements Node {
  id: ID!
  countryCode: Int!
  phone: Int!
  verified: Boolean!
  user: User!
}

"""A connection to a list of items."""
type PhoneNumberConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PhoneNumberEdge]!
  aggregate: AggregatePhoneNumber!
}

input PhoneNumberCreateInput {
  countryCode: Int!
  phone: Int!
  verified: Boolean
  user: UserCreateOneWithoutPhoneInput!
}

input PhoneNumberCreateOneWithoutUserInput {
  create: PhoneNumberCreateWithoutUserInput
  connect: PhoneNumberWhereUniqueInput
}

input PhoneNumberCreateWithoutUserInput {
  countryCode: Int!
  phone: Int!
  verified: Boolean
}

"""An edge in a connection."""
type PhoneNumberEdge {
  """The item at the end of the edge."""
  node: PhoneNumber!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PhoneNumberOrderByInput {
  id_ASC
  id_DESC
  countryCode_ASC
  countryCode_DESC
  phone_ASC
  phone_DESC
  verified_ASC
  verified_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type PhoneNumberPreviousValues {
  id: ID!
  countryCode: Int!
  phone: Int!
  verified: Boolean!
}

type PhoneNumberSubscriptionPayload {
  mutation: MutationType!
  node: PhoneNumber
  updatedFields: [String!]
  previousValues: PhoneNumberPreviousValues
}

input PhoneNumberSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PhoneNumberSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PhoneNumberSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PhoneNumberSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PhoneNumberWhereInput
}

input PhoneNumberUpdateInput {
  countryCode: Int
  phone: Int
  verified: Boolean
  user: UserUpdateOneRequiredWithoutPhoneInput
}

input PhoneNumberUpdateManyMutationInput {
  countryCode: Int
  phone: Int
  verified: Boolean
}

input PhoneNumberUpdateOneWithoutUserInput {
  create: PhoneNumberCreateWithoutUserInput
  connect: PhoneNumberWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: PhoneNumberUpdateWithoutUserDataInput
  upsert: PhoneNumberUpsertWithoutUserInput
}

input PhoneNumberUpdateWithoutUserDataInput {
  countryCode: Int
  phone: Int
  verified: Boolean
}

input PhoneNumberUpsertWithoutUserInput {
  update: PhoneNumberUpdateWithoutUserDataInput!
  create: PhoneNumberCreateWithoutUserInput!
}

input PhoneNumberWhereInput {
  """Logical AND on all given filters."""
  AND: [PhoneNumberWhereInput!]

  """Logical OR on all given filters."""
  OR: [PhoneNumberWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PhoneNumberWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  countryCode: Int

  """All values that are not equal to given value."""
  countryCode_not: Int

  """All values that are contained in given list."""
  countryCode_in: [Int!]

  """All values that are not contained in given list."""
  countryCode_not_in: [Int!]

  """All values less than the given value."""
  countryCode_lt: Int

  """All values less than or equal the given value."""
  countryCode_lte: Int

  """All values greater than the given value."""
  countryCode_gt: Int

  """All values greater than or equal the given value."""
  countryCode_gte: Int
  phone: Int

  """All values that are not equal to given value."""
  phone_not: Int

  """All values that are contained in given list."""
  phone_in: [Int!]

  """All values that are not contained in given list."""
  phone_not_in: [Int!]

  """All values less than the given value."""
  phone_lt: Int

  """All values less than or equal the given value."""
  phone_lte: Int

  """All values greater than the given value."""
  phone_gt: Int

  """All values greater than or equal the given value."""
  phone_gte: Int
  verified: Boolean

  """All values that are not equal to given value."""
  verified_not: Boolean
  user: UserWhereInput
}

input PhoneNumberWhereUniqueInput {
  id: ID
  phone: Int
}

enum PrismaDatabase {
  default
}

type Product implements Node {
  id: ID!
  name: String!
  unitPrice: Float!
  type: ProductType!
  category: ProductCategory!
  images(where: ProductImageWhereInput, orderBy: ProductImageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProductImage!]
}

type ProductCategory implements Node {
  id: ID!
  name: String!
  products(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Product!]
}

"""A connection to a list of items."""
type ProductCategoryConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProductCategoryEdge]!
  aggregate: AggregateProductCategory!
}

input ProductCategoryCreateInput {
  name: String!
  products: ProductCreateManyWithoutCategoryInput
}

input ProductCategoryCreateOneWithoutProductsInput {
  create: ProductCategoryCreateWithoutProductsInput
  connect: ProductCategoryWhereUniqueInput
}

input ProductCategoryCreateWithoutProductsInput {
  name: String!
}

"""An edge in a connection."""
type ProductCategoryEdge {
  """The item at the end of the edge."""
  node: ProductCategory!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ProductCategoryOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ProductCategoryPreviousValues {
  id: ID!
  name: String!
}

type ProductCategorySubscriptionPayload {
  mutation: MutationType!
  node: ProductCategory
  updatedFields: [String!]
  previousValues: ProductCategoryPreviousValues
}

input ProductCategorySubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductCategorySubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProductCategorySubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProductCategorySubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ProductCategoryWhereInput
}

input ProductCategoryUpdateInput {
  name: String
  products: ProductUpdateManyWithoutCategoryInput
}

input ProductCategoryUpdateManyMutationInput {
  name: String
}

input ProductCategoryUpdateOneRequiredWithoutProductsInput {
  create: ProductCategoryCreateWithoutProductsInput
  connect: ProductCategoryWhereUniqueInput
  update: ProductCategoryUpdateWithoutProductsDataInput
  upsert: ProductCategoryUpsertWithoutProductsInput
}

input ProductCategoryUpdateWithoutProductsDataInput {
  name: String
}

input ProductCategoryUpsertWithoutProductsInput {
  update: ProductCategoryUpdateWithoutProductsDataInput!
  create: ProductCategoryCreateWithoutProductsInput!
}

input ProductCategoryWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductCategoryWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProductCategoryWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProductCategoryWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  products_every: ProductWhereInput
  products_some: ProductWhereInput
  products_none: ProductWhereInput
}

input ProductCategoryWhereUniqueInput {
  id: ID
}

"""A connection to a list of items."""
type ProductConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProductEdge]!
  aggregate: AggregateProduct!
}

input ProductCreateInput {
  name: String!
  unitPrice: Float!
  type: ProductType
  category: ProductCategoryCreateOneWithoutProductsInput!
  images: ProductImageCreateManyWithoutProductInput
}

input ProductCreateManyWithoutCategoryInput {
  create: [ProductCreateWithoutCategoryInput!]
  connect: [ProductWhereUniqueInput!]
}

input ProductCreateOneInput {
  create: ProductCreateInput
  connect: ProductWhereUniqueInput
}

input ProductCreateOneWithoutImagesInput {
  create: ProductCreateWithoutImagesInput
  connect: ProductWhereUniqueInput
}

input ProductCreateWithoutCategoryInput {
  name: String!
  unitPrice: Float!
  type: ProductType
  images: ProductImageCreateManyWithoutProductInput
}

input ProductCreateWithoutImagesInput {
  name: String!
  unitPrice: Float!
  type: ProductType
  category: ProductCategoryCreateOneWithoutProductsInput!
}

"""An edge in a connection."""
type ProductEdge {
  """The item at the end of the edge."""
  node: Product!

  """A cursor for use in pagination."""
  cursor: String!
}

type ProductImage implements Node {
  id: ID!
  title: String!
  product: Product!
  imageURL: String!
}

"""A connection to a list of items."""
type ProductImageConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProductImageEdge]!
  aggregate: AggregateProductImage!
}

input ProductImageCreateInput {
  title: String
  imageURL: String!
  product: ProductCreateOneWithoutImagesInput!
}

input ProductImageCreateManyWithoutProductInput {
  create: [ProductImageCreateWithoutProductInput!]
  connect: [ProductImageWhereUniqueInput!]
}

input ProductImageCreateWithoutProductInput {
  title: String
  imageURL: String!
}

"""An edge in a connection."""
type ProductImageEdge {
  """The item at the end of the edge."""
  node: ProductImage!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ProductImageOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  imageURL_ASC
  imageURL_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ProductImagePreviousValues {
  id: ID!
  title: String!
  imageURL: String!
}

input ProductImageScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductImageScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProductImageScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProductImageScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  imageURL: String

  """All values that are not equal to given value."""
  imageURL_not: String

  """All values that are contained in given list."""
  imageURL_in: [String!]

  """All values that are not contained in given list."""
  imageURL_not_in: [String!]

  """All values less than the given value."""
  imageURL_lt: String

  """All values less than or equal the given value."""
  imageURL_lte: String

  """All values greater than the given value."""
  imageURL_gt: String

  """All values greater than or equal the given value."""
  imageURL_gte: String

  """All values containing the given string."""
  imageURL_contains: String

  """All values not containing the given string."""
  imageURL_not_contains: String

  """All values starting with the given string."""
  imageURL_starts_with: String

  """All values not starting with the given string."""
  imageURL_not_starts_with: String

  """All values ending with the given string."""
  imageURL_ends_with: String

  """All values not ending with the given string."""
  imageURL_not_ends_with: String
}

type ProductImageSubscriptionPayload {
  mutation: MutationType!
  node: ProductImage
  updatedFields: [String!]
  previousValues: ProductImagePreviousValues
}

input ProductImageSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductImageSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProductImageSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProductImageSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ProductImageWhereInput
}

input ProductImageUpdateInput {
  title: String
  imageURL: String
  product: ProductUpdateOneRequiredWithoutImagesInput
}

input ProductImageUpdateManyDataInput {
  title: String
  imageURL: String
}

input ProductImageUpdateManyMutationInput {
  title: String
  imageURL: String
}

input ProductImageUpdateManyWithoutProductInput {
  create: [ProductImageCreateWithoutProductInput!]
  connect: [ProductImageWhereUniqueInput!]
  disconnect: [ProductImageWhereUniqueInput!]
  delete: [ProductImageWhereUniqueInput!]
  update: [ProductImageUpdateWithWhereUniqueWithoutProductInput!]
  updateMany: [ProductImageUpdateManyWithWhereNestedInput!]
  deleteMany: [ProductImageScalarWhereInput!]
  upsert: [ProductImageUpsertWithWhereUniqueWithoutProductInput!]
}

input ProductImageUpdateManyWithWhereNestedInput {
  where: ProductImageScalarWhereInput!
  data: ProductImageUpdateManyDataInput!
}

input ProductImageUpdateWithoutProductDataInput {
  title: String
  imageURL: String
}

input ProductImageUpdateWithWhereUniqueWithoutProductInput {
  where: ProductImageWhereUniqueInput!
  data: ProductImageUpdateWithoutProductDataInput!
}

input ProductImageUpsertWithWhereUniqueWithoutProductInput {
  where: ProductImageWhereUniqueInput!
  update: ProductImageUpdateWithoutProductDataInput!
  create: ProductImageCreateWithoutProductInput!
}

input ProductImageWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductImageWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProductImageWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProductImageWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  imageURL: String

  """All values that are not equal to given value."""
  imageURL_not: String

  """All values that are contained in given list."""
  imageURL_in: [String!]

  """All values that are not contained in given list."""
  imageURL_not_in: [String!]

  """All values less than the given value."""
  imageURL_lt: String

  """All values less than or equal the given value."""
  imageURL_lte: String

  """All values greater than the given value."""
  imageURL_gt: String

  """All values greater than or equal the given value."""
  imageURL_gte: String

  """All values containing the given string."""
  imageURL_contains: String

  """All values not containing the given string."""
  imageURL_not_contains: String

  """All values starting with the given string."""
  imageURL_starts_with: String

  """All values not starting with the given string."""
  imageURL_not_starts_with: String

  """All values ending with the given string."""
  imageURL_ends_with: String

  """All values not ending with the given string."""
  imageURL_not_ends_with: String
  product: ProductWhereInput
}

input ProductImageWhereUniqueInput {
  id: ID
}

enum ProductOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  unitPrice_ASC
  unitPrice_DESC
  type_ASC
  type_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ProductPreviousValues {
  id: ID!
  name: String!
  unitPrice: Float!
  type: ProductType!
}

input ProductScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProductScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProductScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  unitPrice: Float

  """All values that are not equal to given value."""
  unitPrice_not: Float

  """All values that are contained in given list."""
  unitPrice_in: [Float!]

  """All values that are not contained in given list."""
  unitPrice_not_in: [Float!]

  """All values less than the given value."""
  unitPrice_lt: Float

  """All values less than or equal the given value."""
  unitPrice_lte: Float

  """All values greater than the given value."""
  unitPrice_gt: Float

  """All values greater than or equal the given value."""
  unitPrice_gte: Float
  type: ProductType

  """All values that are not equal to given value."""
  type_not: ProductType

  """All values that are contained in given list."""
  type_in: [ProductType!]

  """All values that are not contained in given list."""
  type_not_in: [ProductType!]
}

type ProductSubscriptionPayload {
  mutation: MutationType!
  node: Product
  updatedFields: [String!]
  previousValues: ProductPreviousValues
}

input ProductSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProductSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProductSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ProductWhereInput
}

enum ProductType {
  PRODUCT
  SERVICE
}

input ProductUpdateDataInput {
  name: String
  unitPrice: Float
  type: ProductType
  category: ProductCategoryUpdateOneRequiredWithoutProductsInput
  images: ProductImageUpdateManyWithoutProductInput
}

input ProductUpdateInput {
  name: String
  unitPrice: Float
  type: ProductType
  category: ProductCategoryUpdateOneRequiredWithoutProductsInput
  images: ProductImageUpdateManyWithoutProductInput
}

input ProductUpdateManyDataInput {
  name: String
  unitPrice: Float
  type: ProductType
}

input ProductUpdateManyMutationInput {
  name: String
  unitPrice: Float
  type: ProductType
}

input ProductUpdateManyWithoutCategoryInput {
  create: [ProductCreateWithoutCategoryInput!]
  connect: [ProductWhereUniqueInput!]
  disconnect: [ProductWhereUniqueInput!]
  delete: [ProductWhereUniqueInput!]
  update: [ProductUpdateWithWhereUniqueWithoutCategoryInput!]
  updateMany: [ProductUpdateManyWithWhereNestedInput!]
  deleteMany: [ProductScalarWhereInput!]
  upsert: [ProductUpsertWithWhereUniqueWithoutCategoryInput!]
}

input ProductUpdateManyWithWhereNestedInput {
  where: ProductScalarWhereInput!
  data: ProductUpdateManyDataInput!
}

input ProductUpdateOneRequiredInput {
  create: ProductCreateInput
  connect: ProductWhereUniqueInput
  update: ProductUpdateDataInput
  upsert: ProductUpsertNestedInput
}

input ProductUpdateOneRequiredWithoutImagesInput {
  create: ProductCreateWithoutImagesInput
  connect: ProductWhereUniqueInput
  update: ProductUpdateWithoutImagesDataInput
  upsert: ProductUpsertWithoutImagesInput
}

input ProductUpdateWithoutCategoryDataInput {
  name: String
  unitPrice: Float
  type: ProductType
  images: ProductImageUpdateManyWithoutProductInput
}

input ProductUpdateWithoutImagesDataInput {
  name: String
  unitPrice: Float
  type: ProductType
  category: ProductCategoryUpdateOneRequiredWithoutProductsInput
}

input ProductUpdateWithWhereUniqueWithoutCategoryInput {
  where: ProductWhereUniqueInput!
  data: ProductUpdateWithoutCategoryDataInput!
}

input ProductUpsertNestedInput {
  update: ProductUpdateDataInput!
  create: ProductCreateInput!
}

input ProductUpsertWithoutImagesInput {
  update: ProductUpdateWithoutImagesDataInput!
  create: ProductCreateWithoutImagesInput!
}

input ProductUpsertWithWhereUniqueWithoutCategoryInput {
  where: ProductWhereUniqueInput!
  update: ProductUpdateWithoutCategoryDataInput!
  create: ProductCreateWithoutCategoryInput!
}

input ProductWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProductWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProductWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  unitPrice: Float

  """All values that are not equal to given value."""
  unitPrice_not: Float

  """All values that are contained in given list."""
  unitPrice_in: [Float!]

  """All values that are not contained in given list."""
  unitPrice_not_in: [Float!]

  """All values less than the given value."""
  unitPrice_lt: Float

  """All values less than or equal the given value."""
  unitPrice_lte: Float

  """All values greater than the given value."""
  unitPrice_gt: Float

  """All values greater than or equal the given value."""
  unitPrice_gte: Float
  type: ProductType

  """All values that are not equal to given value."""
  type_not: ProductType

  """All values that are contained in given list."""
  type_in: [ProductType!]

  """All values that are not contained in given list."""
  type_not_in: [ProductType!]
  category: ProductCategoryWhereInput
  images_every: ProductImageWhereInput
  images_some: ProductImageWhereInput
  images_none: ProductImageWhereInput
}

input ProductWhereUniqueInput {
  id: ID
}

type Program implements Node {
  id: ID!
  name: String!
  branches(where: BranchWhereInput, orderBy: BranchOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Branch!]
}

"""A connection to a list of items."""
type ProgramConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProgramEdge]!
  aggregate: AggregateProgram!
}

input ProgramCreateInput {
  name: String!
  branches: BranchCreateManyWithoutProgramInput
}

input ProgramCreateOneWithoutBranchesInput {
  create: ProgramCreateWithoutBranchesInput
  connect: ProgramWhereUniqueInput
}

input ProgramCreateWithoutBranchesInput {
  name: String!
}

"""An edge in a connection."""
type ProgramEdge {
  """The item at the end of the edge."""
  node: Program!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ProgramOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ProgramPreviousValues {
  id: ID!
  name: String!
}

type ProgramSubscriptionPayload {
  mutation: MutationType!
  node: Program
  updatedFields: [String!]
  previousValues: ProgramPreviousValues
}

input ProgramSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ProgramSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProgramSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProgramSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ProgramWhereInput
}

input ProgramUpdateInput {
  name: String
  branches: BranchUpdateManyWithoutProgramInput
}

input ProgramUpdateManyMutationInput {
  name: String
}

input ProgramUpdateOneRequiredWithoutBranchesInput {
  create: ProgramCreateWithoutBranchesInput
  connect: ProgramWhereUniqueInput
  update: ProgramUpdateWithoutBranchesDataInput
  upsert: ProgramUpsertWithoutBranchesInput
}

input ProgramUpdateWithoutBranchesDataInput {
  name: String
}

input ProgramUpsertWithoutBranchesInput {
  update: ProgramUpdateWithoutBranchesDataInput!
  create: ProgramCreateWithoutBranchesInput!
}

input ProgramWhereInput {
  """Logical AND on all given filters."""
  AND: [ProgramWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProgramWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProgramWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  branches_every: BranchWhereInput
  branches_some: BranchWhereInput
  branches_none: BranchWhereInput
}

input ProgramWhereUniqueInput {
  id: ID
}

type Proposal implements Node {
  id: ID!
  speakerApplication: Participant!
  abstract: String!
  status: ProposalStatus!
  reviews(where: ProposalReviewWhereInput, orderBy: ProposalReviewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProposalReview!]
}

"""A connection to a list of items."""
type ProposalConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProposalEdge]!
  aggregate: AggregateProposal!
}

input ProposalCreateInput {
  abstract: String!
  status: ProposalStatus
  speakerApplication: ParticipantCreateOneWithoutProposalsInput!
  reviews: ProposalReviewCreateManyWithoutProposalInput
}

input ProposalCreateManyWithoutSpeakerApplicationInput {
  create: [ProposalCreateWithoutSpeakerApplicationInput!]
  connect: [ProposalWhereUniqueInput!]
}

input ProposalCreateOneWithoutReviewsInput {
  create: ProposalCreateWithoutReviewsInput
  connect: ProposalWhereUniqueInput
}

input ProposalCreateWithoutReviewsInput {
  abstract: String!
  status: ProposalStatus
  speakerApplication: ParticipantCreateOneWithoutProposalsInput!
}

input ProposalCreateWithoutSpeakerApplicationInput {
  abstract: String!
  status: ProposalStatus
  reviews: ProposalReviewCreateManyWithoutProposalInput
}

"""An edge in a connection."""
type ProposalEdge {
  """The item at the end of the edge."""
  node: Proposal!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ProposalOrderByInput {
  id_ASC
  id_DESC
  abstract_ASC
  abstract_DESC
  status_ASC
  status_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ProposalPreviousValues {
  id: ID!
  abstract: String!
  status: ProposalStatus!
}

type ProposalReview implements Node {
  id: ID!
  proposal: Proposal!
  committeUser: CommitteBoardUser!
  status: ProposalStatus!
}

"""A connection to a list of items."""
type ProposalReviewConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProposalReviewEdge]!
  aggregate: AggregateProposalReview!
}

input ProposalReviewCreateInput {
  status: ProposalStatus
  proposal: ProposalCreateOneWithoutReviewsInput!
  committeUser: CommitteBoardUserCreateOneWithoutReviewsInput!
}

input ProposalReviewCreateManyWithoutCommitteUserInput {
  create: [ProposalReviewCreateWithoutCommitteUserInput!]
  connect: [ProposalReviewWhereUniqueInput!]
}

input ProposalReviewCreateManyWithoutProposalInput {
  create: [ProposalReviewCreateWithoutProposalInput!]
  connect: [ProposalReviewWhereUniqueInput!]
}

input ProposalReviewCreateWithoutCommitteUserInput {
  status: ProposalStatus
  proposal: ProposalCreateOneWithoutReviewsInput!
}

input ProposalReviewCreateWithoutProposalInput {
  status: ProposalStatus
  committeUser: CommitteBoardUserCreateOneWithoutReviewsInput!
}

"""An edge in a connection."""
type ProposalReviewEdge {
  """The item at the end of the edge."""
  node: ProposalReview!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ProposalReviewOrderByInput {
  id_ASC
  id_DESC
  status_ASC
  status_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ProposalReviewPreviousValues {
  id: ID!
  status: ProposalStatus!
}

input ProposalReviewScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ProposalReviewScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProposalReviewScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProposalReviewScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  status: ProposalStatus

  """All values that are not equal to given value."""
  status_not: ProposalStatus

  """All values that are contained in given list."""
  status_in: [ProposalStatus!]

  """All values that are not contained in given list."""
  status_not_in: [ProposalStatus!]
}

type ProposalReviewSubscriptionPayload {
  mutation: MutationType!
  node: ProposalReview
  updatedFields: [String!]
  previousValues: ProposalReviewPreviousValues
}

input ProposalReviewSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ProposalReviewSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProposalReviewSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProposalReviewSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ProposalReviewWhereInput
}

input ProposalReviewUpdateInput {
  status: ProposalStatus
  proposal: ProposalUpdateOneRequiredWithoutReviewsInput
  committeUser: CommitteBoardUserUpdateOneRequiredWithoutReviewsInput
}

input ProposalReviewUpdateManyDataInput {
  status: ProposalStatus
}

input ProposalReviewUpdateManyMutationInput {
  status: ProposalStatus
}

input ProposalReviewUpdateManyWithoutCommitteUserInput {
  create: [ProposalReviewCreateWithoutCommitteUserInput!]
  connect: [ProposalReviewWhereUniqueInput!]
  disconnect: [ProposalReviewWhereUniqueInput!]
  delete: [ProposalReviewWhereUniqueInput!]
  update: [ProposalReviewUpdateWithWhereUniqueWithoutCommitteUserInput!]
  updateMany: [ProposalReviewUpdateManyWithWhereNestedInput!]
  deleteMany: [ProposalReviewScalarWhereInput!]
  upsert: [ProposalReviewUpsertWithWhereUniqueWithoutCommitteUserInput!]
}

input ProposalReviewUpdateManyWithoutProposalInput {
  create: [ProposalReviewCreateWithoutProposalInput!]
  connect: [ProposalReviewWhereUniqueInput!]
  disconnect: [ProposalReviewWhereUniqueInput!]
  delete: [ProposalReviewWhereUniqueInput!]
  update: [ProposalReviewUpdateWithWhereUniqueWithoutProposalInput!]
  updateMany: [ProposalReviewUpdateManyWithWhereNestedInput!]
  deleteMany: [ProposalReviewScalarWhereInput!]
  upsert: [ProposalReviewUpsertWithWhereUniqueWithoutProposalInput!]
}

input ProposalReviewUpdateManyWithWhereNestedInput {
  where: ProposalReviewScalarWhereInput!
  data: ProposalReviewUpdateManyDataInput!
}

input ProposalReviewUpdateWithoutCommitteUserDataInput {
  status: ProposalStatus
  proposal: ProposalUpdateOneRequiredWithoutReviewsInput
}

input ProposalReviewUpdateWithoutProposalDataInput {
  status: ProposalStatus
  committeUser: CommitteBoardUserUpdateOneRequiredWithoutReviewsInput
}

input ProposalReviewUpdateWithWhereUniqueWithoutCommitteUserInput {
  where: ProposalReviewWhereUniqueInput!
  data: ProposalReviewUpdateWithoutCommitteUserDataInput!
}

input ProposalReviewUpdateWithWhereUniqueWithoutProposalInput {
  where: ProposalReviewWhereUniqueInput!
  data: ProposalReviewUpdateWithoutProposalDataInput!
}

input ProposalReviewUpsertWithWhereUniqueWithoutCommitteUserInput {
  where: ProposalReviewWhereUniqueInput!
  update: ProposalReviewUpdateWithoutCommitteUserDataInput!
  create: ProposalReviewCreateWithoutCommitteUserInput!
}

input ProposalReviewUpsertWithWhereUniqueWithoutProposalInput {
  where: ProposalReviewWhereUniqueInput!
  update: ProposalReviewUpdateWithoutProposalDataInput!
  create: ProposalReviewCreateWithoutProposalInput!
}

input ProposalReviewWhereInput {
  """Logical AND on all given filters."""
  AND: [ProposalReviewWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProposalReviewWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProposalReviewWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  status: ProposalStatus

  """All values that are not equal to given value."""
  status_not: ProposalStatus

  """All values that are contained in given list."""
  status_in: [ProposalStatus!]

  """All values that are not contained in given list."""
  status_not_in: [ProposalStatus!]
  proposal: ProposalWhereInput
  committeUser: CommitteBoardUserWhereInput
}

input ProposalReviewWhereUniqueInput {
  id: ID
}

input ProposalScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ProposalScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProposalScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProposalScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  abstract: String

  """All values that are not equal to given value."""
  abstract_not: String

  """All values that are contained in given list."""
  abstract_in: [String!]

  """All values that are not contained in given list."""
  abstract_not_in: [String!]

  """All values less than the given value."""
  abstract_lt: String

  """All values less than or equal the given value."""
  abstract_lte: String

  """All values greater than the given value."""
  abstract_gt: String

  """All values greater than or equal the given value."""
  abstract_gte: String

  """All values containing the given string."""
  abstract_contains: String

  """All values not containing the given string."""
  abstract_not_contains: String

  """All values starting with the given string."""
  abstract_starts_with: String

  """All values not starting with the given string."""
  abstract_not_starts_with: String

  """All values ending with the given string."""
  abstract_ends_with: String

  """All values not ending with the given string."""
  abstract_not_ends_with: String
  status: ProposalStatus

  """All values that are not equal to given value."""
  status_not: ProposalStatus

  """All values that are contained in given list."""
  status_in: [ProposalStatus!]

  """All values that are not contained in given list."""
  status_not_in: [ProposalStatus!]
}

enum ProposalStatus {
  INREVIEW
  APPROVED
  REJECTED
}

type ProposalSubscriptionPayload {
  mutation: MutationType!
  node: Proposal
  updatedFields: [String!]
  previousValues: ProposalPreviousValues
}

input ProposalSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ProposalSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProposalSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProposalSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ProposalWhereInput
}

input ProposalUpdateInput {
  abstract: String
  status: ProposalStatus
  speakerApplication: ParticipantUpdateOneRequiredWithoutProposalsInput
  reviews: ProposalReviewUpdateManyWithoutProposalInput
}

input ProposalUpdateManyDataInput {
  abstract: String
  status: ProposalStatus
}

input ProposalUpdateManyMutationInput {
  abstract: String
  status: ProposalStatus
}

input ProposalUpdateManyWithoutSpeakerApplicationInput {
  create: [ProposalCreateWithoutSpeakerApplicationInput!]
  connect: [ProposalWhereUniqueInput!]
  disconnect: [ProposalWhereUniqueInput!]
  delete: [ProposalWhereUniqueInput!]
  update: [ProposalUpdateWithWhereUniqueWithoutSpeakerApplicationInput!]
  updateMany: [ProposalUpdateManyWithWhereNestedInput!]
  deleteMany: [ProposalScalarWhereInput!]
  upsert: [ProposalUpsertWithWhereUniqueWithoutSpeakerApplicationInput!]
}

input ProposalUpdateManyWithWhereNestedInput {
  where: ProposalScalarWhereInput!
  data: ProposalUpdateManyDataInput!
}

input ProposalUpdateOneRequiredWithoutReviewsInput {
  create: ProposalCreateWithoutReviewsInput
  connect: ProposalWhereUniqueInput
  update: ProposalUpdateWithoutReviewsDataInput
  upsert: ProposalUpsertWithoutReviewsInput
}

input ProposalUpdateWithoutReviewsDataInput {
  abstract: String
  status: ProposalStatus
  speakerApplication: ParticipantUpdateOneRequiredWithoutProposalsInput
}

input ProposalUpdateWithoutSpeakerApplicationDataInput {
  abstract: String
  status: ProposalStatus
  reviews: ProposalReviewUpdateManyWithoutProposalInput
}

input ProposalUpdateWithWhereUniqueWithoutSpeakerApplicationInput {
  where: ProposalWhereUniqueInput!
  data: ProposalUpdateWithoutSpeakerApplicationDataInput!
}

input ProposalUpsertWithoutReviewsInput {
  update: ProposalUpdateWithoutReviewsDataInput!
  create: ProposalCreateWithoutReviewsInput!
}

input ProposalUpsertWithWhereUniqueWithoutSpeakerApplicationInput {
  where: ProposalWhereUniqueInput!
  update: ProposalUpdateWithoutSpeakerApplicationDataInput!
  create: ProposalCreateWithoutSpeakerApplicationInput!
}

input ProposalWhereInput {
  """Logical AND on all given filters."""
  AND: [ProposalWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProposalWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProposalWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  abstract: String

  """All values that are not equal to given value."""
  abstract_not: String

  """All values that are contained in given list."""
  abstract_in: [String!]

  """All values that are not contained in given list."""
  abstract_not_in: [String!]

  """All values less than the given value."""
  abstract_lt: String

  """All values less than or equal the given value."""
  abstract_lte: String

  """All values greater than the given value."""
  abstract_gt: String

  """All values greater than or equal the given value."""
  abstract_gte: String

  """All values containing the given string."""
  abstract_contains: String

  """All values not containing the given string."""
  abstract_not_contains: String

  """All values starting with the given string."""
  abstract_starts_with: String

  """All values not starting with the given string."""
  abstract_not_starts_with: String

  """All values ending with the given string."""
  abstract_ends_with: String

  """All values not ending with the given string."""
  abstract_not_ends_with: String
  status: ProposalStatus

  """All values that are not equal to given value."""
  status_not: ProposalStatus

  """All values that are contained in given list."""
  status_in: [ProposalStatus!]

  """All values that are not contained in given list."""
  status_not_in: [ProposalStatus!]
  speakerApplication: ParticipantWhereInput
  reviews_every: ProposalReviewWhereInput
  reviews_some: ProposalReviewWhereInput
  reviews_none: ProposalReviewWhereInput
}

input ProposalWhereUniqueInput {
  id: ID
}

type Query {
  addresses(where: AddressWhereInput, orderBy: AddressOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Address]!
  phoneNumbers(where: PhoneNumberWhereInput, orderBy: PhoneNumberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PhoneNumber]!
  nIDs(where: nIDWhereInput, orderBy: nIDOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [nID]!
  socialLinks(where: SocialLinkWhereInput, orderBy: SocialLinkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SocialLink]!
  socialNetworks(where: SocialNetworkWhereInput, orderBy: SocialNetworkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SocialNetwork]!
  newses(where: NewsWhereInput, orderBy: NewsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [News]!
  events(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Event]!
  venues(where: VenueWhereInput, orderBy: VenueOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Venue]!
  programs(where: ProgramWhereInput, orderBy: ProgramOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Program]!
  branches(where: BranchWhereInput, orderBy: BranchOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Branch]!
  adminRoles(where: AdminRoleWhereInput, orderBy: AdminRoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [AdminRole]!
  adminCompetences(where: AdminCompetenceWhereInput, orderBy: AdminCompetenceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [AdminCompetence]!
  congressEditions(where: CongressEditionWhereInput, orderBy: CongressEditionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CongressEdition]!
  congressProducts(where: CongressProductWhereInput, orderBy: CongressProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CongressProduct]!
  participants(where: ParticipantWhereInput, orderBy: ParticipantOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Participant]!
  committeBoardUsers(where: CommitteBoardUserWhereInput, orderBy: CommitteBoardUserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CommitteBoardUser]!
  proposalReviews(where: ProposalReviewWhereInput, orderBy: ProposalReviewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProposalReview]!
  proposals(where: ProposalWhereInput, orderBy: ProposalOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Proposal]!
  productCategories(where: ProductCategoryWhereInput, orderBy: ProductCategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProductCategory]!
  productImages(where: ProductImageWhereInput, orderBy: ProductImageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProductImage]!
  customerOrders(where: CustomerOrderWhereInput, orderBy: CustomerOrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CustomerOrder]!
  customerOrderItemses(where: CustomerOrderItemsWhereInput, orderBy: CustomerOrderItemsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CustomerOrderItems]!
  products(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Product]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  invoices(where: InvoiceWhereInput, orderBy: InvoiceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Invoice]!
  address(where: AddressWhereUniqueInput!): Address
  phoneNumber(where: PhoneNumberWhereUniqueInput!): PhoneNumber
  nID(where: nIDWhereUniqueInput!): nID
  socialLink(where: SocialLinkWhereUniqueInput!): SocialLink
  socialNetwork(where: SocialNetworkWhereUniqueInput!): SocialNetwork
  news(where: NewsWhereUniqueInput!): News
  event(where: EventWhereUniqueInput!): Event
  venue(where: VenueWhereUniqueInput!): Venue
  program(where: ProgramWhereUniqueInput!): Program
  branch(where: BranchWhereUniqueInput!): Branch
  adminRole(where: AdminRoleWhereUniqueInput!): AdminRole
  adminCompetence(where: AdminCompetenceWhereUniqueInput!): AdminCompetence
  congressEdition(where: CongressEditionWhereUniqueInput!): CongressEdition
  congressProduct(where: CongressProductWhereUniqueInput!): CongressProduct
  participant(where: ParticipantWhereUniqueInput!): Participant
  committeBoardUser(where: CommitteBoardUserWhereUniqueInput!): CommitteBoardUser
  proposalReview(where: ProposalReviewWhereUniqueInput!): ProposalReview
  proposal(where: ProposalWhereUniqueInput!): Proposal
  productCategory(where: ProductCategoryWhereUniqueInput!): ProductCategory
  productImage(where: ProductImageWhereUniqueInput!): ProductImage
  customerOrder(where: CustomerOrderWhereUniqueInput!): CustomerOrder
  customerOrderItems(where: CustomerOrderItemsWhereUniqueInput!): CustomerOrderItems
  product(where: ProductWhereUniqueInput!): Product
  user(where: UserWhereUniqueInput!): User
  invoice(where: InvoiceWhereUniqueInput!): Invoice
  addressesConnection(where: AddressWhereInput, orderBy: AddressOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AddressConnection!
  phoneNumbersConnection(where: PhoneNumberWhereInput, orderBy: PhoneNumberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PhoneNumberConnection!
  nIDsConnection(where: nIDWhereInput, orderBy: nIDOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): nIDConnection!
  socialLinksConnection(where: SocialLinkWhereInput, orderBy: SocialLinkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SocialLinkConnection!
  socialNetworksConnection(where: SocialNetworkWhereInput, orderBy: SocialNetworkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SocialNetworkConnection!
  newsesConnection(where: NewsWhereInput, orderBy: NewsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): NewsConnection!
  eventsConnection(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EventConnection!
  venuesConnection(where: VenueWhereInput, orderBy: VenueOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): VenueConnection!
  programsConnection(where: ProgramWhereInput, orderBy: ProgramOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProgramConnection!
  branchesConnection(where: BranchWhereInput, orderBy: BranchOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BranchConnection!
  adminRolesConnection(where: AdminRoleWhereInput, orderBy: AdminRoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AdminRoleConnection!
  adminCompetencesConnection(where: AdminCompetenceWhereInput, orderBy: AdminCompetenceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AdminCompetenceConnection!
  congressEditionsConnection(where: CongressEditionWhereInput, orderBy: CongressEditionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CongressEditionConnection!
  congressProductsConnection(where: CongressProductWhereInput, orderBy: CongressProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CongressProductConnection!
  participantsConnection(where: ParticipantWhereInput, orderBy: ParticipantOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ParticipantConnection!
  committeBoardUsersConnection(where: CommitteBoardUserWhereInput, orderBy: CommitteBoardUserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CommitteBoardUserConnection!
  proposalReviewsConnection(where: ProposalReviewWhereInput, orderBy: ProposalReviewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProposalReviewConnection!
  proposalsConnection(where: ProposalWhereInput, orderBy: ProposalOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProposalConnection!
  productCategoriesConnection(where: ProductCategoryWhereInput, orderBy: ProductCategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProductCategoryConnection!
  productImagesConnection(where: ProductImageWhereInput, orderBy: ProductImageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProductImageConnection!
  customerOrdersConnection(where: CustomerOrderWhereInput, orderBy: CustomerOrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CustomerOrderConnection!
  customerOrderItemsesConnection(where: CustomerOrderItemsWhereInput, orderBy: CustomerOrderItemsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CustomerOrderItemsConnection!
  productsConnection(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProductConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  invoicesConnection(where: InvoiceWhereInput, orderBy: InvoiceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): InvoiceConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type SocialLink implements Node {
  id: ID!
  user: User!
  network: SocialNetwork!
}

"""A connection to a list of items."""
type SocialLinkConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SocialLinkEdge]!
  aggregate: AggregateSocialLink!
}

input SocialLinkCreateInput {
  user: UserCreateOneWithoutSocialLinksInput!
  network: SocialNetworkCreateOneWithoutLinksInput!
}

input SocialLinkCreateManyWithoutNetworkInput {
  create: [SocialLinkCreateWithoutNetworkInput!]
  connect: [SocialLinkWhereUniqueInput!]
}

input SocialLinkCreateManyWithoutUserInput {
  create: [SocialLinkCreateWithoutUserInput!]
  connect: [SocialLinkWhereUniqueInput!]
}

input SocialLinkCreateWithoutNetworkInput {
  user: UserCreateOneWithoutSocialLinksInput!
}

input SocialLinkCreateWithoutUserInput {
  network: SocialNetworkCreateOneWithoutLinksInput!
}

"""An edge in a connection."""
type SocialLinkEdge {
  """The item at the end of the edge."""
  node: SocialLink!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SocialLinkOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type SocialLinkPreviousValues {
  id: ID!
}

input SocialLinkScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [SocialLinkScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [SocialLinkScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SocialLinkScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
}

type SocialLinkSubscriptionPayload {
  mutation: MutationType!
  node: SocialLink
  updatedFields: [String!]
  previousValues: SocialLinkPreviousValues
}

input SocialLinkSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SocialLinkSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SocialLinkSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SocialLinkSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SocialLinkWhereInput
}

input SocialLinkUpdateInput {
  user: UserUpdateOneRequiredWithoutSocialLinksInput
  network: SocialNetworkUpdateOneRequiredWithoutLinksInput
}

input SocialLinkUpdateManyWithoutNetworkInput {
  create: [SocialLinkCreateWithoutNetworkInput!]
  connect: [SocialLinkWhereUniqueInput!]
  disconnect: [SocialLinkWhereUniqueInput!]
  delete: [SocialLinkWhereUniqueInput!]
  update: [SocialLinkUpdateWithWhereUniqueWithoutNetworkInput!]
  deleteMany: [SocialLinkScalarWhereInput!]
  upsert: [SocialLinkUpsertWithWhereUniqueWithoutNetworkInput!]
}

input SocialLinkUpdateManyWithoutUserInput {
  create: [SocialLinkCreateWithoutUserInput!]
  connect: [SocialLinkWhereUniqueInput!]
  disconnect: [SocialLinkWhereUniqueInput!]
  delete: [SocialLinkWhereUniqueInput!]
  update: [SocialLinkUpdateWithWhereUniqueWithoutUserInput!]
  deleteMany: [SocialLinkScalarWhereInput!]
  upsert: [SocialLinkUpsertWithWhereUniqueWithoutUserInput!]
}

input SocialLinkUpdateWithoutNetworkDataInput {
  user: UserUpdateOneRequiredWithoutSocialLinksInput
}

input SocialLinkUpdateWithoutUserDataInput {
  network: SocialNetworkUpdateOneRequiredWithoutLinksInput
}

input SocialLinkUpdateWithWhereUniqueWithoutNetworkInput {
  where: SocialLinkWhereUniqueInput!
  data: SocialLinkUpdateWithoutNetworkDataInput!
}

input SocialLinkUpdateWithWhereUniqueWithoutUserInput {
  where: SocialLinkWhereUniqueInput!
  data: SocialLinkUpdateWithoutUserDataInput!
}

input SocialLinkUpsertWithWhereUniqueWithoutNetworkInput {
  where: SocialLinkWhereUniqueInput!
  update: SocialLinkUpdateWithoutNetworkDataInput!
  create: SocialLinkCreateWithoutNetworkInput!
}

input SocialLinkUpsertWithWhereUniqueWithoutUserInput {
  where: SocialLinkWhereUniqueInput!
  update: SocialLinkUpdateWithoutUserDataInput!
  create: SocialLinkCreateWithoutUserInput!
}

input SocialLinkWhereInput {
  """Logical AND on all given filters."""
  AND: [SocialLinkWhereInput!]

  """Logical OR on all given filters."""
  OR: [SocialLinkWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SocialLinkWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  user: UserWhereInput
  network: SocialNetworkWhereInput
}

input SocialLinkWhereUniqueInput {
  id: ID
}

type SocialNetwork implements Node {
  id: ID!
  name: String!
  baseURL: String!
  links(where: SocialLinkWhereInput, orderBy: SocialLinkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SocialLink!]
}

"""A connection to a list of items."""
type SocialNetworkConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SocialNetworkEdge]!
  aggregate: AggregateSocialNetwork!
}

input SocialNetworkCreateInput {
  name: String!
  baseURL: String!
  links: SocialLinkCreateManyWithoutNetworkInput
}

input SocialNetworkCreateOneWithoutLinksInput {
  create: SocialNetworkCreateWithoutLinksInput
  connect: SocialNetworkWhereUniqueInput
}

input SocialNetworkCreateWithoutLinksInput {
  name: String!
  baseURL: String!
}

"""An edge in a connection."""
type SocialNetworkEdge {
  """The item at the end of the edge."""
  node: SocialNetwork!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SocialNetworkOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  baseURL_ASC
  baseURL_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type SocialNetworkPreviousValues {
  id: ID!
  name: String!
  baseURL: String!
}

type SocialNetworkSubscriptionPayload {
  mutation: MutationType!
  node: SocialNetwork
  updatedFields: [String!]
  previousValues: SocialNetworkPreviousValues
}

input SocialNetworkSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SocialNetworkSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SocialNetworkSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SocialNetworkSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SocialNetworkWhereInput
}

input SocialNetworkUpdateInput {
  name: String
  baseURL: String
  links: SocialLinkUpdateManyWithoutNetworkInput
}

input SocialNetworkUpdateManyMutationInput {
  name: String
  baseURL: String
}

input SocialNetworkUpdateOneRequiredWithoutLinksInput {
  create: SocialNetworkCreateWithoutLinksInput
  connect: SocialNetworkWhereUniqueInput
  update: SocialNetworkUpdateWithoutLinksDataInput
  upsert: SocialNetworkUpsertWithoutLinksInput
}

input SocialNetworkUpdateWithoutLinksDataInput {
  name: String
  baseURL: String
}

input SocialNetworkUpsertWithoutLinksInput {
  update: SocialNetworkUpdateWithoutLinksDataInput!
  create: SocialNetworkCreateWithoutLinksInput!
}

input SocialNetworkWhereInput {
  """Logical AND on all given filters."""
  AND: [SocialNetworkWhereInput!]

  """Logical OR on all given filters."""
  OR: [SocialNetworkWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SocialNetworkWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  baseURL: String

  """All values that are not equal to given value."""
  baseURL_not: String

  """All values that are contained in given list."""
  baseURL_in: [String!]

  """All values that are not contained in given list."""
  baseURL_not_in: [String!]

  """All values less than the given value."""
  baseURL_lt: String

  """All values less than or equal the given value."""
  baseURL_lte: String

  """All values greater than the given value."""
  baseURL_gt: String

  """All values greater than or equal the given value."""
  baseURL_gte: String

  """All values containing the given string."""
  baseURL_contains: String

  """All values not containing the given string."""
  baseURL_not_contains: String

  """All values starting with the given string."""
  baseURL_starts_with: String

  """All values not starting with the given string."""
  baseURL_not_starts_with: String

  """All values ending with the given string."""
  baseURL_ends_with: String

  """All values not ending with the given string."""
  baseURL_not_ends_with: String
  links_every: SocialLinkWhereInput
  links_some: SocialLinkWhereInput
  links_none: SocialLinkWhereInput
}

input SocialNetworkWhereUniqueInput {
  id: ID
  name: String
  baseURL: String
}

type Subscription {
  address(where: AddressSubscriptionWhereInput): AddressSubscriptionPayload
  phoneNumber(where: PhoneNumberSubscriptionWhereInput): PhoneNumberSubscriptionPayload
  nID(where: nIDSubscriptionWhereInput): nIDSubscriptionPayload
  socialLink(where: SocialLinkSubscriptionWhereInput): SocialLinkSubscriptionPayload
  socialNetwork(where: SocialNetworkSubscriptionWhereInput): SocialNetworkSubscriptionPayload
  news(where: NewsSubscriptionWhereInput): NewsSubscriptionPayload
  event(where: EventSubscriptionWhereInput): EventSubscriptionPayload
  venue(where: VenueSubscriptionWhereInput): VenueSubscriptionPayload
  program(where: ProgramSubscriptionWhereInput): ProgramSubscriptionPayload
  branch(where: BranchSubscriptionWhereInput): BranchSubscriptionPayload
  adminRole(where: AdminRoleSubscriptionWhereInput): AdminRoleSubscriptionPayload
  adminCompetence(where: AdminCompetenceSubscriptionWhereInput): AdminCompetenceSubscriptionPayload
  congressEdition(where: CongressEditionSubscriptionWhereInput): CongressEditionSubscriptionPayload
  congressProduct(where: CongressProductSubscriptionWhereInput): CongressProductSubscriptionPayload
  participant(where: ParticipantSubscriptionWhereInput): ParticipantSubscriptionPayload
  committeBoardUser(where: CommitteBoardUserSubscriptionWhereInput): CommitteBoardUserSubscriptionPayload
  proposalReview(where: ProposalReviewSubscriptionWhereInput): ProposalReviewSubscriptionPayload
  proposal(where: ProposalSubscriptionWhereInput): ProposalSubscriptionPayload
  productCategory(where: ProductCategorySubscriptionWhereInput): ProductCategorySubscriptionPayload
  productImage(where: ProductImageSubscriptionWhereInput): ProductImageSubscriptionPayload
  customerOrder(where: CustomerOrderSubscriptionWhereInput): CustomerOrderSubscriptionPayload
  customerOrderItems(where: CustomerOrderItemsSubscriptionWhereInput): CustomerOrderItemsSubscriptionPayload
  product(where: ProductSubscriptionWhereInput): ProductSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  invoice(where: InvoiceSubscriptionWhereInput): InvoiceSubscriptionPayload
}

type User implements Node {
  id: ID!
  name: String
  lastname: String
  email: String!
  emailVerified: Boolean!
  password: String!
  address: Address
  phone: PhoneNumber
  nID: nID
  updatedAt: DateTime!
  createdAt: DateTime!
  socialLinks(where: SocialLinkWhereInput, orderBy: SocialLinkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SocialLink!]
  notificationsDevice: String
  notificationsPermission: Boolean
  notificationsPrefEmail: Boolean
  notificationsPrefPush: Boolean
  notificationsPrefReminderEmail: Boolean
  notificationsPrefReminderPush: Boolean
  group: UserGroup!
  groupRequest: UserGroup
  branch: Branch
  department: Branch
  academicYear: Int
  isAdmin: Boolean!
  adminRole: AdminRole
  newses(where: NewsWhereInput, orderBy: NewsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [News!]
  events(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Event!]
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  name: String
  lastname: String
  email: String!
  emailVerified: Boolean
  password: String!
  notificationsDevice: String
  notificationsPermission: Boolean
  notificationsPrefEmail: Boolean
  notificationsPrefPush: Boolean
  notificationsPrefReminderEmail: Boolean
  notificationsPrefReminderPush: Boolean
  group: UserGroup
  groupRequest: UserGroup
  academicYear: Int
  isAdmin: Boolean
  address: AddressCreateOneWithoutUserInput
  phone: PhoneNumberCreateOneWithoutUserInput
  nID: nIDCreateOneWithoutUserInput
  socialLinks: SocialLinkCreateManyWithoutUserInput
  branch: BranchCreateOneWithoutStudentsInput
  department: BranchCreateOneWithoutStaffInput
  adminRole: AdminRoleCreateOneWithoutAdminsInput
  newses: NewsCreateManyWithoutAuthorInput
  events: EventCreateManyWithoutAuthorInput
}

input UserCreateManyWithoutAdminRoleInput {
  create: [UserCreateWithoutAdminRoleInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutBranchInput {
  create: [UserCreateWithoutBranchInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutDepartmentInput {
  create: [UserCreateWithoutDepartmentInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutAddressInput {
  create: UserCreateWithoutAddressInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutEventsInput {
  create: UserCreateWithoutEventsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutNewsesInput {
  create: UserCreateWithoutNewsesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutNIDInput {
  create: UserCreateWithoutNIDInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutPhoneInput {
  create: UserCreateWithoutPhoneInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutSocialLinksInput {
  create: UserCreateWithoutSocialLinksInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutAddressInput {
  name: String
  lastname: String
  email: String!
  emailVerified: Boolean
  password: String!
  notificationsDevice: String
  notificationsPermission: Boolean
  notificationsPrefEmail: Boolean
  notificationsPrefPush: Boolean
  notificationsPrefReminderEmail: Boolean
  notificationsPrefReminderPush: Boolean
  group: UserGroup
  groupRequest: UserGroup
  academicYear: Int
  isAdmin: Boolean
  phone: PhoneNumberCreateOneWithoutUserInput
  nID: nIDCreateOneWithoutUserInput
  socialLinks: SocialLinkCreateManyWithoutUserInput
  branch: BranchCreateOneWithoutStudentsInput
  department: BranchCreateOneWithoutStaffInput
  adminRole: AdminRoleCreateOneWithoutAdminsInput
  newses: NewsCreateManyWithoutAuthorInput
  events: EventCreateManyWithoutAuthorInput
}

input UserCreateWithoutAdminRoleInput {
  name: String
  lastname: String
  email: String!
  emailVerified: Boolean
  password: String!
  notificationsDevice: String
  notificationsPermission: Boolean
  notificationsPrefEmail: Boolean
  notificationsPrefPush: Boolean
  notificationsPrefReminderEmail: Boolean
  notificationsPrefReminderPush: Boolean
  group: UserGroup
  groupRequest: UserGroup
  academicYear: Int
  isAdmin: Boolean
  address: AddressCreateOneWithoutUserInput
  phone: PhoneNumberCreateOneWithoutUserInput
  nID: nIDCreateOneWithoutUserInput
  socialLinks: SocialLinkCreateManyWithoutUserInput
  branch: BranchCreateOneWithoutStudentsInput
  department: BranchCreateOneWithoutStaffInput
  newses: NewsCreateManyWithoutAuthorInput
  events: EventCreateManyWithoutAuthorInput
}

input UserCreateWithoutBranchInput {
  name: String
  lastname: String
  email: String!
  emailVerified: Boolean
  password: String!
  notificationsDevice: String
  notificationsPermission: Boolean
  notificationsPrefEmail: Boolean
  notificationsPrefPush: Boolean
  notificationsPrefReminderEmail: Boolean
  notificationsPrefReminderPush: Boolean
  group: UserGroup
  groupRequest: UserGroup
  academicYear: Int
  isAdmin: Boolean
  address: AddressCreateOneWithoutUserInput
  phone: PhoneNumberCreateOneWithoutUserInput
  nID: nIDCreateOneWithoutUserInput
  socialLinks: SocialLinkCreateManyWithoutUserInput
  department: BranchCreateOneWithoutStaffInput
  adminRole: AdminRoleCreateOneWithoutAdminsInput
  newses: NewsCreateManyWithoutAuthorInput
  events: EventCreateManyWithoutAuthorInput
}

input UserCreateWithoutDepartmentInput {
  name: String
  lastname: String
  email: String!
  emailVerified: Boolean
  password: String!
  notificationsDevice: String
  notificationsPermission: Boolean
  notificationsPrefEmail: Boolean
  notificationsPrefPush: Boolean
  notificationsPrefReminderEmail: Boolean
  notificationsPrefReminderPush: Boolean
  group: UserGroup
  groupRequest: UserGroup
  academicYear: Int
  isAdmin: Boolean
  address: AddressCreateOneWithoutUserInput
  phone: PhoneNumberCreateOneWithoutUserInput
  nID: nIDCreateOneWithoutUserInput
  socialLinks: SocialLinkCreateManyWithoutUserInput
  branch: BranchCreateOneWithoutStudentsInput
  adminRole: AdminRoleCreateOneWithoutAdminsInput
  newses: NewsCreateManyWithoutAuthorInput
  events: EventCreateManyWithoutAuthorInput
}

input UserCreateWithoutEventsInput {
  name: String
  lastname: String
  email: String!
  emailVerified: Boolean
  password: String!
  notificationsDevice: String
  notificationsPermission: Boolean
  notificationsPrefEmail: Boolean
  notificationsPrefPush: Boolean
  notificationsPrefReminderEmail: Boolean
  notificationsPrefReminderPush: Boolean
  group: UserGroup
  groupRequest: UserGroup
  academicYear: Int
  isAdmin: Boolean
  address: AddressCreateOneWithoutUserInput
  phone: PhoneNumberCreateOneWithoutUserInput
  nID: nIDCreateOneWithoutUserInput
  socialLinks: SocialLinkCreateManyWithoutUserInput
  branch: BranchCreateOneWithoutStudentsInput
  department: BranchCreateOneWithoutStaffInput
  adminRole: AdminRoleCreateOneWithoutAdminsInput
  newses: NewsCreateManyWithoutAuthorInput
}

input UserCreateWithoutNewsesInput {
  name: String
  lastname: String
  email: String!
  emailVerified: Boolean
  password: String!
  notificationsDevice: String
  notificationsPermission: Boolean
  notificationsPrefEmail: Boolean
  notificationsPrefPush: Boolean
  notificationsPrefReminderEmail: Boolean
  notificationsPrefReminderPush: Boolean
  group: UserGroup
  groupRequest: UserGroup
  academicYear: Int
  isAdmin: Boolean
  address: AddressCreateOneWithoutUserInput
  phone: PhoneNumberCreateOneWithoutUserInput
  nID: nIDCreateOneWithoutUserInput
  socialLinks: SocialLinkCreateManyWithoutUserInput
  branch: BranchCreateOneWithoutStudentsInput
  department: BranchCreateOneWithoutStaffInput
  adminRole: AdminRoleCreateOneWithoutAdminsInput
  events: EventCreateManyWithoutAuthorInput
}

input UserCreateWithoutNIDInput {
  name: String
  lastname: String
  email: String!
  emailVerified: Boolean
  password: String!
  notificationsDevice: String
  notificationsPermission: Boolean
  notificationsPrefEmail: Boolean
  notificationsPrefPush: Boolean
  notificationsPrefReminderEmail: Boolean
  notificationsPrefReminderPush: Boolean
  group: UserGroup
  groupRequest: UserGroup
  academicYear: Int
  isAdmin: Boolean
  address: AddressCreateOneWithoutUserInput
  phone: PhoneNumberCreateOneWithoutUserInput
  socialLinks: SocialLinkCreateManyWithoutUserInput
  branch: BranchCreateOneWithoutStudentsInput
  department: BranchCreateOneWithoutStaffInput
  adminRole: AdminRoleCreateOneWithoutAdminsInput
  newses: NewsCreateManyWithoutAuthorInput
  events: EventCreateManyWithoutAuthorInput
}

input UserCreateWithoutPhoneInput {
  name: String
  lastname: String
  email: String!
  emailVerified: Boolean
  password: String!
  notificationsDevice: String
  notificationsPermission: Boolean
  notificationsPrefEmail: Boolean
  notificationsPrefPush: Boolean
  notificationsPrefReminderEmail: Boolean
  notificationsPrefReminderPush: Boolean
  group: UserGroup
  groupRequest: UserGroup
  academicYear: Int
  isAdmin: Boolean
  address: AddressCreateOneWithoutUserInput
  nID: nIDCreateOneWithoutUserInput
  socialLinks: SocialLinkCreateManyWithoutUserInput
  branch: BranchCreateOneWithoutStudentsInput
  department: BranchCreateOneWithoutStaffInput
  adminRole: AdminRoleCreateOneWithoutAdminsInput
  newses: NewsCreateManyWithoutAuthorInput
  events: EventCreateManyWithoutAuthorInput
}

input UserCreateWithoutSocialLinksInput {
  name: String
  lastname: String
  email: String!
  emailVerified: Boolean
  password: String!
  notificationsDevice: String
  notificationsPermission: Boolean
  notificationsPrefEmail: Boolean
  notificationsPrefPush: Boolean
  notificationsPrefReminderEmail: Boolean
  notificationsPrefReminderPush: Boolean
  group: UserGroup
  groupRequest: UserGroup
  academicYear: Int
  isAdmin: Boolean
  address: AddressCreateOneWithoutUserInput
  phone: PhoneNumberCreateOneWithoutUserInput
  nID: nIDCreateOneWithoutUserInput
  branch: BranchCreateOneWithoutStudentsInput
  department: BranchCreateOneWithoutStaffInput
  adminRole: AdminRoleCreateOneWithoutAdminsInput
  newses: NewsCreateManyWithoutAuthorInput
  events: EventCreateManyWithoutAuthorInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserGroup {
  PUBLIC
  STAFF
  STUDENT
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  lastname_ASC
  lastname_DESC
  email_ASC
  email_DESC
  emailVerified_ASC
  emailVerified_DESC
  password_ASC
  password_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
  notificationsDevice_ASC
  notificationsDevice_DESC
  notificationsPermission_ASC
  notificationsPermission_DESC
  notificationsPrefEmail_ASC
  notificationsPrefEmail_DESC
  notificationsPrefPush_ASC
  notificationsPrefPush_DESC
  notificationsPrefReminderEmail_ASC
  notificationsPrefReminderEmail_DESC
  notificationsPrefReminderPush_ASC
  notificationsPrefReminderPush_DESC
  group_ASC
  group_DESC
  groupRequest_ASC
  groupRequest_DESC
  academicYear_ASC
  academicYear_DESC
  isAdmin_ASC
  isAdmin_DESC
}

type UserPreviousValues {
  id: ID!
  name: String
  lastname: String
  email: String!
  emailVerified: Boolean!
  password: String!
  updatedAt: DateTime!
  createdAt: DateTime!
  notificationsDevice: String
  notificationsPermission: Boolean
  notificationsPrefEmail: Boolean
  notificationsPrefPush: Boolean
  notificationsPrefReminderEmail: Boolean
  notificationsPrefReminderPush: Boolean
  group: UserGroup!
  groupRequest: UserGroup
  academicYear: Int
  isAdmin: Boolean!
}

input UserScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [UserScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  lastname: String

  """All values that are not equal to given value."""
  lastname_not: String

  """All values that are contained in given list."""
  lastname_in: [String!]

  """All values that are not contained in given list."""
  lastname_not_in: [String!]

  """All values less than the given value."""
  lastname_lt: String

  """All values less than or equal the given value."""
  lastname_lte: String

  """All values greater than the given value."""
  lastname_gt: String

  """All values greater than or equal the given value."""
  lastname_gte: String

  """All values containing the given string."""
  lastname_contains: String

  """All values not containing the given string."""
  lastname_not_contains: String

  """All values starting with the given string."""
  lastname_starts_with: String

  """All values not starting with the given string."""
  lastname_not_starts_with: String

  """All values ending with the given string."""
  lastname_ends_with: String

  """All values not ending with the given string."""
  lastname_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  emailVerified: Boolean

  """All values that are not equal to given value."""
  emailVerified_not: Boolean
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  notificationsDevice: String

  """All values that are not equal to given value."""
  notificationsDevice_not: String

  """All values that are contained in given list."""
  notificationsDevice_in: [String!]

  """All values that are not contained in given list."""
  notificationsDevice_not_in: [String!]

  """All values less than the given value."""
  notificationsDevice_lt: String

  """All values less than or equal the given value."""
  notificationsDevice_lte: String

  """All values greater than the given value."""
  notificationsDevice_gt: String

  """All values greater than or equal the given value."""
  notificationsDevice_gte: String

  """All values containing the given string."""
  notificationsDevice_contains: String

  """All values not containing the given string."""
  notificationsDevice_not_contains: String

  """All values starting with the given string."""
  notificationsDevice_starts_with: String

  """All values not starting with the given string."""
  notificationsDevice_not_starts_with: String

  """All values ending with the given string."""
  notificationsDevice_ends_with: String

  """All values not ending with the given string."""
  notificationsDevice_not_ends_with: String
  notificationsPermission: Boolean

  """All values that are not equal to given value."""
  notificationsPermission_not: Boolean
  notificationsPrefEmail: Boolean

  """All values that are not equal to given value."""
  notificationsPrefEmail_not: Boolean
  notificationsPrefPush: Boolean

  """All values that are not equal to given value."""
  notificationsPrefPush_not: Boolean
  notificationsPrefReminderEmail: Boolean

  """All values that are not equal to given value."""
  notificationsPrefReminderEmail_not: Boolean
  notificationsPrefReminderPush: Boolean

  """All values that are not equal to given value."""
  notificationsPrefReminderPush_not: Boolean
  group: UserGroup

  """All values that are not equal to given value."""
  group_not: UserGroup

  """All values that are contained in given list."""
  group_in: [UserGroup!]

  """All values that are not contained in given list."""
  group_not_in: [UserGroup!]
  groupRequest: UserGroup

  """All values that are not equal to given value."""
  groupRequest_not: UserGroup

  """All values that are contained in given list."""
  groupRequest_in: [UserGroup!]

  """All values that are not contained in given list."""
  groupRequest_not_in: [UserGroup!]
  academicYear: Int

  """All values that are not equal to given value."""
  academicYear_not: Int

  """All values that are contained in given list."""
  academicYear_in: [Int!]

  """All values that are not contained in given list."""
  academicYear_not_in: [Int!]

  """All values less than the given value."""
  academicYear_lt: Int

  """All values less than or equal the given value."""
  academicYear_lte: Int

  """All values greater than the given value."""
  academicYear_gt: Int

  """All values greater than or equal the given value."""
  academicYear_gte: Int
  isAdmin: Boolean

  """All values that are not equal to given value."""
  isAdmin_not: Boolean
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateDataInput {
  name: String
  lastname: String
  email: String
  emailVerified: Boolean
  password: String
  notificationsDevice: String
  notificationsPermission: Boolean
  notificationsPrefEmail: Boolean
  notificationsPrefPush: Boolean
  notificationsPrefReminderEmail: Boolean
  notificationsPrefReminderPush: Boolean
  group: UserGroup
  groupRequest: UserGroup
  academicYear: Int
  isAdmin: Boolean
  address: AddressUpdateOneWithoutUserInput
  phone: PhoneNumberUpdateOneWithoutUserInput
  nID: nIDUpdateOneWithoutUserInput
  socialLinks: SocialLinkUpdateManyWithoutUserInput
  branch: BranchUpdateOneWithoutStudentsInput
  department: BranchUpdateOneWithoutStaffInput
  adminRole: AdminRoleUpdateOneWithoutAdminsInput
  newses: NewsUpdateManyWithoutAuthorInput
  events: EventUpdateManyWithoutAuthorInput
}

input UserUpdateInput {
  name: String
  lastname: String
  email: String
  emailVerified: Boolean
  password: String
  notificationsDevice: String
  notificationsPermission: Boolean
  notificationsPrefEmail: Boolean
  notificationsPrefPush: Boolean
  notificationsPrefReminderEmail: Boolean
  notificationsPrefReminderPush: Boolean
  group: UserGroup
  groupRequest: UserGroup
  academicYear: Int
  isAdmin: Boolean
  address: AddressUpdateOneWithoutUserInput
  phone: PhoneNumberUpdateOneWithoutUserInput
  nID: nIDUpdateOneWithoutUserInput
  socialLinks: SocialLinkUpdateManyWithoutUserInput
  branch: BranchUpdateOneWithoutStudentsInput
  department: BranchUpdateOneWithoutStaffInput
  adminRole: AdminRoleUpdateOneWithoutAdminsInput
  newses: NewsUpdateManyWithoutAuthorInput
  events: EventUpdateManyWithoutAuthorInput
}

input UserUpdateManyDataInput {
  name: String
  lastname: String
  email: String
  emailVerified: Boolean
  password: String
  notificationsDevice: String
  notificationsPermission: Boolean
  notificationsPrefEmail: Boolean
  notificationsPrefPush: Boolean
  notificationsPrefReminderEmail: Boolean
  notificationsPrefReminderPush: Boolean
  group: UserGroup
  groupRequest: UserGroup
  academicYear: Int
  isAdmin: Boolean
}

input UserUpdateManyMutationInput {
  name: String
  lastname: String
  email: String
  emailVerified: Boolean
  password: String
  notificationsDevice: String
  notificationsPermission: Boolean
  notificationsPrefEmail: Boolean
  notificationsPrefPush: Boolean
  notificationsPrefReminderEmail: Boolean
  notificationsPrefReminderPush: Boolean
  group: UserGroup
  groupRequest: UserGroup
  academicYear: Int
  isAdmin: Boolean
}

input UserUpdateManyWithoutAdminRoleInput {
  create: [UserCreateWithoutAdminRoleInput!]
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutAdminRoleInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  deleteMany: [UserScalarWhereInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutAdminRoleInput!]
}

input UserUpdateManyWithoutBranchInput {
  create: [UserCreateWithoutBranchInput!]
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutBranchInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  deleteMany: [UserScalarWhereInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutBranchInput!]
}

input UserUpdateManyWithoutDepartmentInput {
  create: [UserCreateWithoutDepartmentInput!]
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutDepartmentInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  deleteMany: [UserScalarWhereInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutDepartmentInput!]
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateOneRequiredInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
}

input UserUpdateOneRequiredWithoutAddressInput {
  create: UserCreateWithoutAddressInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutAddressDataInput
  upsert: UserUpsertWithoutAddressInput
}

input UserUpdateOneRequiredWithoutEventsInput {
  create: UserCreateWithoutEventsInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutEventsDataInput
  upsert: UserUpsertWithoutEventsInput
}

input UserUpdateOneRequiredWithoutNewsesInput {
  create: UserCreateWithoutNewsesInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutNewsesDataInput
  upsert: UserUpsertWithoutNewsesInput
}

input UserUpdateOneRequiredWithoutNIDInput {
  create: UserCreateWithoutNIDInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutNIDDataInput
  upsert: UserUpsertWithoutNIDInput
}

input UserUpdateOneRequiredWithoutPhoneInput {
  create: UserCreateWithoutPhoneInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutPhoneDataInput
  upsert: UserUpsertWithoutPhoneInput
}

input UserUpdateOneRequiredWithoutSocialLinksInput {
  create: UserCreateWithoutSocialLinksInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutSocialLinksDataInput
  upsert: UserUpsertWithoutSocialLinksInput
}

input UserUpdateWithoutAddressDataInput {
  name: String
  lastname: String
  email: String
  emailVerified: Boolean
  password: String
  notificationsDevice: String
  notificationsPermission: Boolean
  notificationsPrefEmail: Boolean
  notificationsPrefPush: Boolean
  notificationsPrefReminderEmail: Boolean
  notificationsPrefReminderPush: Boolean
  group: UserGroup
  groupRequest: UserGroup
  academicYear: Int
  isAdmin: Boolean
  phone: PhoneNumberUpdateOneWithoutUserInput
  nID: nIDUpdateOneWithoutUserInput
  socialLinks: SocialLinkUpdateManyWithoutUserInput
  branch: BranchUpdateOneWithoutStudentsInput
  department: BranchUpdateOneWithoutStaffInput
  adminRole: AdminRoleUpdateOneWithoutAdminsInput
  newses: NewsUpdateManyWithoutAuthorInput
  events: EventUpdateManyWithoutAuthorInput
}

input UserUpdateWithoutAdminRoleDataInput {
  name: String
  lastname: String
  email: String
  emailVerified: Boolean
  password: String
  notificationsDevice: String
  notificationsPermission: Boolean
  notificationsPrefEmail: Boolean
  notificationsPrefPush: Boolean
  notificationsPrefReminderEmail: Boolean
  notificationsPrefReminderPush: Boolean
  group: UserGroup
  groupRequest: UserGroup
  academicYear: Int
  isAdmin: Boolean
  address: AddressUpdateOneWithoutUserInput
  phone: PhoneNumberUpdateOneWithoutUserInput
  nID: nIDUpdateOneWithoutUserInput
  socialLinks: SocialLinkUpdateManyWithoutUserInput
  branch: BranchUpdateOneWithoutStudentsInput
  department: BranchUpdateOneWithoutStaffInput
  newses: NewsUpdateManyWithoutAuthorInput
  events: EventUpdateManyWithoutAuthorInput
}

input UserUpdateWithoutBranchDataInput {
  name: String
  lastname: String
  email: String
  emailVerified: Boolean
  password: String
  notificationsDevice: String
  notificationsPermission: Boolean
  notificationsPrefEmail: Boolean
  notificationsPrefPush: Boolean
  notificationsPrefReminderEmail: Boolean
  notificationsPrefReminderPush: Boolean
  group: UserGroup
  groupRequest: UserGroup
  academicYear: Int
  isAdmin: Boolean
  address: AddressUpdateOneWithoutUserInput
  phone: PhoneNumberUpdateOneWithoutUserInput
  nID: nIDUpdateOneWithoutUserInput
  socialLinks: SocialLinkUpdateManyWithoutUserInput
  department: BranchUpdateOneWithoutStaffInput
  adminRole: AdminRoleUpdateOneWithoutAdminsInput
  newses: NewsUpdateManyWithoutAuthorInput
  events: EventUpdateManyWithoutAuthorInput
}

input UserUpdateWithoutDepartmentDataInput {
  name: String
  lastname: String
  email: String
  emailVerified: Boolean
  password: String
  notificationsDevice: String
  notificationsPermission: Boolean
  notificationsPrefEmail: Boolean
  notificationsPrefPush: Boolean
  notificationsPrefReminderEmail: Boolean
  notificationsPrefReminderPush: Boolean
  group: UserGroup
  groupRequest: UserGroup
  academicYear: Int
  isAdmin: Boolean
  address: AddressUpdateOneWithoutUserInput
  phone: PhoneNumberUpdateOneWithoutUserInput
  nID: nIDUpdateOneWithoutUserInput
  socialLinks: SocialLinkUpdateManyWithoutUserInput
  branch: BranchUpdateOneWithoutStudentsInput
  adminRole: AdminRoleUpdateOneWithoutAdminsInput
  newses: NewsUpdateManyWithoutAuthorInput
  events: EventUpdateManyWithoutAuthorInput
}

input UserUpdateWithoutEventsDataInput {
  name: String
  lastname: String
  email: String
  emailVerified: Boolean
  password: String
  notificationsDevice: String
  notificationsPermission: Boolean
  notificationsPrefEmail: Boolean
  notificationsPrefPush: Boolean
  notificationsPrefReminderEmail: Boolean
  notificationsPrefReminderPush: Boolean
  group: UserGroup
  groupRequest: UserGroup
  academicYear: Int
  isAdmin: Boolean
  address: AddressUpdateOneWithoutUserInput
  phone: PhoneNumberUpdateOneWithoutUserInput
  nID: nIDUpdateOneWithoutUserInput
  socialLinks: SocialLinkUpdateManyWithoutUserInput
  branch: BranchUpdateOneWithoutStudentsInput
  department: BranchUpdateOneWithoutStaffInput
  adminRole: AdminRoleUpdateOneWithoutAdminsInput
  newses: NewsUpdateManyWithoutAuthorInput
}

input UserUpdateWithoutNewsesDataInput {
  name: String
  lastname: String
  email: String
  emailVerified: Boolean
  password: String
  notificationsDevice: String
  notificationsPermission: Boolean
  notificationsPrefEmail: Boolean
  notificationsPrefPush: Boolean
  notificationsPrefReminderEmail: Boolean
  notificationsPrefReminderPush: Boolean
  group: UserGroup
  groupRequest: UserGroup
  academicYear: Int
  isAdmin: Boolean
  address: AddressUpdateOneWithoutUserInput
  phone: PhoneNumberUpdateOneWithoutUserInput
  nID: nIDUpdateOneWithoutUserInput
  socialLinks: SocialLinkUpdateManyWithoutUserInput
  branch: BranchUpdateOneWithoutStudentsInput
  department: BranchUpdateOneWithoutStaffInput
  adminRole: AdminRoleUpdateOneWithoutAdminsInput
  events: EventUpdateManyWithoutAuthorInput
}

input UserUpdateWithoutNIDDataInput {
  name: String
  lastname: String
  email: String
  emailVerified: Boolean
  password: String
  notificationsDevice: String
  notificationsPermission: Boolean
  notificationsPrefEmail: Boolean
  notificationsPrefPush: Boolean
  notificationsPrefReminderEmail: Boolean
  notificationsPrefReminderPush: Boolean
  group: UserGroup
  groupRequest: UserGroup
  academicYear: Int
  isAdmin: Boolean
  address: AddressUpdateOneWithoutUserInput
  phone: PhoneNumberUpdateOneWithoutUserInput
  socialLinks: SocialLinkUpdateManyWithoutUserInput
  branch: BranchUpdateOneWithoutStudentsInput
  department: BranchUpdateOneWithoutStaffInput
  adminRole: AdminRoleUpdateOneWithoutAdminsInput
  newses: NewsUpdateManyWithoutAuthorInput
  events: EventUpdateManyWithoutAuthorInput
}

input UserUpdateWithoutPhoneDataInput {
  name: String
  lastname: String
  email: String
  emailVerified: Boolean
  password: String
  notificationsDevice: String
  notificationsPermission: Boolean
  notificationsPrefEmail: Boolean
  notificationsPrefPush: Boolean
  notificationsPrefReminderEmail: Boolean
  notificationsPrefReminderPush: Boolean
  group: UserGroup
  groupRequest: UserGroup
  academicYear: Int
  isAdmin: Boolean
  address: AddressUpdateOneWithoutUserInput
  nID: nIDUpdateOneWithoutUserInput
  socialLinks: SocialLinkUpdateManyWithoutUserInput
  branch: BranchUpdateOneWithoutStudentsInput
  department: BranchUpdateOneWithoutStaffInput
  adminRole: AdminRoleUpdateOneWithoutAdminsInput
  newses: NewsUpdateManyWithoutAuthorInput
  events: EventUpdateManyWithoutAuthorInput
}

input UserUpdateWithoutSocialLinksDataInput {
  name: String
  lastname: String
  email: String
  emailVerified: Boolean
  password: String
  notificationsDevice: String
  notificationsPermission: Boolean
  notificationsPrefEmail: Boolean
  notificationsPrefPush: Boolean
  notificationsPrefReminderEmail: Boolean
  notificationsPrefReminderPush: Boolean
  group: UserGroup
  groupRequest: UserGroup
  academicYear: Int
  isAdmin: Boolean
  address: AddressUpdateOneWithoutUserInput
  phone: PhoneNumberUpdateOneWithoutUserInput
  nID: nIDUpdateOneWithoutUserInput
  branch: BranchUpdateOneWithoutStudentsInput
  department: BranchUpdateOneWithoutStaffInput
  adminRole: AdminRoleUpdateOneWithoutAdminsInput
  newses: NewsUpdateManyWithoutAuthorInput
  events: EventUpdateManyWithoutAuthorInput
}

input UserUpdateWithWhereUniqueWithoutAdminRoleInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutAdminRoleDataInput!
}

input UserUpdateWithWhereUniqueWithoutBranchInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutBranchDataInput!
}

input UserUpdateWithWhereUniqueWithoutDepartmentInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutDepartmentDataInput!
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithoutAddressInput {
  update: UserUpdateWithoutAddressDataInput!
  create: UserCreateWithoutAddressInput!
}

input UserUpsertWithoutEventsInput {
  update: UserUpdateWithoutEventsDataInput!
  create: UserCreateWithoutEventsInput!
}

input UserUpsertWithoutNewsesInput {
  update: UserUpdateWithoutNewsesDataInput!
  create: UserCreateWithoutNewsesInput!
}

input UserUpsertWithoutNIDInput {
  update: UserUpdateWithoutNIDDataInput!
  create: UserCreateWithoutNIDInput!
}

input UserUpsertWithoutPhoneInput {
  update: UserUpdateWithoutPhoneDataInput!
  create: UserCreateWithoutPhoneInput!
}

input UserUpsertWithoutSocialLinksInput {
  update: UserUpdateWithoutSocialLinksDataInput!
  create: UserCreateWithoutSocialLinksInput!
}

input UserUpsertWithWhereUniqueWithoutAdminRoleInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutAdminRoleDataInput!
  create: UserCreateWithoutAdminRoleInput!
}

input UserUpsertWithWhereUniqueWithoutBranchInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutBranchDataInput!
  create: UserCreateWithoutBranchInput!
}

input UserUpsertWithWhereUniqueWithoutDepartmentInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutDepartmentDataInput!
  create: UserCreateWithoutDepartmentInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  lastname: String

  """All values that are not equal to given value."""
  lastname_not: String

  """All values that are contained in given list."""
  lastname_in: [String!]

  """All values that are not contained in given list."""
  lastname_not_in: [String!]

  """All values less than the given value."""
  lastname_lt: String

  """All values less than or equal the given value."""
  lastname_lte: String

  """All values greater than the given value."""
  lastname_gt: String

  """All values greater than or equal the given value."""
  lastname_gte: String

  """All values containing the given string."""
  lastname_contains: String

  """All values not containing the given string."""
  lastname_not_contains: String

  """All values starting with the given string."""
  lastname_starts_with: String

  """All values not starting with the given string."""
  lastname_not_starts_with: String

  """All values ending with the given string."""
  lastname_ends_with: String

  """All values not ending with the given string."""
  lastname_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  emailVerified: Boolean

  """All values that are not equal to given value."""
  emailVerified_not: Boolean
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  notificationsDevice: String

  """All values that are not equal to given value."""
  notificationsDevice_not: String

  """All values that are contained in given list."""
  notificationsDevice_in: [String!]

  """All values that are not contained in given list."""
  notificationsDevice_not_in: [String!]

  """All values less than the given value."""
  notificationsDevice_lt: String

  """All values less than or equal the given value."""
  notificationsDevice_lte: String

  """All values greater than the given value."""
  notificationsDevice_gt: String

  """All values greater than or equal the given value."""
  notificationsDevice_gte: String

  """All values containing the given string."""
  notificationsDevice_contains: String

  """All values not containing the given string."""
  notificationsDevice_not_contains: String

  """All values starting with the given string."""
  notificationsDevice_starts_with: String

  """All values not starting with the given string."""
  notificationsDevice_not_starts_with: String

  """All values ending with the given string."""
  notificationsDevice_ends_with: String

  """All values not ending with the given string."""
  notificationsDevice_not_ends_with: String
  notificationsPermission: Boolean

  """All values that are not equal to given value."""
  notificationsPermission_not: Boolean
  notificationsPrefEmail: Boolean

  """All values that are not equal to given value."""
  notificationsPrefEmail_not: Boolean
  notificationsPrefPush: Boolean

  """All values that are not equal to given value."""
  notificationsPrefPush_not: Boolean
  notificationsPrefReminderEmail: Boolean

  """All values that are not equal to given value."""
  notificationsPrefReminderEmail_not: Boolean
  notificationsPrefReminderPush: Boolean

  """All values that are not equal to given value."""
  notificationsPrefReminderPush_not: Boolean
  group: UserGroup

  """All values that are not equal to given value."""
  group_not: UserGroup

  """All values that are contained in given list."""
  group_in: [UserGroup!]

  """All values that are not contained in given list."""
  group_not_in: [UserGroup!]
  groupRequest: UserGroup

  """All values that are not equal to given value."""
  groupRequest_not: UserGroup

  """All values that are contained in given list."""
  groupRequest_in: [UserGroup!]

  """All values that are not contained in given list."""
  groupRequest_not_in: [UserGroup!]
  academicYear: Int

  """All values that are not equal to given value."""
  academicYear_not: Int

  """All values that are contained in given list."""
  academicYear_in: [Int!]

  """All values that are not contained in given list."""
  academicYear_not_in: [Int!]

  """All values less than the given value."""
  academicYear_lt: Int

  """All values less than or equal the given value."""
  academicYear_lte: Int

  """All values greater than the given value."""
  academicYear_gt: Int

  """All values greater than or equal the given value."""
  academicYear_gte: Int
  isAdmin: Boolean

  """All values that are not equal to given value."""
  isAdmin_not: Boolean
  address: AddressWhereInput
  phone: PhoneNumberWhereInput
  nID: nIDWhereInput
  socialLinks_every: SocialLinkWhereInput
  socialLinks_some: SocialLinkWhereInput
  socialLinks_none: SocialLinkWhereInput
  branch: BranchWhereInput
  department: BranchWhereInput
  adminRole: AdminRoleWhereInput
  newses_every: NewsWhereInput
  newses_some: NewsWhereInput
  newses_none: NewsWhereInput
  events_every: EventWhereInput
  events_some: EventWhereInput
  events_none: EventWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

type Venue implements Node {
  id: ID!
  name: String!
  address: String!
  placeID: String
  latitude: Float
  longitude: Float
  events(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Event!]
}

"""A connection to a list of items."""
type VenueConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [VenueEdge]!
  aggregate: AggregateVenue!
}

input VenueCreateInput {
  name: String!
  address: String!
  placeID: String
  latitude: Float
  longitude: Float
  events: EventCreateManyWithoutVenueInput
}

input VenueCreateOneWithoutEventsInput {
  create: VenueCreateWithoutEventsInput
  connect: VenueWhereUniqueInput
}

input VenueCreateWithoutEventsInput {
  name: String!
  address: String!
  placeID: String
  latitude: Float
  longitude: Float
}

"""An edge in a connection."""
type VenueEdge {
  """The item at the end of the edge."""
  node: Venue!

  """A cursor for use in pagination."""
  cursor: String!
}

enum VenueOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  address_ASC
  address_DESC
  placeID_ASC
  placeID_DESC
  latitude_ASC
  latitude_DESC
  longitude_ASC
  longitude_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type VenuePreviousValues {
  id: ID!
  name: String!
  address: String!
  placeID: String
  latitude: Float
  longitude: Float
}

type VenueSubscriptionPayload {
  mutation: MutationType!
  node: Venue
  updatedFields: [String!]
  previousValues: VenuePreviousValues
}

input VenueSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [VenueSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [VenueSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [VenueSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: VenueWhereInput
}

input VenueUpdateInput {
  name: String
  address: String
  placeID: String
  latitude: Float
  longitude: Float
  events: EventUpdateManyWithoutVenueInput
}

input VenueUpdateManyMutationInput {
  name: String
  address: String
  placeID: String
  latitude: Float
  longitude: Float
}

input VenueUpdateOneRequiredWithoutEventsInput {
  create: VenueCreateWithoutEventsInput
  connect: VenueWhereUniqueInput
  update: VenueUpdateWithoutEventsDataInput
  upsert: VenueUpsertWithoutEventsInput
}

input VenueUpdateWithoutEventsDataInput {
  name: String
  address: String
  placeID: String
  latitude: Float
  longitude: Float
}

input VenueUpsertWithoutEventsInput {
  update: VenueUpdateWithoutEventsDataInput!
  create: VenueCreateWithoutEventsInput!
}

input VenueWhereInput {
  """Logical AND on all given filters."""
  AND: [VenueWhereInput!]

  """Logical OR on all given filters."""
  OR: [VenueWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [VenueWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  address: String

  """All values that are not equal to given value."""
  address_not: String

  """All values that are contained in given list."""
  address_in: [String!]

  """All values that are not contained in given list."""
  address_not_in: [String!]

  """All values less than the given value."""
  address_lt: String

  """All values less than or equal the given value."""
  address_lte: String

  """All values greater than the given value."""
  address_gt: String

  """All values greater than or equal the given value."""
  address_gte: String

  """All values containing the given string."""
  address_contains: String

  """All values not containing the given string."""
  address_not_contains: String

  """All values starting with the given string."""
  address_starts_with: String

  """All values not starting with the given string."""
  address_not_starts_with: String

  """All values ending with the given string."""
  address_ends_with: String

  """All values not ending with the given string."""
  address_not_ends_with: String
  placeID: String

  """All values that are not equal to given value."""
  placeID_not: String

  """All values that are contained in given list."""
  placeID_in: [String!]

  """All values that are not contained in given list."""
  placeID_not_in: [String!]

  """All values less than the given value."""
  placeID_lt: String

  """All values less than or equal the given value."""
  placeID_lte: String

  """All values greater than the given value."""
  placeID_gt: String

  """All values greater than or equal the given value."""
  placeID_gte: String

  """All values containing the given string."""
  placeID_contains: String

  """All values not containing the given string."""
  placeID_not_contains: String

  """All values starting with the given string."""
  placeID_starts_with: String

  """All values not starting with the given string."""
  placeID_not_starts_with: String

  """All values ending with the given string."""
  placeID_ends_with: String

  """All values not ending with the given string."""
  placeID_not_ends_with: String
  latitude: Float

  """All values that are not equal to given value."""
  latitude_not: Float

  """All values that are contained in given list."""
  latitude_in: [Float!]

  """All values that are not contained in given list."""
  latitude_not_in: [Float!]

  """All values less than the given value."""
  latitude_lt: Float

  """All values less than or equal the given value."""
  latitude_lte: Float

  """All values greater than the given value."""
  latitude_gt: Float

  """All values greater than or equal the given value."""
  latitude_gte: Float
  longitude: Float

  """All values that are not equal to given value."""
  longitude_not: Float

  """All values that are contained in given list."""
  longitude_in: [Float!]

  """All values that are not contained in given list."""
  longitude_not_in: [Float!]

  """All values less than the given value."""
  longitude_lt: Float

  """All values less than or equal the given value."""
  longitude_lte: Float

  """All values greater than the given value."""
  longitude_gt: Float

  """All values greater than or equal the given value."""
  longitude_gte: Float
  events_every: EventWhereInput
  events_some: EventWhereInput
  events_none: EventWhereInput
}

input VenueWhereUniqueInput {
  id: ID
}
